<?php

require_once __DIR__ . '/../Helpers/autoload.php';

class OrganizationController
{
    private $methodPermissionMap = [
    'dashboard' => ['dashboard_overview_view'],
    // Profile should be accessible to all authenticated organization users
    'organizationProfile' => [],
        'reportSettings' => ['org_report_settings_manage'],
        'createReportSetting' => ['org_report_settings_manage'],
        'editReportSetting' => ['org_report_settings_manage'],
        'viewReportSetting' => ['org_report_settings_manage'],
        'storeReportSetting' => ['org_report_settings_manage'],
        'updateReportSetting' => ['org_report_settings_manage'],
        'deleteReportSetting' => ['org_report_settings_manage'],
        'organizationPosts' => ['org_posts_manage'],
        'createOrganizationPost' => ['org_posts_manage'],
        'editOrganizationPost' => ['org_posts_manage'],
        'storeOrganizationPost' => ['org_posts_manage'],
        'updateOrganizationPost' => ['org_posts_manage'],
        'deleteOrganizationPost' => ['org_posts_manage'],
        'organizationRoles' => ['users_manage_roles'],
        'createOrganizationRole' => ['users_manage_roles'],
        'editOrganizationRole' => ['users_manage_roles'],
        'storeOrganizationRole' => ['users_manage_roles'],
        'updateOrganizationRole' => ['users_manage_roles'],
        'deleteOrganizationRole' => ['users_manage_roles'],
        'organizationRoleAccessMatrix' => ['role_access_matrix_manage'],
        'updateOrganizationRoleAccessMatrix' => ['role_access_matrix_manage'],
        'organizationServiceLocations' => ['org_service_locations_manage'],
        'createOrganizationServiceLocation' => ['org_service_locations_manage'],
        'editOrganizationServiceLocation' => ['org_service_locations_manage'],
        'storeOrganizationServiceLocation' => ['org_service_locations_manage'],
        'updateOrganizationServiceLocation' => ['org_service_locations_manage'],
        'deleteOrganizationServiceLocation' => ['org_service_locations_manage'],
        'organizationExecutiveUnits' => ['executive_units_manage'],
        'createOrganizationExecutiveUnit' => ['executive_units_manage'],
        'editOrganizationExecutiveUnit' => ['executive_units_manage'],
        'storeOrganizationExecutiveUnit' => ['executive_units_manage'],
        'updateOrganizationExecutiveUnit' => ['executive_units_manage'],
        'deleteOrganizationExecutiveUnit' => ['executive_units_manage'],
        'organizationEvaluationCalendar' => ['evaluation_calendar_manage'],
        'createOrganizationEvaluationCalendar' => ['evaluation_calendar_manage'],
        'editOrganizationEvaluationCalendar' => ['evaluation_calendar_manage'],
        'storeOrganizationEvaluationCalendar' => ['evaluation_calendar_manage'],
        'updateOrganizationEvaluationCalendar' => ['evaluation_calendar_manage'],
        'deleteOrganizationEvaluationCalendar' => ['evaluation_calendar_manage'],
        'organizationEvaluationCalendarMatrix' => ['evaluation_calendar_matrix_manage'],
        'manageOrganizationEvaluationCalendarMatrix' => ['evaluation_calendar_matrix_manage'],
        'updateOrganizationEvaluationCalendarMatrix' => ['evaluation_calendar_matrix_manage'],
        'organizationEvaluationTools' => ['tools_view', 'tools_manage'],
        'createOrganizationEvaluationTool' => ['tools_manage'],
        'editOrganizationEvaluationTool' => ['tools_manage'],
        'storeOrganizationEvaluationTool' => ['tools_manage'],
        'updateOrganizationEvaluationTool' => ['tools_manage'],
        'deleteOrganizationEvaluationTool' => ['tools_manage'],
        'organizationEvaluationToolQuestions' => ['tools_view', 'tools_manage'],
        'createOrganizationEvaluationToolQuestion' => ['tools_manage'],
        'editOrganizationEvaluationToolQuestion' => ['tools_manage'],
        'storeOrganizationEvaluationToolQuestion' => ['tools_manage'],
        'updateOrganizationEvaluationToolQuestion' => ['tools_manage'],
        'importOrganizationEvaluationToolQuestionsFromExam' => ['tools_manage'],
        'deleteOrganizationEvaluationToolQuestion' => ['tools_manage'],
        'organizationToolsMbtiSettings' => ['tools_mbti_settings_manage'],
        'createOrganizationToolsMbtiType' => ['tools_mbti_settings_manage'],
        'editOrganizationToolsMbtiType' => ['tools_mbti_settings_manage'],
        'storeOrganizationToolsMbtiType' => ['tools_mbti_settings_manage'],
        'updateOrganizationToolsMbtiType' => ['tools_mbti_settings_manage'],
        'deleteOrganizationToolsMbtiType' => ['tools_mbti_settings_manage'],
        'manageOrganizationMbtiTypeFeatures' => ['tools_mbti_settings_manage'],
        'createOrganizationMbtiTypeFeature' => ['tools_mbti_settings_manage'],
        'editOrganizationMbtiTypeFeature' => ['tools_mbti_settings_manage'],
        'storeOrganizationMbtiTypeFeature' => ['tools_mbti_settings_manage'],
        'updateOrganizationMbtiTypeFeature' => ['tools_mbti_settings_manage'],
        'deleteOrganizationMbtiTypeFeature' => ['tools_mbti_settings_manage'],
        'organizationToolsNeoSettings' => ['tools_neo_settings_manage'],
        'createOrganizationNeoTrait' => ['tools_neo_settings_manage'],
        'editOrganizationNeoTrait' => ['tools_neo_settings_manage'],
        'storeOrganizationNeoTrait' => ['tools_neo_settings_manage'],
        'updateOrganizationNeoTrait' => ['tools_neo_settings_manage'],
        'deleteOrganizationNeoTrait' => ['tools_neo_settings_manage'],
        'seedOrganizationNeoTraits' => ['tools_neo_settings_manage'],
        'organizationToolsDiscSettings' => ['tools_disc_settings_manage'],
        'createOrganizationDiscPersonalityType' => ['tools_disc_settings_manage'],
        'editOrganizationDiscPersonalityType' => ['tools_disc_settings_manage'],
        'storeOrganizationDiscPersonalityType' => ['tools_disc_settings_manage'],
        'updateOrganizationDiscPersonalityType' => ['tools_disc_settings_manage'],
        'deleteOrganizationDiscPersonalityType' => ['tools_disc_settings_manage'],
        'seedOrganizationDiscPersonalityTypes' => ['tools_disc_settings_manage'],
        'organizationCompetencyDimensions' => ['competency_dimensions_manage'],
        'createOrganizationCompetencyDimension' => ['competency_dimensions_manage'],
        'editOrganizationCompetencyDimension' => ['competency_dimensions_manage'],
        'storeOrganizationCompetencyDimension' => ['competency_dimensions_manage'],
        'updateOrganizationCompetencyDimension' => ['competency_dimensions_manage'],
        'deleteOrganizationCompetencyDimension' => ['competency_dimensions_manage'],
        'organizationCompetencies' => ['competencies_view', 'competencies_manage'],
        'createOrganizationCompetency' => ['competencies_manage'],
        'editOrganizationCompetency' => ['competencies_manage'],
        'storeOrganizationCompetency' => ['competencies_manage'],
        'updateOrganizationCompetency' => ['competencies_manage'],
        'deleteOrganizationCompetency' => ['competencies_manage'],
        'organizationCompetencyExamples' => ['competencies_view', 'competencies_manage'],
        'storeOrganizationCompetencyExample' => ['competencies_manage'],
        'deleteOrganizationCompetencyExample' => ['competencies_manage'],
        'organizationCompetencyFeatures' => ['competency_features_manage'],
        'createOrganizationCompetencyFeature' => ['competency_features_manage'],
        'editOrganizationCompetencyFeature' => ['competency_features_manage'],
        'storeOrganizationCompetencyFeature' => ['competency_features_manage'],
        'updateOrganizationCompetencyFeature' => ['competency_features_manage'],
        'deleteOrganizationCompetencyFeature' => ['competency_features_manage'],
        'organizationCompetencyModels' => ['competency_model_manage'],
        'createOrganizationCompetencyModel' => ['competency_model_manage'],
        'editOrganizationCompetencyModel' => ['competency_model_manage'],
        'storeOrganizationCompetencyModel' => ['competency_model_manage'],
        'updateOrganizationCompetencyModel' => ['competency_model_manage'],
        'deleteOrganizationCompetencyModel' => ['competency_model_manage'],
        'organizationCompetencyModelMatrix' => ['competency_model_matrix_manage'],
        'organizationCompetencyToolMatrix' => ['tool_competency_matrix_manage'],
        'organizationDevelopmentPrograms' => ['courses_view', 'courses_manage'],
        'createOrganizationDevelopmentProgram' => ['courses_manage'],
        'editOrganizationDevelopmentProgram' => ['courses_manage'],
        'storeOrganizationDevelopmentProgram' => ['courses_manage'],
        'updateOrganizationDevelopmentProgram' => ['courses_manage'],
        'deleteOrganizationDevelopmentProgram' => ['courses_manage'],
        'organizationUsers' => ['users_manage_users'],
        'createOrganizationUser' => ['users_manage_users'],
        'uploadOrganizationUsersForm' => ['users_manage_users'],
        'downloadOrganizationUsersSample' => ['users_manage_users'],
        'editOrganizationUser' => ['users_manage_users'],
        'storeOrganizationUser' => ['users_manage_users'],
        'importOrganizationUsers' => ['users_manage_users'],
        'updateOrganizationUser' => ['users_manage_users'],
        'deleteOrganizationUser' => ['users_manage_users'],
    'organizationUserRoleMatrix' => ['users_manage_user_roles'],
    'updateOrganizationUserRoleMatrix' => ['users_manage_user_roles'],
    'organizationWashUpList' => ['results_washup_register', 'results_washup_final'],
    'organizationWashUpDetail' => ['results_washup_register', 'results_washup_final'],
    'organizationSelfAssessmentResults' => ['reports_self_view'],
    'organizationActiveEvaluations' => ['results_assessment_register'],
    'organizationActiveEvaluationScore' => ['results_assessment_register'],
    'organizationActiveEvaluationToolScore' => ['results_assessment_register'],
    'storeOrganizationActiveEvaluationToolScore' => ['results_assessment_register'],
    // Reports - Certificate settings
    'organizationCertificateSettings' => ['reports_settings_manage'],
    'updateOrganizationCertificateSettings' => ['reports_settings_manage'],
    'organizationCertificateBuilder' => ['reports_settings_manage'],
    'updateOrganizationCertificateBuilder' => ['reports_settings_manage'],
        'uploadOrganizationCertificateBuilderImage' => ['reports_settings_manage'],
        'organizationCertificatePreview' => ['reports_settings_manage'],
    ];

    private $currentAction = null;
    private $cachedSessionData = null;

    public function guardActionPermissions(string $methodName): void
    {
        $this->currentAction = $methodName;
        $requiredPermissions = isset($this->methodPermissionMap[$methodName])
            ? $this->methodPermissionMap[$methodName]
            : [];

        $this->ensureOrganizationSession($requiredPermissions);
    }

    public function dashboard(): void
    {
        $sessionData = $this->ensureOrganizationSession(['dashboard_overview_view']);

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];
        $organizationId = isset($organization['id']) ? (int) $organization['id'] : 0;

        $title = 'داشبورد سازمان';

        $creditUsageChart = [
            'used' => 0,
            'remaining' => 0,
            'total' => 0,
            'used_display' => 0,
            'remaining_display' => 0,
            'completed_participations' => 0,
        ];

        $summaryCards = [];
        $monthlyOverview = [];
        $upcomingEvaluations = [];
        $recentActivities = [];
        $competencyModelShowcase = [];
        $periodicExamsLabels = [];
        $periodicExamsSeries = [];
        $monthlyExamsLabels = [];
        $monthlyExamsSeries = [];

        $quickLinks = [
            [
                'label' => 'مدیریت ارزیابی‌ها',
                'icon' => 'ph-clipboard-text',
                'url' => UtilityHelper::baseUrl('organizations/evaluations'),
            ],
            [
                'label' => 'دعوت از اعضای جدید',
                'icon' => 'ph-user-plus',
                'url' => UtilityHelper::baseUrl('organizations/employees/invitations'),
            ],
            [
                'label' => 'گزارش‌های عملکرد',
                'icon' => 'ph-chart-line-up',
                'url' => UtilityHelper::baseUrl('organizations/reports'),
            ],
            [
                'label' => 'تنظیمات سازمان',
                'icon' => 'ph-gear-six',
                'url' => UtilityHelper::baseUrl('organizations/settings'),
            ],
        ];

        $organizationSubtitle = $organization['latin_name'] ?? 'Organization Dashboard';
        $organizationCode = $organization['code'] ?? 'ORG-000';
        $organizationSubdomain = $organization['subdomain'] ?? '---';

        include __DIR__ . '/../Views/organizations/dashboard/index.php';
    }

    public function organizationProfile(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        $title = 'پروفایل کاربری سازمان';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $roleLabel = $this->resolveOrganizationRoleLabelFromUser($user);
        $permissions = isset($user['permissions']) && is_array($user['permissions']) ? $user['permissions'] : [];
        $permissionsCount = count($permissions);
        $accountSource = (string)($user['account_source'] ?? 'organizations');
        $accountSourceLabel = $this->translateOrganizationAccountSource($accountSource);
        $organizationUserId = isset($user['organization_user_id']) ? (int)$user['organization_user_id'] : null;
        $userFlags = isset($user['organization_user_flags']) && is_array($user['organization_user_flags'])
            ? $user['organization_user_flags']
            : [];

        $contactDetails = [
            'username' => $user['username'] ?? null,
            'email' => $user['email'] ?? null,
            'mobile' => $user['mobile'] ?? null,
            'national_code' => $user['national_code'] ?? null,
        ];

        $profileMeta = [
            'last_login_at' => $user['last_login_at'] ?? null,
            'created_at' => $user['created_at'] ?? null,
        ];

        include __DIR__ . '/../Views/organizations/profile/index.php';
    }

    public function reportSettings(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureReportSettingsTableExists();

        $title = 'تنظیمات گزارشات سازمان';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $reportTemplates = [];
        try {
            $reportTemplates = DatabaseHelper::fetchAll(
                'SELECT * FROM organization_report_settings WHERE organization_id = :organization_id ORDER BY created_at DESC',
                ['organization_id' => (int) ($organization['id'] ?? 0)]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی تنظیمات گزارش مشکل رخ داد.');
        }

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/report-settings/index.php';
    }

    public function organizationPosts(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationPostsTableExists();

        $title = 'پست‌های سازمانی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationPosts = [];
        try {
            $organizationPosts = DatabaseHelper::fetchAll(
                'SELECT * FROM organization_posts WHERE organization_id = :organization_id ORDER BY created_at DESC',
                ['organization_id' => (int) ($organization['id'] ?? 0)]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی پست‌های سازمانی مشکلی رخ داد.');
        }

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/posts/index.php';
    }

    public function createOrganizationPost(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationPostsTableExists();

        $title = 'ایجاد پست سازمانی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/posts/create.php';
    }

    public function storeOrganizationPost(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationPostsTableExists();

        $redirectCreate = UtilityHelper::baseUrl('organizations/posts/create');
        $redirectIndex = UtilityHelper::baseUrl('organizations/posts');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $input = [
            'code' => trim((string) ($_POST['code'] ?? '')),
            'name' => trim((string) ($_POST['name'] ?? '')),
        ];

    $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($input['code'] === '') {
            $validationErrors['code'] = 'کد الزامی است.';
        }

        if ($input['name'] === '') {
            $validationErrors['name'] = 'نام الزامی است.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان ثبت پست سازمانی در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $exists = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_posts WHERE organization_id = :organization_id AND code = :code LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'code' => $input['code'],
                ]
            );

            if ($exists) {
                $_SESSION['validation_errors'] = ['code' => 'این کد قبلاً ثبت شده است.'];
                ResponseHelper::flashError('کد تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectCreate);
            }

            DatabaseHelper::insert('organization_posts', [
                'code' => $input['code'],
                'name' => $input['name'],
                'organization_id' => $organizationId,
                'user_id' => $userIdentifier,
            ]);

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('پست سازمانی با موفقیت ایجاد شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام ذخیره پست سازمانی خطایی رخ داد.');
            UtilityHelper::redirect($redirectCreate);
        }
    }

    public function editOrganizationPost(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationPostsTableExists();

        $title = 'ویرایش پست سازمانی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $postId = isset($_GET['id']) ? (int) $_GET['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/posts');

        if ($postId <= 0) {
            ResponseHelper::flashError('شناسه پست سازمانی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $organizationPost = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_posts WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $postId,
                    'organization_id' => (int) ($organization['id'] ?? 0),
                ]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی اطلاعات پست سازمانی مشکلی رخ داد.');
            UtilityHelper::redirect($redirectIndex);
        }

        if (!$organizationPost) {
            ResponseHelper::flashError('پست سازمانی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');
        $successMessage = flash('success');

        include __DIR__ . '/../Views/organizations/posts/edit.php';
    }

    public function updateOrganizationPost(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationPostsTableExists();

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        $postId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/posts');
        $redirectEdit = UtilityHelper::baseUrl('organizations/posts/edit?id=' . $postId);

        if ($postId <= 0) {
            ResponseHelper::flashError('شناسه پست سازمانی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $input = [
            'code' => trim((string) ($_POST['code'] ?? '')),
            'name' => trim((string) ($_POST['name'] ?? '')),
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($input['code'] === '') {
            $validationErrors['code'] = 'کد الزامی است.';
        }

        if ($input['name'] === '') {
            $validationErrors['name'] = 'نام الزامی است.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان به‌روزرسانی پست سازمانی در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $exists = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_posts WHERE organization_id = :organization_id AND code = :code AND id <> :id LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'code' => $input['code'],
                    'id' => $postId,
                ]
            );

            if ($exists) {
                $_SESSION['validation_errors'] = ['code' => 'این کد قبلاً ثبت شده است.'];
                ResponseHelper::flashError('کد تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectEdit);
            }

            DatabaseHelper::update(
                'organization_posts',
                [
                    'code' => $input['code'],
                    'name' => $input['name'],
                    'user_id' => $userIdentifier,
                ],
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $postId,
                    'organization_id' => $organizationId,
                ]
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('پست سازمانی با موفقیت به‌روزرسانی شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در به‌روزرسانی پست سازمانی خطایی رخ داد.');
            UtilityHelper::redirect($redirectEdit);
        }
    }

    public function deleteOrganizationPost(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationPostsTableExists();

        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $redirectIndex = UtilityHelper::baseUrl('organizations/posts');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $postId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        if ($postId <= 0) {
            ResponseHelper::flashError('شناسه پست سازمانی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $deleted = DatabaseHelper::delete(
                'organization_posts',
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $postId,
                    'organization_id' => $organizationId,
                ]
            );

            if ($deleted > 0) {
                ResponseHelper::flashSuccess('پست سازمانی با موفقیت حذف شد.');
            } else {
                ResponseHelper::flashError('پست سازمانی مورد نظر یافت نشد یا قبلاً حذف شده است.');
            }
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام حذف پست سازمانی خطایی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function organizationCompetencyDimensions(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();

        $title = 'ابعاد شایستگی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $accountSourceRaw = (string) ($user['account_source'] ?? '');
        $accountSource = $accountSourceRaw !== '' && function_exists('mb_strtolower')
            ? mb_strtolower($accountSourceRaw, 'UTF-8')
            : strtolower($accountSourceRaw);

        $flags = isset($user['organization_user_flags']) && is_array($user['organization_user_flags'])
            ? $user['organization_user_flags']
            : [];

        $isOwnerAccount = $accountSource === 'organizations';
        $isSystemAdmin = $isOwnerAccount || (int) ($flags['is_system_admin'] ?? 0) === 1;
        $isManager = (int) ($flags['is_manager'] ?? 0) === 1;
        $isEvaluator = (int) ($flags['is_evaluator'] ?? 0) === 1;
        $isEvaluatee = (int) ($flags['is_evaluee'] ?? 0) === 1;
        $currentOrganizationUserId = (int) ($user['organization_user_id'] ?? 0);

        $competencyDimensions = [];
        try {
            $competencyDimensions = DatabaseHelper::fetchAll(
                'SELECT * FROM organization_competency_dimensions WHERE organization_id = :organization_id ORDER BY created_at DESC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی ابعاد شایستگی مشکلی بوجود آمد.');
        }

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/competency-dimensions/index.php';
    }

    public function createOrganizationCompetencyDimension(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();

        $title = 'ایجاد بعد شایستگی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/competency-dimensions/create.php';
    }

    public function storeOrganizationCompetencyDimension(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();

        $redirectCreate = UtilityHelper::baseUrl('organizations/competency-dimensions/create');
        $redirectIndex = UtilityHelper::baseUrl('organizations/competency-dimensions');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $name = trim((string) ($_POST['name'] ?? ''));
        $description = trim((string) ($_POST['description'] ?? ''));
        $isPublicInput = $_POST['is_public'] ?? '';
        $isPublic = in_array($isPublicInput, ['1', 'on', 'true'], true) ? 1 : 0;

        $input = [
            'name' => $name,
            'description' => $description,
            'is_public' => $isPublic,
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($name === '') {
            $validationErrors['name'] = 'نام الزامی است.';
        } elseif (mb_strlen($name) > 191) {
            $validationErrors['name'] = 'طول نام نباید بیش از ۱۹۱ کاراکتر باشد.';
        }

        if ($description !== '' && mb_strlen($description) > 1000) {
            $validationErrors['description'] = 'توضیحات نباید بیش از ۱۰۰۰ کاراکتر باشد.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان ثبت بعد شایستگی در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $exists = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_competency_dimensions WHERE organization_id = :organization_id AND name = :name LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'name' => $name,
                ]
            );

            if ($exists) {
                $_SESSION['validation_errors'] = ['name' => 'این نام قبلاً ثبت شده است.'];
                ResponseHelper::flashError('نام تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectCreate);
            }

            DatabaseHelper::insert('organization_competency_dimensions', [
                'organization_id' => $organizationId,
                'name' => $name,
                'description' => $description !== '' ? $description : null,
                'is_public' => $isPublic,
                'user_id' => $userIdentifier,
            ]);

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('بعد شایستگی با موفقیت ایجاد شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام ذخیره بعد شایستگی خطایی رخ داد.');
            UtilityHelper::redirect($redirectCreate);
        }
    }

    public function editOrganizationCompetencyDimension(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();

        $title = 'ویرایش بعد شایستگی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $dimensionId = isset($_GET['id']) ? (int) $_GET['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/competency-dimensions');

        if ($dimensionId <= 0) {
            ResponseHelper::flashError('شناسه بعد شایستگی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $competencyDimension = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_competency_dimensions WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $dimensionId,
                    'organization_id' => (int) ($organization['id'] ?? 0),
                ]
            );
        } catch (Exception $exception) {
            $competencyDimension = null;
        }

        if (!$competencyDimension) {
            ResponseHelper::flashError('بعد شایستگی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');
        $successMessage = flash('success');

        include __DIR__ . '/../Views/organizations/competency-dimensions/edit.php';
    }

    public function updateOrganizationCompetencyDimension(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        $dimensionId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/competency-dimensions');
        $redirectEdit = UtilityHelper::baseUrl('organizations/competency-dimensions/edit?id=' . $dimensionId);

        if ($dimensionId <= 0) {
            ResponseHelper::flashError('شناسه بعد شایستگی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $name = trim((string) ($_POST['name'] ?? ''));
        $description = trim((string) ($_POST['description'] ?? ''));
        $isPublicInput = $_POST['is_public'] ?? '';
        $isPublic = in_array($isPublicInput, ['1', 'on', 'true'], true) ? 1 : 0;

        $input = [
            'name' => $name,
            'description' => $description,
            'is_public' => $isPublic,
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($name === '') {
            $validationErrors['name'] = 'نام الزامی است.';
        } elseif (mb_strlen($name) > 191) {
            $validationErrors['name'] = 'طول نام نباید بیش از ۱۹۱ کاراکتر باشد.';
        }

        if ($description !== '' && mb_strlen($description) > 1000) {
            $validationErrors['description'] = 'توضیحات نباید بیش از ۱۰۰۰ کاراکتر باشد.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان به‌روزرسانی بعد شایستگی در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $exists = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_competency_dimensions WHERE organization_id = :organization_id AND name = :name AND id <> :id LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'name' => $name,
                    'id' => $dimensionId,
                ]
            );

            if ($exists) {
                $_SESSION['validation_errors'] = ['name' => 'این نام قبلاً ثبت شده است.'];
                ResponseHelper::flashError('نام تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectEdit);
            }

            DatabaseHelper::update(
                'organization_competency_dimensions',
                [
                    'name' => $name,
                    'description' => $description !== '' ? $description : null,
                    'is_public' => $isPublic,
                    'user_id' => $userIdentifier,
                ],
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $dimensionId,
                    'organization_id' => $organizationId,
                ]
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('بعد شایستگی با موفقیت به‌روزرسانی شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در به‌روزرسانی بعد شایستگی خطایی رخ داد.');
            UtilityHelper::redirect($redirectEdit);
        }
    }

    public function deleteOrganizationCompetencyDimension(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();

        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $redirectIndex = UtilityHelper::baseUrl('organizations/competency-dimensions');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $dimensionId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        if ($dimensionId <= 0) {
            ResponseHelper::flashError('شناسه بعد شایستگی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $deleted = DatabaseHelper::delete(
                'organization_competency_dimensions',
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $dimensionId,
                    'organization_id' => $organizationId,
                ]
            );

            if ($deleted > 0) {
                ResponseHelper::flashSuccess('بعد شایستگی با موفقیت حذف شد.');
            } else {
                ResponseHelper::flashError('بعد شایستگی مورد نظر یافت نشد یا قبلاً حذف شده است.');
            }
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام حذف بعد شایستگی خطایی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function organizationCompetencies(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();

        $title = 'شایستگی‌ها';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $competencies = [];
        try {
            $competencies = DatabaseHelper::fetchAll(
                'SELECT oc.*, ocd.name AS dimension_name
                 FROM organization_competencies oc
                 LEFT JOIN organization_competency_dimensions ocd
                   ON ocd.id = oc.competency_dimension_id AND ocd.organization_id = oc.organization_id
                 WHERE oc.organization_id = :organization_id
                 ORDER BY oc.created_at DESC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی شایستگی‌ها مشکلی بوجود آمد.');
        }

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/competencies/index.php';
    }

    public function createOrganizationCompetency(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();

        $title = 'ایجاد شایستگی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $competencyDimensions = [];
        try {
            $competencyDimensions = DatabaseHelper::fetchAll(
                'SELECT id, name FROM organization_competency_dimensions WHERE organization_id = :organization_id ORDER BY name ASC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $competencyDimensions = [];
        }

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/competencies/create.php';
    }

    public function storeOrganizationCompetency(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();

        $redirectCreate = UtilityHelper::baseUrl('organizations/competencies/create');
        $redirectIndex = UtilityHelper::baseUrl('organizations/competencies');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $competencyDimensionId = isset($_POST['competency_dimension_id']) ? (int) $_POST['competency_dimension_id'] : 0;
        $code = trim((string) ($_POST['code'] ?? ''));
        $title = trim((string) ($_POST['title'] ?? ''));
        $definition = trim((string) ($_POST['definition'] ?? ''));
        $input = [
            'competency_dimension_id' => $competencyDimensionId,
            'code' => $code,
            'title' => $title,
            'definition' => $definition,
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($competencyDimensionId <= 0) {
            $validationErrors['competency_dimension_id'] = 'انتخاب بعد شایستگی الزامی است.';
        }

        if ($code === '') {
            $validationErrors['code'] = 'کد شایستگی الزامی است.';
        } elseif (mb_strlen($code) > 191) {
            $validationErrors['code'] = 'طول کد نباید بیش از ۱۹۱ کاراکتر باشد.';
        }

        if ($title === '') {
            $validationErrors['title'] = 'عنوان شایستگی الزامی است.';
        } elseif (mb_strlen($title) > 191) {
            $validationErrors['title'] = 'طول عنوان نباید بیش از ۱۹۱ کاراکتر باشد.';
        }

        if ($definition === '') {
            $validationErrors['definition'] = 'تعریف شایستگی الزامی است.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان ثبت شایستگی در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $dimensionExists = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_competency_dimensions WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $competencyDimensionId,
                    'organization_id' => $organizationId,
                ]
            );

            if (!$dimensionExists) {
                $_SESSION['validation_errors'] = ['competency_dimension_id' => 'بعد شایستگی انتخاب شده معتبر نیست.'];
                ResponseHelper::flashError('بعد شایستگی انتخاب شده یافت نشد.');
                UtilityHelper::redirect($redirectCreate);
            }

            $duplicateCode = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_competencies WHERE organization_id = :organization_id AND code = :code LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'code' => $code,
                ]
            );

            if ($duplicateCode) {
                $_SESSION['validation_errors'] = ['code' => 'این کد قبلاً ثبت شده است.'];
                ResponseHelper::flashError('کد شایستگی تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectCreate);
            }

            DatabaseHelper::insert('organization_competencies', [
                'organization_id' => $organizationId,
                'competency_dimension_id' => $competencyDimensionId,
                'code' => $code,
                'title' => $title,
                'definition' => $definition,
                'user_id' => $userIdentifier,
            ]);

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('شایستگی با موفقیت ایجاد شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام ذخیره شایستگی خطایی رخ داد.');
            UtilityHelper::redirect($redirectCreate);
        }
    }

    public function editOrganizationCompetency(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();

        $title = 'ویرایش شایستگی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $competencyId = isset($_GET['id']) ? (int) $_GET['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/competencies');

        if ($competencyId <= 0) {
            ResponseHelper::flashError('شناسه شایستگی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $competency = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_competencies WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $competencyId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $competency = null;
        }

        if (!$competency) {
            ResponseHelper::flashError('شایستگی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $competencyDimensions = [];
        try {
            $competencyDimensions = DatabaseHelper::fetchAll(
                'SELECT id, name FROM organization_competency_dimensions WHERE organization_id = :organization_id ORDER BY name ASC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $competencyDimensions = [];
        }

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');
        $successMessage = flash('success');

        include __DIR__ . '/../Views/organizations/competencies/edit.php';
    }

    public function updateOrganizationCompetency(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        $competencyId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/competencies');
        $redirectEdit = UtilityHelper::baseUrl('organizations/competencies/edit?id=' . $competencyId);

        if ($competencyId <= 0) {
            ResponseHelper::flashError('شناسه شایستگی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $competencyDimensionId = isset($_POST['competency_dimension_id']) ? (int) $_POST['competency_dimension_id'] : 0;
        $code = trim((string) ($_POST['code'] ?? ''));
        $title = trim((string) ($_POST['title'] ?? ''));
        $definition = trim((string) ($_POST['definition'] ?? ''));
        $input = [
            'competency_dimension_id' => $competencyDimensionId,
            'code' => $code,
            'title' => $title,
            'definition' => $definition,
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($competencyDimensionId <= 0) {
            $validationErrors['competency_dimension_id'] = 'انتخاب بعد شایستگی الزامی است.';
        }

        if ($code === '') {
            $validationErrors['code'] = 'کد شایستگی الزامی است.';
        } elseif (mb_strlen($code) > 191) {
            $validationErrors['code'] = 'طول کد نباید بیش از ۱۹۱ کاراکتر باشد.';
        }

        if ($title === '') {
            $validationErrors['title'] = 'عنوان شایستگی الزامی است.';
        } elseif (mb_strlen($title) > 191) {
            $validationErrors['title'] = 'طول عنوان نباید بیش از ۱۹۱ کاراکتر باشد.';
        }

        if ($definition === '') {
            $validationErrors['definition'] = 'تعریف شایستگی الزامی است.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان به‌روزرسانی شایستگی در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $dimensionExists = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_competency_dimensions WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $competencyDimensionId,
                    'organization_id' => $organizationId,
                ]
            );

            if (!$dimensionExists) {
                $_SESSION['validation_errors'] = ['competency_dimension_id' => 'بعد شایستگی انتخاب شده معتبر نیست.'];
                ResponseHelper::flashError('بعد شایستگی انتخاب شده یافت نشد.');
                UtilityHelper::redirect($redirectEdit);
            }

            $duplicateCode = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_competencies WHERE organization_id = :organization_id AND code = :code AND id <> :id LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'code' => $code,
                    'id' => $competencyId,
                ]
            );

            if ($duplicateCode) {
                $_SESSION['validation_errors'] = ['code' => 'این کد قبلاً ثبت شده است.'];
                ResponseHelper::flashError('کد شایستگی تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectEdit);
            }

            DatabaseHelper::update(
                'organization_competencies',
                [
                    'competency_dimension_id' => $competencyDimensionId,
                    'code' => $code,
                    'title' => $title,
                    'definition' => $definition,
                    'user_id' => $userIdentifier,
                ],
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $competencyId,
                    'organization_id' => $organizationId,
                ]
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('شایستگی با موفقیت به‌روزرسانی شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در به‌روزرسانی شایستگی خطایی رخ داد.');
            UtilityHelper::redirect($redirectEdit);
        }
    }

    public function deleteOrganizationCompetency(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();

        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $redirectIndex = UtilityHelper::baseUrl('organizations/competencies');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $competencyId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        if ($competencyId <= 0) {
            ResponseHelper::flashError('شناسه شایستگی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $deleted = DatabaseHelper::delete(
                'organization_competencies',
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $competencyId,
                    'organization_id' => $organizationId,
                ]
            );

            if ($deleted > 0) {
                ResponseHelper::flashSuccess('شایستگی با موفقیت حذف شد.');
            } else {
                ResponseHelper::flashError('شایستگی مورد نظر یافت نشد یا قبلاً حذف شده است.');
            }
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام حذف شایستگی خطایی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function organizationCompetencyExamples(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyExamplesTableExists();

        $title = 'مصداق‌های رفتاری شایستگی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $competencyId = isset($_GET['competency_id']) ? (int) $_GET['competency_id'] : 0;
        $redirectCompetencies = UtilityHelper::baseUrl('organizations/competencies');

        if ($competencyId <= 0) {
            ResponseHelper::flashError('شناسه شایستگی نامعتبر است.');
            UtilityHelper::redirect($redirectCompetencies);
        }

        try {
            $competency = DatabaseHelper::fetchOne(
                'SELECT oc.*, ocd.name AS dimension_name
                 FROM organization_competencies oc
                 LEFT JOIN organization_competency_dimensions ocd
                   ON ocd.id = oc.competency_dimension_id AND ocd.organization_id = oc.organization_id
                 WHERE oc.id = :id AND oc.organization_id = :organization_id
                 LIMIT 1',
                [
                    'id' => $competencyId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $competency = null;
        }

        if (!$competency) {
            ResponseHelper::flashError('شایستگی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectCompetencies);
        }

        $behaviorExamples = [];
        try {
            $behaviorExamples = DatabaseHelper::fetchAll(
                'SELECT * FROM organization_competency_examples WHERE organization_id = :organization_id AND competency_id = :competency_id ORDER BY created_at DESC',
                [
                    'organization_id' => $organizationId,
                    'competency_id' => $competencyId,
                ]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی مصداق‌های رفتاری مشکلی رخ داد.');
        }

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/competencies/examples.php';
    }

    public function storeOrganizationCompetencyExample(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyExamplesTableExists();

        $redirectCompetencies = UtilityHelper::baseUrl('organizations/competencies');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectCompetencies);
        }

        $competencyId = isset($_POST['competency_id']) ? (int) $_POST['competency_id'] : 0;
        $behaviorExample = trim((string) ($_POST['behavior_example'] ?? ''));

        if ($competencyId <= 0) {
            ResponseHelper::flashError('شناسه شایستگی نامعتبر است.');
            UtilityHelper::redirect($redirectCompetencies);
        }

        $redirectExamples = UtilityHelper::baseUrl('organizations/competencies/examples?competency_id=' . $competencyId);

        $validationErrors = [];
        if ($behaviorExample === '') {
            $validationErrors['behavior_example'] = 'وارد کردن مصداق رفتاری الزامی است.';
        } elseif (mb_strlen($behaviorExample) > 1000) {
            $validationErrors['behavior_example'] = 'طول مصداق رفتاری نباید بیش از ۱۰۰۰ کاراکتر باشد.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            $_SESSION['old_input'] = ['behavior_example' => $behaviorExample];
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectExamples);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان ثبت مصداق رفتاری در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectExamples);
        }

        try {
            $competency = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_competencies WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $competencyId,
                    'organization_id' => $organizationId,
                ]
            );

            if (!$competency) {
                ResponseHelper::flashError('شایستگی انتخاب شده یافت نشد.');
                UtilityHelper::redirect($redirectCompetencies);
            }

            DatabaseHelper::insert('organization_competency_examples', [
                'organization_id' => $organizationId,
                'competency_id' => $competencyId,
                'behavior_example' => $behaviorExample,
                'user_id' => $userIdentifier,
            ]);

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('مصداق رفتاری با موفقیت اضافه شد.');
            UtilityHelper::redirect($redirectExamples);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام ذخیره مصداق رفتاری خطایی رخ داد.');
            UtilityHelper::redirect($redirectExamples);
        }
    }

    public function deleteOrganizationCompetencyExample(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyExamplesTableExists();

        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $redirectCompetencies = UtilityHelper::baseUrl('organizations/competencies');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectCompetencies);
        }

        $exampleId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        $competencyId = isset($_POST['competency_id']) ? (int) $_POST['competency_id'] : 0;
        if ($exampleId <= 0 || $competencyId <= 0) {
            ResponseHelper::flashError('شناسه مصداق یا شایستگی نامعتبر است.');
            UtilityHelper::redirect($redirectCompetencies);
        }

        $redirectExamples = UtilityHelper::baseUrl('organizations/competencies/examples?competency_id=' . $competencyId);

        try {
            $deleted = DatabaseHelper::delete(
                'organization_competency_examples',
                'id = :id AND organization_id = :organization_id AND competency_id = :competency_id',
                [
                    'id' => $exampleId,
                    'organization_id' => $organizationId,
                    'competency_id' => $competencyId,
                ]
            );

            if ($deleted > 0) {
                ResponseHelper::flashSuccess('مصداق رفتاری با موفقیت حذف شد.');
            } else {
                ResponseHelper::flashError('مصداق رفتاری مورد نظر یافت نشد یا قبلاً حذف شده است.');
            }
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام حذف مصداق رفتاری خطایی رخ داد.');
        }

        UtilityHelper::redirect($redirectExamples);
    }

    public function organizationCompetencyFeatures(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyFeaturesTableExists();

        $title = 'ویژگی‌های شایستگی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $competencyFeatures = [];
        try {
            $competencyFeatures = DatabaseHelper::fetchAll(
                'SELECT f.*, oc.code AS competency_code, oc.title AS competency_title
                 FROM organization_competency_features f
                 LEFT JOIN organization_competencies oc
                    ON oc.id = f.competency_id AND oc.organization_id = f.organization_id
                 WHERE f.organization_id = :organization_id
                 ORDER BY f.created_at DESC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی ویژگی‌های شایستگی مشکلی رخ داد.');
        }

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/competency-features/index.php';
    }

    public function createOrganizationCompetencyFeature(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyFeaturesTableExists();

        $title = 'ایجاد ویژگی شایستگی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $competencies = $this->fetchOrganizationCompetenciesForModels($organizationId);
        $availableFeatureTypes = $this->getExistingCompetencyFeatureTypes($organizationId);

        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/competency-features/create.php';
    }

    public function storeOrganizationCompetencyFeature(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyFeaturesTableExists();

        $redirectCreate = UtilityHelper::baseUrl('organizations/competency-features/create');
        $redirectIndex = UtilityHelper::baseUrl('organizations/competency-features');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $competencyIdInput = isset($_POST['competency_id']) ? trim((string) $_POST['competency_id']) : '';
        $competencyId = $competencyIdInput !== ''
            ? (int) UtilityHelper::persianToEnglish($competencyIdInput)
            : 0;

        $input = [
            'code' => trim((string) ($_POST['code'] ?? '')),
            'type' => preg_replace('/\s+/u', ' ', trim((string) ($_POST['type'] ?? ''))),
            'competency_id' => $competencyId,
            'description' => trim((string) ($_POST['description'] ?? '')),
        ];

        $_SESSION['old_input'] = [
            'code' => $input['code'],
            'type' => $input['type'],
            'competency_id' => $competencyId > 0 ? (string) $competencyId : $competencyIdInput,
            'description' => $input['description'],
        ];

        $validationErrors = [];

        if ($input['code'] === '') {
            $validationErrors['code'] = 'کد ویژگی الزامی است.';
        } elseif (mb_strlen($input['code']) > 191) {
            $validationErrors['code'] = 'طول کد نباید بیش از ۱۹۱ کاراکتر باشد.';
        }

        if ($input['type'] === '') {
            $validationErrors['type'] = 'نوع ویژگی الزامی است.';
        } elseif (mb_strlen($input['type']) > 100) {
            $validationErrors['type'] = 'طول نوع ویژگی نباید بیش از ۱۰۰ کاراکتر باشد.';
        }

        if ($input['competency_id'] <= 0) {
            $validationErrors['competency_id'] = 'انتخاب شایستگی الزامی است.';
        }

        if ($input['description'] !== '' && mb_strlen($input['description']) > 1000) {
            $validationErrors['description'] = 'طول توضیحات نباید بیش از ۱۰۰۰ کاراکتر باشد.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان ثبت ویژگی شایستگی در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $competency = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_competencies WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $input['competency_id'],
                    'organization_id' => $organizationId,
                ]
            );

            if (!$competency) {
                $_SESSION['validation_errors'] = ['competency_id' => 'شایستگی انتخاب شده یافت نشد.'];
                ResponseHelper::flashError('شایستگی انتخاب شده معتبر نیست.');
                UtilityHelper::redirect($redirectCreate);
            }

            $duplicate = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_competency_features WHERE organization_id = :organization_id AND code = :code LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'code' => $input['code'],
                ]
            );

            if ($duplicate) {
                $_SESSION['validation_errors'] = ['code' => 'این کد قبلاً برای ویژگی دیگری ثبت شده است.'];
                ResponseHelper::flashError('کد ویژگی تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectCreate);
            }

            try {
                $existingType = DatabaseHelper::fetchOne(
                    'SELECT type FROM organization_competency_features WHERE organization_id = :organization_id AND type = :type LIMIT 1',
                    [
                        'organization_id' => $organizationId,
                        'type' => $input['type'],
                    ]
                );

                if ($existingType && !empty($existingType['type'])) {
                    $input['type'] = trim((string) $existingType['type']);
                }
            } catch (Exception $exception) {
                // Silent fail; continue with provided type.
            }

            DatabaseHelper::insert('organization_competency_features', [
                'organization_id' => $organizationId,
                'competency_id' => $input['competency_id'],
                'code' => $input['code'],
                'type' => $input['type'],
                'description' => $input['description'] !== '' ? $input['description'] : null,
                'user_id' => $userIdentifier,
            ]);

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('ویژگی شایستگی با موفقیت ایجاد شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام ذخیره ویژگی شایستگی خطایی رخ داد.');
            UtilityHelper::redirect($redirectCreate);
        }
    }

    public function editOrganizationCompetencyFeature(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyFeaturesTableExists();

        $title = 'ویرایش ویژگی شایستگی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $featureId = isset($_GET['id']) ? (int) $_GET['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/competency-features');

        if ($featureId <= 0) {
            ResponseHelper::flashError('شناسه ویژگی شایستگی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $competencyFeature = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_competency_features WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $featureId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $competencyFeature = null;
        }

        if (!$competencyFeature) {
            ResponseHelper::flashError('ویژگی شایستگی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

    $competencies = $this->fetchOrganizationCompetenciesForModels($organizationId);
    $availableFeatureTypes = $this->getExistingCompetencyFeatureTypes($organizationId);

        $errorMessage = flash('error');
        $successMessage = flash('success');

        include __DIR__ . '/../Views/organizations/competency-features/edit.php';
    }

    public function updateOrganizationCompetencyFeature(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyFeaturesTableExists();

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        $featureId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/competency-features');
        $redirectEdit = UtilityHelper::baseUrl('organizations/competency-features/edit?id=' . $featureId);

        if ($featureId <= 0) {
            ResponseHelper::flashError('شناسه ویژگی شایستگی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $competencyIdInput = isset($_POST['competency_id']) ? trim((string) $_POST['competency_id']) : '';
        $competencyId = $competencyIdInput !== ''
            ? (int) UtilityHelper::persianToEnglish($competencyIdInput)
            : 0;

        $input = [
            'competency_id' => $competencyId,
            'code' => trim((string) ($_POST['code'] ?? '')),
            'type' => preg_replace('/\s+/u', ' ', trim((string) ($_POST['type'] ?? ''))),
            'description' => trim((string) ($_POST['description'] ?? '')),
        ];

        $_SESSION['old_input'] = [
            'competency_id' => $competencyId > 0 ? (string) $competencyId : $competencyIdInput,
            'code' => $input['code'],
            'type' => $input['type'],
            'description' => $input['description'],
        ];

        $validationErrors = [];

        if ($input['competency_id'] <= 0) {
            $validationErrors['competency_id'] = 'انتخاب شایستگی الزامی است.';
        }

        if ($input['code'] === '') {
            $validationErrors['code'] = 'کد ویژگی الزامی است.';
        } elseif (mb_strlen($input['code']) > 191) {
            $validationErrors['code'] = 'طول کد نباید بیش از ۱۹۱ کاراکتر باشد.';
        }

        if ($input['type'] === '') {
            $validationErrors['type'] = 'نوع ویژگی الزامی است.';
        } elseif (mb_strlen($input['type']) > 100) {
            $validationErrors['type'] = 'طول نوع ویژگی نباید بیش از ۱۰۰ کاراکتر باشد.';
        }

        if ($input['description'] !== '' && mb_strlen($input['description']) > 1000) {
            $validationErrors['description'] = 'طول توضیحات نباید بیش از ۱۰۰۰ کاراکتر باشد.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان به‌روزرسانی ویژگی شایستگی در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $competencyFeature = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_competency_features WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $featureId,
                    'organization_id' => $organizationId,
                ]
            );

            if (!$competencyFeature) {
                ResponseHelper::flashError('ویژگی شایستگی مورد نظر یافت نشد.');
                UtilityHelper::redirect($redirectIndex);
            }

            $competency = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_competencies WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $input['competency_id'],
                    'organization_id' => $organizationId,
                ]
            );

            if (!$competency) {
                $_SESSION['validation_errors'] = ['competency_id' => 'شایستگی انتخاب شده یافت نشد.'];
                ResponseHelper::flashError('شایستگی انتخاب شده معتبر نیست.');
                UtilityHelper::redirect($redirectEdit);
            }

            $duplicate = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_competency_features WHERE organization_id = :organization_id AND code = :code AND id <> :id LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'code' => $input['code'],
                    'id' => $featureId,
                ]
            );

            if ($duplicate) {
                $_SESSION['validation_errors'] = ['code' => 'این کد قبلاً برای ویژگی دیگری ثبت شده است.'];
                ResponseHelper::flashError('کد ویژگی تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectEdit);
            }

            try {
                $existingType = DatabaseHelper::fetchOne(
                    'SELECT type FROM organization_competency_features WHERE organization_id = :organization_id AND type = :type LIMIT 1',
                    [
                        'organization_id' => $organizationId,
                        'type' => $input['type'],
                    ]
                );

                if ($existingType && !empty($existingType['type'])) {
                    $input['type'] = trim((string) $existingType['type']);
                }
            } catch (Exception $exception) {
                // Silent fail; continue with provided type.
            }

            DatabaseHelper::update(
                'organization_competency_features',
                [
                    'competency_id' => $input['competency_id'],
                    'code' => $input['code'],
                    'type' => $input['type'],
                    'description' => $input['description'] !== '' ? $input['description'] : null,
                    'user_id' => $userIdentifier,
                ],
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $featureId,
                    'organization_id' => $organizationId,
                ]
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('ویژگی شایستگی با موفقیت به‌روزرسانی شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در به‌روزرسانی ویژگی شایستگی خطایی رخ داد.');
            UtilityHelper::redirect($redirectEdit);
        }
    }

    public function deleteOrganizationCompetencyFeature(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyFeaturesTableExists();

        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $redirectIndex = UtilityHelper::baseUrl('organizations/competency-features');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $featureId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        if ($featureId <= 0) {
            ResponseHelper::flashError('شناسه ویژگی شایستگی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $deleted = DatabaseHelper::delete(
                'organization_competency_features',
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $featureId,
                    'organization_id' => $organizationId,
                ]
            );

            if ($deleted > 0) {
                ResponseHelper::flashSuccess('ویژگی شایستگی با موفقیت حذف شد.');
            } else {
                ResponseHelper::flashError('ویژگی شایستگی مورد نظر یافت نشد یا قبلاً حذف شده است.');
            }
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام حذف ویژگی شایستگی خطایی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function organizationDevelopmentPrograms(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationDevelopmentProgramsTableExists();

        $title = 'برنامه‌های توسعه فردی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $developmentPrograms = [];
        try {
            $developmentPrograms = DatabaseHelper::fetchAll(
                'SELECT dp.*, oc.code AS competency_code, oc.title AS competency_title
                 FROM organization_development_programs dp
                 LEFT JOIN organization_competencies oc
                    ON oc.id = dp.competency_id AND oc.organization_id = dp.organization_id
                 WHERE dp.organization_id = :organization_id
                 ORDER BY dp.created_at DESC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی برنامه‌های توسعه فردی مشکلی رخ داد.');
        }

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/development-programs/index.php';
    }

    public function createOrganizationDevelopmentProgram(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationDevelopmentProgramsTableExists();

        $title = 'افزودن دوره توسعه فردی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $competencies = $this->fetchOrganizationCompetenciesForModels($organizationId);

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/development-programs/create.php';
    }

    public function storeOrganizationDevelopmentProgram(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationDevelopmentProgramsTableExists();

        $redirectCreate = UtilityHelper::baseUrl('organizations/development-programs/create');
        $redirectIndex = UtilityHelper::baseUrl('organizations/development-programs');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $courseCode = trim((string) ($_POST['course_code'] ?? ''));
        $courseTitle = trim((string) ($_POST['course_title'] ?? ''));
        $syllabus = trim((string) ($_POST['syllabus'] ?? ''));
        $competencyIdInput = trim((string) ($_POST['competency_id'] ?? ''));
        $courseHoursInput = trim((string) ($_POST['course_hours'] ?? ''));

        $competencyId = $competencyIdInput !== ''
            ? (int) UtilityHelper::persianToEnglish($competencyIdInput)
            : 0;

        $courseHoursNormalized = $courseHoursInput !== ''
            ? UtilityHelper::persianToEnglish($courseHoursInput)
            : '';

        $courseHours = null;
        if ($courseHoursNormalized !== '') {
            $courseHoursDigits = preg_replace('/[^0-9]/u', '', $courseHoursNormalized);
            if ($courseHoursDigits !== '') {
                $courseHours = (int) $courseHoursDigits;
            }
        }

        $_SESSION['old_input'] = [
            'course_code' => $courseCode,
            'course_title' => $courseTitle,
            'syllabus' => $syllabus,
            'competency_id' => $competencyId > 0 ? (string) $competencyId : $competencyIdInput,
            'course_hours' => $courseHoursInput,
        ];

        $validationErrors = [];

        if ($courseCode === '') {
            $validationErrors['course_code'] = 'کد دوره الزامی است.';
        } elseif (mb_strlen($courseCode) > 191) {
            $validationErrors['course_code'] = 'طول کد دوره نباید بیش از ۱۹۱ کاراکتر باشد.';
        }

        if ($competencyId <= 0) {
            $validationErrors['competency_id'] = 'انتخاب شایستگی الزامی است.';
        }

        if ($courseTitle === '') {
            $validationErrors['course_title'] = 'نام دوره آموزشی الزامی است.';
        } elseif (mb_strlen($courseTitle) > 255) {
            $validationErrors['course_title'] = 'طول نام دوره نباید بیش از ۲۵۵ کاراکتر باشد.';
        }

        if ($syllabus !== '' && mb_strlen($syllabus) > 2000) {
            $validationErrors['syllabus'] = 'طول سرفصل نباید بیش از ۲۰۰۰ کاراکتر باشد.';
        }

        if ($courseHours === null) {
            $validationErrors['course_hours'] = 'ساعت دوره الزامی است.';
        } elseif ($courseHours <= 0) {
            $validationErrors['course_hours'] = 'ساعت دوره باید عددی بزرگتر از صفر باشد.';
        } elseif ($courseHours > 1000) {
            $validationErrors['course_hours'] = 'ساعت دوره نباید بیش از ۱۰۰۰ ساعت باشد.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان ثبت دوره آموزشی در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $competencyExists = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_competencies WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $competencyId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $competencyExists = null;
        }

        if (!$competencyExists) {
            $_SESSION['validation_errors'] = ['competency_id' => 'شایستگی انتخاب شده معتبر نیست.'];
            ResponseHelper::flashError('شایستگی انتخاب شده یافت نشد.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $duplicate = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_development_programs WHERE organization_id = :organization_id AND course_code = :course_code LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'course_code' => $courseCode,
                ]
            );
        } catch (Exception $exception) {
            $duplicate = null;
        }

        if ($duplicate) {
            $_SESSION['validation_errors'] = ['course_code' => 'این کد دوره قبلاً ثبت شده است.'];
            ResponseHelper::flashError('کد دوره تکراری است. لطفاً مقدار دیگری وارد کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            DatabaseHelper::insert('organization_development_programs', [
                'organization_id' => $organizationId,
                'competency_id' => $competencyId,
                'course_code' => $courseCode,
                'course_title' => $courseTitle,
                'syllabus' => $syllabus !== '' ? $syllabus : null,
                'course_hours' => $courseHours,
                'created_by' => $userIdentifier,
            ]);

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('دوره آموزشی با موفقیت ثبت شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام ذخیره دوره آموزشی خطایی رخ داد.');
            UtilityHelper::redirect($redirectCreate);
        }
    }

    public function editOrganizationDevelopmentProgram(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationDevelopmentProgramsTableExists();

        $title = 'ویرایش دوره توسعه فردی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $programIdInput = $_GET['id'] ?? '';
        $programIdInput = UtilityHelper::persianToEnglish((string) $programIdInput);
        $programId = (int) $programIdInput;
        $redirectIndex = UtilityHelper::baseUrl('organizations/development-programs');

        if ($programId <= 0) {
            ResponseHelper::flashError('شناسه دوره آموزشی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $developmentProgram = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_development_programs WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $programId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $developmentProgram = null;
        }

        if (!$developmentProgram) {
            ResponseHelper::flashError('دوره آموزشی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $competencies = $this->fetchOrganizationCompetenciesForModels($organizationId);

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');
        $successMessage = flash('success');

        include __DIR__ . '/../Views/organizations/development-programs/edit.php';
    }

    public function updateOrganizationDevelopmentProgram(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationDevelopmentProgramsTableExists();

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        $programIdInput = $_POST['id'] ?? '';
        $programIdInput = UtilityHelper::persianToEnglish((string) $programIdInput);
        $programId = (int) $programIdInput;

        $redirectIndex = UtilityHelper::baseUrl('organizations/development-programs');
        $redirectEdit = UtilityHelper::baseUrl('organizations/development-programs/edit?id=' . $programId);

        if ($programId <= 0) {
            ResponseHelper::flashError('شناسه دوره آموزشی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        try {
            $developmentProgram = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_development_programs WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $programId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $developmentProgram = null;
        }

        if (!$developmentProgram) {
            ResponseHelper::flashError('دوره آموزشی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $courseCode = trim((string) ($_POST['course_code'] ?? ''));
        $courseTitle = trim((string) ($_POST['course_title'] ?? ''));
        $syllabus = trim((string) ($_POST['syllabus'] ?? ''));
        $competencyIdInput = trim((string) ($_POST['competency_id'] ?? ''));
        $courseHoursInput = trim((string) ($_POST['course_hours'] ?? ''));

        $competencyId = $competencyIdInput !== ''
            ? (int) UtilityHelper::persianToEnglish($competencyIdInput)
            : 0;

        $courseHoursNormalized = $courseHoursInput !== ''
            ? UtilityHelper::persianToEnglish($courseHoursInput)
            : '';

        $courseHours = null;
        if ($courseHoursNormalized !== '') {
            $courseHoursDigits = preg_replace('/[^0-9]/u', '', $courseHoursNormalized);
            if ($courseHoursDigits !== '') {
                $courseHours = (int) $courseHoursDigits;
            }
        }

        $_SESSION['old_input'] = [
            'course_code' => $courseCode,
            'course_title' => $courseTitle,
            'syllabus' => $syllabus,
            'competency_id' => $competencyId > 0 ? (string) $competencyId : $competencyIdInput,
            'course_hours' => $courseHoursInput,
        ];

        $validationErrors = [];

        if ($courseCode === '') {
            $validationErrors['course_code'] = 'کد دوره الزامی است.';
        } elseif (mb_strlen($courseCode) > 191) {
            $validationErrors['course_code'] = 'طول کد دوره نباید بیش از ۱۹۱ کاراکتر باشد.';
        }

        if ($competencyId <= 0) {
            $validationErrors['competency_id'] = 'انتخاب شایستگی الزامی است.';
        }

        if ($courseTitle === '') {
            $validationErrors['course_title'] = 'نام دوره آموزشی الزامی است.';
        } elseif (mb_strlen($courseTitle) > 255) {
            $validationErrors['course_title'] = 'طول نام دوره نباید بیش از ۲۵۵ کاراکتر باشد.';
        }

        if ($syllabus !== '' && mb_strlen($syllabus) > 2000) {
            $validationErrors['syllabus'] = 'طول سرفصل نباید بیش از ۲۰۰۰ کاراکتر باشد.';
        }

        if ($courseHours === null) {
            $validationErrors['course_hours'] = 'ساعت دوره الزامی است.';
        } elseif ($courseHours <= 0) {
            $validationErrors['course_hours'] = 'ساعت دوره باید عددی بزرگتر از صفر باشد.';
        } elseif ($courseHours > 1000) {
            $validationErrors['course_hours'] = 'ساعت دوره نباید بیش از ۱۰۰۰ ساعت باشد.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان به‌روزرسانی دوره آموزشی در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $competencyExists = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_competencies WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $competencyId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $competencyExists = null;
        }

        if (!$competencyExists) {
            $_SESSION['validation_errors'] = ['competency_id' => 'شایستگی انتخاب شده معتبر نیست.'];
            ResponseHelper::flashError('شایستگی انتخاب شده یافت نشد.');
            UtilityHelper::redirect($redirectEdit);
        }

        try {
            $duplicate = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_development_programs WHERE organization_id = :organization_id AND course_code = :course_code AND id <> :id LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'course_code' => $courseCode,
                    'id' => $programId,
                ]
            );
        } catch (Exception $exception) {
            $duplicate = null;
        }

        if ($duplicate) {
            $_SESSION['validation_errors'] = ['course_code' => 'این کد دوره قبلاً ثبت شده است.'];
            ResponseHelper::flashError('کد دوره تکراری است. لطفاً مقدار دیگری وارد کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        try {
            DatabaseHelper::update(
                'organization_development_programs',
                [
                    'competency_id' => $competencyId,
                    'course_code' => $courseCode,
                    'course_title' => $courseTitle,
                    'syllabus' => $syllabus !== '' ? $syllabus : null,
                    'course_hours' => $courseHours,
                    'updated_by' => $userIdentifier,
                ],
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $programId,
                    'organization_id' => $organizationId,
                ]
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('دوره آموزشی با موفقیت به‌روزرسانی شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در به‌روزرسانی دوره آموزشی خطایی رخ داد.');
            UtilityHelper::redirect($redirectEdit);
        }
    }

    public function deleteOrganizationDevelopmentProgram(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationDevelopmentProgramsTableExists();

        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $redirectIndex = UtilityHelper::baseUrl('organizations/development-programs');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $programIdInput = $_POST['id'] ?? '';
        $programIdInput = UtilityHelper::persianToEnglish((string) $programIdInput);
        $programId = (int) $programIdInput;

        if ($programId <= 0) {
            ResponseHelper::flashError('شناسه دوره آموزشی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $deleted = DatabaseHelper::delete(
                'organization_development_programs',
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $programId,
                    'organization_id' => $organizationId,
                ]
            );

            if ($deleted > 0) {
                ResponseHelper::flashSuccess('دوره آموزشی با موفقیت حذف شد.');
            } else {
                ResponseHelper::flashError('دوره آموزشی مورد نظر یافت نشد یا قبلاً حذف شده است.');
            }
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام حذف دوره آموزشی خطایی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function organizationCompetencyModels(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureReportSettingsTableExists();
        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyModelsTableExists();
        $this->ensureOrganizationCompetencyModelItemsTableExists();

        $title = 'مدل‌های شایستگی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $competencyModels = [];
        try {
            $competencyModels = DatabaseHelper::fetchAll(
                'SELECT m.*, rs.name AS report_setting_title
                 FROM organization_competency_models m
                 LEFT JOIN organization_report_settings rs
                    ON rs.id = m.report_setting_id AND rs.organization_id = m.organization_id
                 WHERE m.organization_id = :organization_id
                 ORDER BY m.created_at DESC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی مدل‌های شایستگی مشکلی رخ داد.');
        }

        $modelCompetencyCounts = [];
        if (!empty($competencyModels)) {
            $modelIds = array_map(static function ($model) {
                return (int) ($model['id'] ?? 0);
            }, $competencyModels);

            $modelCompetencyCounts = $this->getCompetencyModelCompetencyCounts($modelIds, $organizationId);
        }
        $scoringTypeOptions = $this->getCompetencyModelScoringTypes();

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/competency-models/index.php';
    }

    public function organizationCompetencyModelMatrix(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyModelsTableExists();
        $this->ensureOrganizationCompetencyModelItemsTableExists();

        $title = 'ماتریس مدل شایستگی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $competencyModels = [];
        try {
            $competencyModels = DatabaseHelper::fetchAll(
                'SELECT id, title, code, scoring_type
                 FROM organization_competency_models
                 WHERE organization_id = :organization_id
                 ORDER BY title ASC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی مدل‌های شایستگی مشکلی رخ داد.');
        }

        $competencies = [];
        try {
            $competencies = DatabaseHelper::fetchAll(
                'SELECT oc.id, oc.code, oc.title, ocd.name AS dimension_name
                 FROM organization_competencies oc
                 LEFT JOIN organization_competency_dimensions ocd
                    ON ocd.id = oc.competency_dimension_id AND ocd.organization_id = oc.organization_id
                 WHERE oc.organization_id = :organization_id
                 ORDER BY COALESCE(ocd.name, ""), oc.title ASC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی شایستگی‌ها مشکلی رخ داد.');
        }

        $modelMemberships = [];
        if (!empty($competencyModels) && !empty($competencies)) {
            try {
                $rows = DatabaseHelper::fetchAll(
                    'SELECT model_id, competency_id
                     FROM organization_competency_model_items
                     WHERE organization_id = :organization_id',
                    ['organization_id' => $organizationId]
                );

                foreach ($rows as $row) {
                    $modelId = (int) ($row['model_id'] ?? 0);
                    $competencyId = (int) ($row['competency_id'] ?? 0);

                    if ($modelId <= 0 || $competencyId <= 0) {
                        continue;
                    }

                    if (!isset($modelMemberships[$modelId])) {
                        $modelMemberships[$modelId] = [];
                    }

                    $modelMemberships[$modelId][$competencyId] = true;
                }
            } catch (Exception $exception) {
                ResponseHelper::flashError('در بازیابی داده‌های ماتریس مشکلی رخ داد.');
            }
        }

        $successMessage = flash('success');
        $errorMessage = flash('error');

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $token = $_POST['_token'] ?? '';
            if (!AuthHelper::verifyCsrfToken($token)) {
                ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
                UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/competency-models/matrix'));
            }

            $modelId = isset($_POST['model_id']) ? (int) $_POST['model_id'] : 0;
            $competencyId = isset($_POST['competency_id']) ? (int) $_POST['competency_id'] : 0;

            if ($modelId <= 0 || $competencyId <= 0) {
                ResponseHelper::flashError('شناسه مدل یا شایستگی نامعتبر است.');
                UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/competency-models/matrix'));
            }

            try {
                $existing = DatabaseHelper::fetchOne(
                    'SELECT id FROM organization_competency_model_items WHERE organization_id = :organization_id AND model_id = :model_id AND competency_id = :competency_id LIMIT 1',
                    [
                        'organization_id' => $organizationId,
                        'model_id' => $modelId,
                        'competency_id' => $competencyId,
                    ]
                );

                if ($existing) {
                    DatabaseHelper::delete(
                        'organization_competency_model_items',
                        'id = :id AND organization_id = :organization_id',
                        [
                            'id' => (int) $existing['id'],
                            'organization_id' => $organizationId,
                        ]
                    );
                    ResponseHelper::flashSuccess('شایستگی از مدل حذف شد.');
                } else {
                    $userIdentifier = (string) ($user['id'] ?? '');
                    if ($userIdentifier === '') {
                        ResponseHelper::flashError('کاربر معتبر نیست.');
                        UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/competency-models/matrix'));
                    }

                    DatabaseHelper::insert('organization_competency_model_items', [
                        'organization_id' => $organizationId,
                        'model_id' => $modelId,
                        'competency_id' => $competencyId,
                        'added_by' => $userIdentifier,
                    ]);
                    ResponseHelper::flashSuccess('شایستگی به مدل اضافه شد.');
                }
            } catch (Exception $exception) {
                ResponseHelper::flashError('در به‌روزرسانی ماتریس خطایی رخ داد.');
            }

            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/competency-models/matrix'));
        }

        include __DIR__ . '/../Views/organizations/competency-models/matrix.php';
    }

    public function organizationCompetencyToolMatrix(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyModelsTableExists();
        $this->ensureOrganizationCompetencyModelItemsTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolCompetenciesTableExists();

        $title = 'ماتریس شایستگی ابزار';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $competencyModels = [];
        try {
            $competencyModels = DatabaseHelper::fetchAll(
                'SELECT id, title, code
                 FROM organization_competency_models
                 WHERE organization_id = :organization_id
                 ORDER BY title ASC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی مدل‌های شایستگی مشکلی رخ داد.');
        }

        $competencyModelMap = [];
        foreach ($competencyModels as $model) {
            $modelId = (int) ($model['id'] ?? 0);
            if ($modelId > 0) {
                $competencyModelMap[$modelId] = $model;
            }
        }

        $selectedModelId = 0;
        $modelInput = $_SERVER['REQUEST_METHOD'] === 'POST'
            ? ($_POST['model_id'] ?? '')
            : ($_GET['model_id'] ?? '');

        if ($modelInput !== '') {
            $modelInput = UtilityHelper::persianToEnglish((string) $modelInput);
            $selectedModelId = (int) $modelInput;
        }

        if ($selectedModelId <= 0 && !empty($competencyModels)) {
            $selectedModelId = (int) ($competencyModels[0]['id'] ?? 0);
        }

        if ($selectedModelId > 0 && !isset($competencyModelMap[$selectedModelId])) {
            $selectedModelId = !empty($competencyModels) ? (int) ($competencyModels[0]['id'] ?? 0) : 0;
        }

        $evaluationTools = [];
        try {
            $evaluationTools = DatabaseHelper::fetchAll(
                'SELECT id, name, code, is_exam
                 FROM organization_evaluation_tools
                 WHERE organization_id = :organization_id
                   AND (is_exam IS NULL OR is_exam = 0)
                 ORDER BY name ASC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی ابزارهای ارزیابی مشکلی رخ داد.');
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $token = $_POST['_token'] ?? '';
            if (!AuthHelper::verifyCsrfToken($token)) {
                ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
                $query = $selectedModelId > 0 ? '?' . http_build_query(['model_id' => $selectedModelId]) : '';
                UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/competency-tools/matrix' . $query));
            }

            $toolId = (int) UtilityHelper::persianToEnglish((string) ($_POST['tool_id'] ?? '0'));
            $competencyId = (int) UtilityHelper::persianToEnglish((string) ($_POST['competency_id'] ?? '0'));
            $modelIdFromPost = (int) UtilityHelper::persianToEnglish((string) ($_POST['model_id'] ?? '0'));

            if ($modelIdFromPost > 0) {
                $selectedModelId = $modelIdFromPost;
            }

            $redirectQuery = $selectedModelId > 0 ? '?' . http_build_query(['model_id' => $selectedModelId]) : '';
            $redirectUrl = UtilityHelper::baseUrl('organizations/competency-tools/matrix' . $redirectQuery);

            if ($toolId <= 0 || $competencyId <= 0 || $selectedModelId <= 0) {
                ResponseHelper::flashError('اطلاعات ارسال شده ناقص است.');
                UtilityHelper::redirect($redirectUrl);
            }

            try {
                $toolExists = DatabaseHelper::fetchOne(
                    'SELECT id FROM organization_evaluation_tools WHERE id = :id AND organization_id = :organization_id AND (is_exam IS NULL OR is_exam = 0) LIMIT 1',
                    [
                        'id' => $toolId,
                        'organization_id' => $organizationId,
                    ]
                );
            } catch (Exception $exception) {
                $toolExists = null;
            }

            if (!$toolExists) {
                ResponseHelper::flashError('ابزار انتخاب‌شده معتبر نیست.');
                UtilityHelper::redirect($redirectUrl);
            }

            try {
                $competencyExists = DatabaseHelper::fetchOne(
                    'SELECT id FROM organization_competency_model_items WHERE organization_id = :organization_id AND model_id = :model_id AND competency_id = :competency_id LIMIT 1',
                    [
                        'organization_id' => $organizationId,
                        'model_id' => $selectedModelId,
                        'competency_id' => $competencyId,
                    ]
                );
            } catch (Exception $exception) {
                $competencyExists = null;
            }

            if (!$competencyExists) {
                ResponseHelper::flashError('شایستگی انتخاب‌شده در مدل وجود ندارد.');
                UtilityHelper::redirect($redirectUrl);
            }

            try {
                $existing = DatabaseHelper::fetchOne(
                    'SELECT id FROM organization_evaluation_tool_competencies WHERE organization_id = :organization_id AND model_id = :model_id AND evaluation_tool_id = :tool_id AND competency_id = :competency_id LIMIT 1',
                    [
                        'organization_id' => $organizationId,
                        'model_id' => $selectedModelId,
                        'tool_id' => $toolId,
                        'competency_id' => $competencyId,
                    ]
                );

                if ($existing) {
                    DatabaseHelper::delete(
                        'organization_evaluation_tool_competencies',
                        'id = :id AND organization_id = :organization_id',
                        [
                            'id' => (int) ($existing['id'] ?? 0),
                            'organization_id' => $organizationId,
                        ]
                    );
                    ResponseHelper::flashSuccess('شایستگی از ابزار حذف شد.');
                } else {
                    $userIdentifier = (string) ($user['id'] ?? '');
                    if ($userIdentifier === '') {
                        ResponseHelper::flashError('کاربر معتبر نیست.');
                        UtilityHelper::redirect($redirectUrl);
                    }

                    DatabaseHelper::insert('organization_evaluation_tool_competencies', [
                        'organization_id' => $organizationId,
                        'model_id' => $selectedModelId,
                        'evaluation_tool_id' => $toolId,
                        'competency_id' => $competencyId,
                        'created_by' => $userIdentifier,
                    ]);
                    ResponseHelper::flashSuccess('شایستگی به ابزار اضافه شد.');
                }
            } catch (Exception $exception) {
                ResponseHelper::flashError('در به‌روزرسانی ماتریس ابزار خطایی رخ داد.');
            }

            UtilityHelper::redirect($redirectUrl);
        }

        $selectedModel = $selectedModelId > 0 ? ($competencyModelMap[$selectedModelId] ?? null) : null;

        $competencies = [];
        if ($selectedModelId > 0) {
            try {
                $competencies = DatabaseHelper::fetchAll(
                    'SELECT oc.id, oc.code, oc.title, ocd.name AS dimension_name
                     FROM organization_competency_model_items ocm
                     INNER JOIN organization_competencies oc
                        ON oc.id = ocm.competency_id AND oc.organization_id = ocm.organization_id
                     LEFT JOIN organization_competency_dimensions ocd
                        ON ocd.id = oc.competency_dimension_id AND ocd.organization_id = oc.organization_id
                     WHERE ocm.organization_id = :organization_id
                       AND ocm.model_id = :model_id
                     ORDER BY COALESCE(ocd.name, ""), oc.title ASC',
                    [
                        'organization_id' => $organizationId,
                        'model_id' => $selectedModelId,
                    ]
                );
            } catch (Exception $exception) {
                ResponseHelper::flashError('در بازیابی شایستگی‌های مدل مشکلی رخ داد.');
            }
        }

        $toolMemberships = [];
        if (!empty($competencies) && !empty($evaluationTools) && $selectedModelId > 0) {
            $competencyIds = [];
            foreach ($competencies as $competency) {
                $compId = (int) ($competency['id'] ?? 0);
                if ($compId > 0) {
                    $competencyIds[] = $compId;
                }
            }

            if (!empty($competencyIds)) {
                $placeholders = [];
                $params = [
                    'organization_id' => $organizationId,
                    'model_id' => $selectedModelId,
                ];
                foreach ($competencyIds as $index => $compId) {
                    $key = 'comp_' . $index;
                    $placeholders[] = ':' . $key;
                    $params[$key] = $compId;
                }

                $sql = sprintf(
                    'SELECT evaluation_tool_id, competency_id
                     FROM organization_evaluation_tool_competencies
                     WHERE organization_id = :organization_id
                       AND model_id = :model_id
                       AND competency_id IN (%s)',
                    implode(', ', $placeholders)
                );

                try {
                    $rows = DatabaseHelper::fetchAll($sql, $params);
                    foreach ($rows as $row) {
                        $toolId = (int) ($row['evaluation_tool_id'] ?? 0);
                        $competencyId = (int) ($row['competency_id'] ?? 0);

                        if ($toolId <= 0 || $competencyId <= 0) {
                            continue;
                        }

                        if (!isset($toolMemberships[$toolId])) {
                            $toolMemberships[$toolId] = [];
                        }

                        $toolMemberships[$toolId][$competencyId] = true;
                    }
                } catch (Exception $exception) {
                    ResponseHelper::flashError('در بازیابی داده‌های ماتریس ابزار مشکلی رخ داد.');
                }
            }
        }

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/competency-tools/matrix.php';
    }

    public function createOrganizationCompetencyModel(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureReportSettingsTableExists();
        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyModelsTableExists();
        $this->ensureOrganizationCompetencyModelItemsTableExists();

        $title = 'ایجاد مدل شایستگی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);
        $oldInput = $_SESSION['old_input'] ?? [];

        $reportSettings = [];
        try {
            $reportSettings = DatabaseHelper::fetchAll(
                'SELECT id, name AS title FROM organization_report_settings WHERE organization_id = :organization_id ORDER BY created_at DESC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $reportSettings = [];
        }

        $reportSettingsById = [];
        foreach ($reportSettings as $setting) {
            $id = (int) ($setting['id'] ?? 0);
            if ($id <= 0) {
                continue;
            }

            $reportSettingsById[$id] = trim((string) ($setting['title'] ?? ''));
        }

        $competencies = $this->fetchOrganizationCompetenciesForModels($organizationId);

        $scoringTypeOptions = $this->getCompetencyModelScoringTypes();
        $reportLevelOptions = $this->getCompetencyModelReportLevels();
        $preselectedCompetencyIds = $this->normalizeCompetencyIdArray($oldInput['selected_competencies'] ?? []);

        if (!empty($reportSettingsById) && isset($oldInput['report_setting_id'])) {
            $normalizedReportSettingId = (int) UtilityHelper::persianToEnglish((string) $oldInput['report_setting_id']);
            if ($normalizedReportSettingId > 0) {
                $oldInput['report_setting_id'] = (string) $normalizedReportSettingId;
            }
        }

        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/competency-models/create.php';
    }

    public function storeOrganizationCompetencyModel(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureReportSettingsTableExists();
        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyModelsTableExists();
        $this->ensureOrganizationCompetencyModelItemsTableExists();

        $redirectCreate = UtilityHelper::baseUrl('organizations/competency-models/create');
        $redirectIndex = UtilityHelper::baseUrl('organizations/competency-models');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $scoringTypeMap = $this->getCompetencyModelScoringTypes();
        $reportLevelMap = $this->getCompetencyModelReportLevels();

        $rawReportSettingId = isset($_POST['report_setting_id']) ? trim((string) $_POST['report_setting_id']) : '';
        $reportSettingId = $rawReportSettingId !== ''
            ? (int) UtilityHelper::persianToEnglish($rawReportSettingId)
            : null;

        $input = [
            'code' => trim((string) ($_POST['code'] ?? '')),
            'title' => trim((string) ($_POST['title'] ?? '')),
            'scoring_type' => trim((string) ($_POST['scoring_type'] ?? '')),
            'report_level' => trim((string) ($_POST['report_level'] ?? '')),
            'report_setting_id' => $reportSettingId,
        ];

        $selectedCompetenciesRaw = $_POST['selected_competencies'] ?? [];

        $_SESSION['old_input'] = [
            'code' => $input['code'],
            'title' => $input['title'],
            'scoring_type' => $input['scoring_type'],
            'report_level' => $input['report_level'],
            'report_setting_id' => $rawReportSettingId,
            'selected_competencies' => is_array($selectedCompetenciesRaw) ? $selectedCompetenciesRaw : [],
        ];

        $validationErrors = [];

        if ($input['code'] === '') {
            $validationErrors['code'] = 'کد مدل شایستگی الزامی است.';
        } elseif (mb_strlen($input['code']) > 191) {
            $validationErrors['code'] = 'طول کد نباید بیش از ۱۹۱ کاراکتر باشد.';
        }

        if ($input['title'] === '') {
            $validationErrors['title'] = 'عنوان مدل شایستگی الزامی است.';
        } elseif (mb_strlen($input['title']) > 255) {
            $validationErrors['title'] = 'طول عنوان نباید بیش از ۲۵۵ کاراکتر باشد.';
        }

        if ($input['scoring_type'] === '' || !array_key_exists($input['scoring_type'], $scoringTypeMap)) {
            $validationErrors['scoring_type'] = 'نوع امتیازدهی انتخاب شده معتبر نیست.';
        }

        if ($input['report_level'] === '' || !array_key_exists($input['report_level'], $reportLevelMap)) {
            $validationErrors['report_level'] = 'گزارش انتخاب شده معتبر نیست.';
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان ثبت مدل شایستگی در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectCreate);
        }

        $validReportSettingId = null;
        if ($reportSettingId !== null) {
            try {
                $reportSetting = DatabaseHelper::fetchOne(
                    'SELECT id FROM organization_report_settings WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                    [
                        'id' => $reportSettingId,
                        'organization_id' => $organizationId,
                    ]
                );

                if ($reportSetting) {
                    $validReportSettingId = (int) ($reportSetting['id'] ?? 0);
                } else {
                    $validationErrors['report_setting_id'] = 'تنظیمات گزارش انتخاب شده یافت نشد.';
                }
            } catch (Exception $exception) {
                $validationErrors['report_setting_id'] = 'در بررسی تنظیمات گزارش خطایی رخ داد.';
            }
        }

        $normalizedCompetencyIds = $this->normalizeCompetencyIdArray($selectedCompetenciesRaw);
        $validCompetencyIds = $this->filterValidCompetencyIds($normalizedCompetencyIds, $organizationId);

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $duplicateCode = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_competency_models WHERE organization_id = :organization_id AND code = :code LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'code' => $input['code'],
                ]
            );

            if ($duplicateCode) {
                $validationErrors['code'] = 'این کد قبلاً برای مدل دیگری ثبت شده است.';
            }
        } catch (Exception $exception) {
            // در صورت بروز خطا، اجازه ادامه فرایند داده می‌شود تا خطای اصلی گزارش شود.
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $pendingImage = null;
        if (!empty($_FILES['model_image']['name'] ?? '')) {
            $pendingImage = $_FILES['model_image'];
            if (!FileHelper::isValidImage($pendingImage)) {
                $_SESSION['validation_errors'] = ['model_image' => 'فایل تصویری انتخاب شده معتبر نیست.'];
                ResponseHelper::flashError('فایل تصویری انتخاب شده معتبر نیست.');
                UtilityHelper::redirect($redirectCreate);
            }
        }

        $imagePath = null;
        if ($pendingImage !== null) {
            $uploadResult = FileHelper::uploadFile(
                $pendingImage,
                'uploads/organizations/competency-models/',
                ['jpg', 'jpeg', 'png', 'gif', 'webp']
            );

            if (empty($uploadResult['success'])) {
                $_SESSION['validation_errors'] = ['model_image' => $uploadResult['error'] ?? 'در آپلود تصویر خطایی رخ داد.'];
                ResponseHelper::flashError('امکان آپلود تصویر وجود ندارد.');
                UtilityHelper::redirect($redirectCreate);
            }

            $imagePath = $uploadResult['path'] ?? null;
        }

        try {
            DatabaseHelper::beginTransaction();

            $modelId = (int) DatabaseHelper::insert('organization_competency_models', [
                'organization_id' => $organizationId,
                'code' => $input['code'],
                'title' => $input['title'],
                'scoring_type' => $input['scoring_type'],
                'report_level' => $input['report_level'],
                'report_setting_id' => $validReportSettingId,
                'image_path' => $imagePath,
                'created_by' => $userIdentifier,
                'updated_by' => $userIdentifier,
            ]);

            foreach ($validCompetencyIds as $competencyId) {
                DatabaseHelper::insert('organization_competency_model_items', [
                    'organization_id' => $organizationId,
                    'model_id' => $modelId,
                    'competency_id' => $competencyId,
                    'added_by' => $userIdentifier,
                ]);
            }

            DatabaseHelper::commit();

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('مدل شایستگی با موفقیت ایجاد شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            DatabaseHelper::rollback();

            if ($imagePath !== null) {
                FileHelper::deleteFile($imagePath);
            }

            ResponseHelper::flashError('در ذخیره مدل شایستگی خطایی رخ داد.');
            UtilityHelper::redirect($redirectCreate);
        }
    }

    public function editOrganizationCompetencyModel(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureReportSettingsTableExists();
        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyModelsTableExists();
        $this->ensureOrganizationCompetencyModelItemsTableExists();

        $title = 'ویرایش مدل شایستگی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $modelId = isset($_GET['id']) ? (int) $_GET['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/competency-models');

        if ($modelId <= 0) {
            ResponseHelper::flashError('شناسه مدل شایستگی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $competencyModel = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_competency_models WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $modelId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $competencyModel = null;
        }

        if (!$competencyModel) {
            ResponseHelper::flashError('مدل شایستگی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);
        $oldInput = $_SESSION['old_input'] ?? [];

        $reportSettings = [];
        try {
            $reportSettings = DatabaseHelper::fetchAll(
                'SELECT id, name AS title FROM organization_report_settings WHERE organization_id = :organization_id ORDER BY created_at DESC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $reportSettings = [];
        }

        $reportSettingsById = [];
        foreach ($reportSettings as $setting) {
            $id = (int) ($setting['id'] ?? 0);
            if ($id <= 0) {
                continue;
            }

            $reportSettingsById[$id] = trim((string) ($setting['title'] ?? ''));
        }

        $competencies = $this->fetchOrganizationCompetenciesForModels($organizationId);
        $existingCompetencyIds = $this->getSelectedCompetencyIdsForModel($organizationId, $modelId);

        $scoringTypeOptions = $this->getCompetencyModelScoringTypes();
        $reportLevelOptions = $this->getCompetencyModelReportLevels();

        $preselectedCompetencyIds = !empty($oldInput['selected_competencies'])
            ? $this->normalizeCompetencyIdArray($oldInput['selected_competencies'])
            : $existingCompetencyIds;

        if (!empty($reportSettingsById)) {
            if (isset($oldInput['report_setting_id'])) {
                $normalizedReportSettingId = (int) UtilityHelper::persianToEnglish((string) $oldInput['report_setting_id']);
                if ($normalizedReportSettingId > 0) {
                    $oldInput['report_setting_id'] = (string) $normalizedReportSettingId;
                }
            } else {
                $currentReportSettingId = (int) ($competencyModel['report_setting_id'] ?? 0);
                if ($currentReportSettingId > 0) {
                    $oldInput['report_setting_id'] = (string) $currentReportSettingId;
                }
            }
        }

        $errorMessage = flash('error');
        $successMessage = flash('success');

        include __DIR__ . '/../Views/organizations/competency-models/edit.php';
    }

    public function updateOrganizationCompetencyModel(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureReportSettingsTableExists();
        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyModelsTableExists();
        $this->ensureOrganizationCompetencyModelItemsTableExists();

        $modelId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/competency-models');
        $redirectEdit = UtilityHelper::baseUrl('organizations/competency-models/edit?id=' . $modelId);

        if ($modelId <= 0) {
            ResponseHelper::flashError('شناسه مدل شایستگی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان به‌روزرسانی مدل شایستگی در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $competencyModel = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_competency_models WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $modelId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $competencyModel = null;
        }

        if (!$competencyModel) {
            ResponseHelper::flashError('مدل شایستگی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $scoringTypeMap = $this->getCompetencyModelScoringTypes();
        $reportLevelMap = $this->getCompetencyModelReportLevels();

        $rawReportSettingId = isset($_POST['report_setting_id']) ? trim((string) $_POST['report_setting_id']) : '';
        $reportSettingId = $rawReportSettingId !== ''
            ? (int) UtilityHelper::persianToEnglish($rawReportSettingId)
            : null;

        $input = [
            'code' => trim((string) ($_POST['code'] ?? '')),
            'title' => trim((string) ($_POST['title'] ?? '')),
            'scoring_type' => trim((string) ($_POST['scoring_type'] ?? '')),
            'report_level' => trim((string) ($_POST['report_level'] ?? '')),
            'report_setting_id' => $reportSettingId,
        ];

        $selectedCompetenciesRaw = $_POST['selected_competencies'] ?? [];

        $_SESSION['old_input'] = [
            'code' => $input['code'],
            'title' => $input['title'],
            'scoring_type' => $input['scoring_type'],
            'report_level' => $input['report_level'],
            'report_setting_id' => $rawReportSettingId,
            'selected_competencies' => is_array($selectedCompetenciesRaw) ? $selectedCompetenciesRaw : [],
        ];

        $validationErrors = [];

        if ($input['code'] === '') {
            $validationErrors['code'] = 'کد مدل شایستگی الزامی است.';
        } elseif (mb_strlen($input['code']) > 191) {
            $validationErrors['code'] = 'طول کد نباید بیش از ۱۹۱ کاراکتر باشد.';
        }

        if ($input['title'] === '') {
            $validationErrors['title'] = 'عنوان مدل شایستگی الزامی است.';
        } elseif (mb_strlen($input['title']) > 255) {
            $validationErrors['title'] = 'طول عنوان نباید بیش از ۲۵۵ کاراکتر باشد.';
        }

        if ($input['scoring_type'] === '' || !array_key_exists($input['scoring_type'], $scoringTypeMap)) {
            $validationErrors['scoring_type'] = 'نوع امتیازدهی انتخاب شده معتبر نیست.';
        }

        if ($input['report_level'] === '' || !array_key_exists($input['report_level'], $reportLevelMap)) {
            $validationErrors['report_level'] = 'گزارش انتخاب شده معتبر نیست.';
        }

        $validReportSettingId = null;
        if ($reportSettingId !== null) {
            try {
                $reportSetting = DatabaseHelper::fetchOne(
                    'SELECT id FROM organization_report_settings WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                    [
                        'id' => $reportSettingId,
                        'organization_id' => $organizationId,
                    ]
                );

                if ($reportSetting) {
                    $validReportSettingId = (int) ($reportSetting['id'] ?? 0);
                } else {
                    $validationErrors['report_setting_id'] = 'تنظیمات گزارش انتخاب شده یافت نشد.';
                }
            } catch (Exception $exception) {
                $validationErrors['report_setting_id'] = 'در بررسی تنظیمات گزارش خطایی رخ داد.';
            }
        }

        $normalizedCompetencyIds = $this->normalizeCompetencyIdArray($selectedCompetenciesRaw);
        $validCompetencyIds = $this->filterValidCompetencyIds($normalizedCompetencyIds, $organizationId);

        try {
            $duplicateCode = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_competency_models WHERE organization_id = :organization_id AND code = :code AND id <> :id LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'code' => $input['code'],
                    'id' => $modelId,
                ]
            );

            if ($duplicateCode) {
                $validationErrors['code'] = 'این کد قبلاً برای مدل دیگری ثبت شده است.';
            }
        } catch (Exception $exception) {
            // continue; خطا در این مرحله در ادامه مدیریت خواهد شد
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $pendingImage = null;
        if (!empty($_FILES['model_image']['name'] ?? '')) {
            $pendingImage = $_FILES['model_image'];
            if (!FileHelper::isValidImage($pendingImage)) {
                $_SESSION['validation_errors'] = ['model_image' => 'فایل تصویری انتخاب شده معتبر نیست.'];
                ResponseHelper::flashError('فایل تصویری انتخاب شده معتبر نیست.');
                UtilityHelper::redirect($redirectEdit);
            }
        }

        $imagePath = null;
        if ($pendingImage !== null) {
            $uploadResult = FileHelper::uploadFile(
                $pendingImage,
                'uploads/organizations/competency-models/',
                ['jpg', 'jpeg', 'png', 'gif', 'webp']
            );

            if (empty($uploadResult['success'])) {
                $_SESSION['validation_errors'] = ['model_image' => $uploadResult['error'] ?? 'در آپلود تصویر خطایی رخ داد.'];
                ResponseHelper::flashError('امکان آپلود تصویر وجود ندارد.');
                UtilityHelper::redirect($redirectEdit);
            }

            $imagePath = $uploadResult['path'] ?? null;
        }

        try {
            DatabaseHelper::beginTransaction();

            $updateData = [
                'code' => $input['code'],
                'title' => $input['title'],
                'scoring_type' => $input['scoring_type'],
                'report_level' => $input['report_level'],
                'report_setting_id' => $validReportSettingId,
                'updated_by' => $userIdentifier,
            ];

            if ($imagePath !== null) {
                $updateData['image_path'] = $imagePath;
            }

            DatabaseHelper::update(
                'organization_competency_models',
                $updateData,
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $modelId,
                    'organization_id' => $organizationId,
                ]
            );

            DatabaseHelper::delete(
                'organization_competency_model_items',
                'organization_id = :organization_id AND model_id = :model_id',
                [
                    'organization_id' => $organizationId,
                    'model_id' => $modelId,
                ]
            );

            foreach ($validCompetencyIds as $competencyId) {
                DatabaseHelper::insert('organization_competency_model_items', [
                    'organization_id' => $organizationId,
                    'model_id' => $modelId,
                    'competency_id' => $competencyId,
                    'added_by' => $userIdentifier,
                ]);
            }

            DatabaseHelper::commit();

            if ($imagePath !== null && !empty($competencyModel['image_path'])) {
                FileHelper::deleteFile($competencyModel['image_path']);
            }

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('مدل شایستگی با موفقیت به‌روزرسانی شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            DatabaseHelper::rollback();

            if ($imagePath !== null) {
                FileHelper::deleteFile($imagePath);
            }

            ResponseHelper::flashError('در به‌روزرسانی مدل شایستگی خطایی رخ داد.');
            UtilityHelper::redirect($redirectEdit);
        }
    }

    public function deleteOrganizationCompetencyModel(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationCompetencyModelsTableExists();
        $this->ensureOrganizationCompetencyModelItemsTableExists();

        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $redirectIndex = UtilityHelper::baseUrl('organizations/competency-models');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $modelId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        if ($modelId <= 0) {
            ResponseHelper::flashError('شناسه مدل شایستگی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $competencyModel = DatabaseHelper::fetchOne(
                'SELECT id, image_path FROM organization_competency_models WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $modelId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $competencyModel = null;
        }

        if (!$competencyModel) {
            ResponseHelper::flashError('مدل شایستگی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            DatabaseHelper::beginTransaction();

            DatabaseHelper::delete(
                'organization_competency_model_items',
                'organization_id = :organization_id AND model_id = :model_id',
                [
                    'organization_id' => $organizationId,
                    'model_id' => $modelId,
                ]
            );

            $deleted = DatabaseHelper::delete(
                'organization_competency_models',
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $modelId,
                    'organization_id' => $organizationId,
                ]
            );

            DatabaseHelper::commit();

            if ($deleted > 0 && !empty($competencyModel['image_path'])) {
                FileHelper::deleteFile($competencyModel['image_path']);
            }

            if ($deleted > 0) {
                ResponseHelper::flashSuccess('مدل شایستگی با موفقیت حذف شد.');
            } else {
                ResponseHelper::flashError('حذف مدل شایستگی با مشکل مواجه شد.');
            }
        } catch (Exception $exception) {
            DatabaseHelper::rollback();
            ResponseHelper::flashError('در هنگام حذف مدل شایستگی خطایی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function organizationEvaluationToolQuestions(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

    $this->ensureOrganizationEvaluationToolsTableExists();
    $this->ensureOrganizationEvaluationToolQuestionsTableExists();
    $this->ensureOrganizationEvaluationToolAnswersTableExists();
    $this->ensureExamsTableExists();
    $this->ensureExamQuestionsTableExists();

        $toolId = isset($_GET['tool_id']) ? (int) $_GET['tool_id'] : 0;
        $redirectTools = UtilityHelper::baseUrl('organizations/evaluation-tools');

        if ($toolId <= 0) {
            ResponseHelper::flashError('شناسه ابزار آزمون نامعتبر است.');
            UtilityHelper::redirect($redirectTools);
        }

        $title = 'سوالات ابزار ارزیابی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        try {
            $evaluationTool = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_evaluation_tools WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $toolId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $evaluationTool = null;
        }

        if (!$evaluationTool) {
            ResponseHelper::flashError('ابزار ارزیابی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectTools);
        }

        $questions = [];
        try {
            $questions = DatabaseHelper::fetchAll(
                'SELECT q.*, (
                    SELECT COUNT(*)
                    FROM organization_evaluation_tool_answers a
                    WHERE a.organization_id = q.organization_id AND a.question_id = q.id
                ) AS answers_count
                FROM organization_evaluation_tool_questions q
                WHERE q.organization_id = :organization_id AND q.evaluation_tool_id = :tool_id
                ORDER BY q.display_order ASC, q.id ASC',
                [
                    'organization_id' => $organizationId,
                    'tool_id' => $toolId,
                ]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی سوالات مشکلی رخ داد.');
        }

        $successMessage = flash('success');
        $errorMessage = flash('error');
        $warningMessage = flash('warning');

        $examImportContext = $this->buildExamImportContext($organizationId, $evaluationTool);

        include __DIR__ . '/../Views/organizations/evaluations/tools/questions/index.php';
    }


    public function seedOrganizationMbtiTypesWithFeatures(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationMbtiTypesTableExists();
        $this->ensureOrganizationMbtiTypeFeaturesTableExists();

        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/mbti-settings');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        if ($organizationId <= 0) {
            ResponseHelper::flashError('شناسه سازمان نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $presetData = $this->getMbtiPresetSeedData();
        if (empty($presetData)) {
            ResponseHelper::flashError('داده‌های پیش‌فرض برای تیپ‌های MBTI در دسترس نیست.');
            UtilityHelper::redirect($redirectIndex);
        }

        $typeCreated = 0;
        $typeUpdated = 0;
        $featureCreated = 0;
        $featureUpdated = 0;

        try {
            DatabaseHelper::beginTransaction();

            foreach ($presetData as $preset) {
                $typeCode = strtoupper(trim((string) ($preset['type_code'] ?? '')));
                if ($typeCode === '') {
                    continue;
                }

                $title = trim((string) ($preset['title'] ?? ''));
                $summary = trim((string) ($preset['summary'] ?? ''));
                $functions = trim((string) ($preset['functions'] ?? ''));
                $description = trim((string) ($preset['description'] ?? ''));
                $categories = [];

                if (!empty($preset['categories']) && is_array($preset['categories'])) {
                    foreach ($preset['categories'] as $category) {
                        $categoryLabel = trim((string) $category);
                        if ($categoryLabel === '') {
                            continue;
                        }
                        $categories[] = $categoryLabel;
                    }
                }

                $categoryJson = !empty($categories)
                    ? json_encode($categories, JSON_UNESCAPED_UNICODE)
                    : null;

                try {
                    $existingType = DatabaseHelper::fetchOne(
                        'SELECT id FROM organization_mbti_types WHERE organization_id = :organization_id AND type_code = :type_code LIMIT 1',
                        [
                            'organization_id' => $organizationId,
                            'type_code' => $typeCode,
                        ]
                    );
                } catch (Exception $exception) {
                    $existingType = null;
                }

                if ($existingType) {
                    $typeId = (int) ($existingType['id'] ?? 0);
                    if ($typeId > 0) {
                        DatabaseHelper::update(
                            'organization_mbti_types',
                            [
                                'title' => $title !== '' ? $title : $typeCode,
                                'summary' => $summary !== '' ? $summary : null,
                                'cognitive_functions' => $functions !== '' ? $functions : null,
                                'categories' => $categoryJson,
                                'description' => $description !== '' ? $description : null,
                                'updated_by' => $userIdentifier,
                            ],
                            'id = :id AND organization_id = :organization_id',
                            [
                                'id' => $typeId,
                                'organization_id' => $organizationId,
                            ]
                        );
                        $typeUpdated++;
                    } else {
                        $typeId = 0;
                    }
                } else {
                    $typeId = (int) DatabaseHelper::insert(
                        'organization_mbti_types',
                        [
                            'organization_id' => $organizationId,
                            'type_code' => $typeCode,
                            'title' => $title !== '' ? $title : $typeCode,
                            'summary' => $summary !== '' ? $summary : null,
                            'cognitive_functions' => $functions !== '' ? $functions : null,
                            'categories' => $categoryJson,
                            'description' => $description !== '' ? $description : null,
                            'created_by' => $userIdentifier,
                            'updated_by' => $userIdentifier,
                        ]
                    );
                    if ($typeId > 0) {
                        $typeCreated++;
                    }
                }

                if ($typeId <= 0) {
                    continue;
                }

                $rangeStart = (clone $now)->setTime(0, 0, 0)->modify('-29 days');
                $rangeStartValue = $rangeStart->format('Y-m-d 00:00:00');
                $dailyCounts = [];

                try {
                    $rows2 = DatabaseHelper::fetchAll(
                        'SELECT DATE(COALESCE(participated_at, completed_at, created_at)) AS d,
                                COUNT(*) AS total
                         FROM organization_evaluation_exam_participations
                         WHERE organization_id = :organization_id
                           AND COALESCE(participated_at, completed_at, created_at) >= :daily_start
                         GROUP BY d
                         ORDER BY d ASC',
                        [
                            'organization_id' => $organizationId,
                            'daily_start' => $rangeStartValue,
                        ]
                    );
                } catch (Exception $exception) {
                    $rows2 = [];
                }

                foreach ($rows2 as $row) {
                    $d = (string) ($row['d'] ?? '');
                    if ($d === '') { continue; }
                    $dailyCounts[$d] = (int) ($row['total'] ?? 0);
                }

                foreach ($features as $index => $featureDefinition) {
                    if (!is_array($featureDefinition)) {
                        continue;
                    }

                    $categoryKey = trim((string) ($featureDefinition['category'] ?? ''));
                    $featureText = trim((string) ($featureDefinition['text'] ?? ''));
                    $sortOrder = isset($featureDefinition['sort_order'])
                        ? (int) $featureDefinition['sort_order']
                        : (($index + 1) * 10);

                    if ($categoryKey === '' || $featureText === '') {
                        continue;
                    }

                    if (!array_key_exists($categoryKey, $existingFeatureCounts)) {
                        $existingFeatureCounts[$categoryKey] = 0;
                    }

                    try {
                        $existingFeature = DatabaseHelper::fetchOne(
                            'SELECT id FROM organization_mbti_type_features WHERE organization_id = :organization_id AND mbti_type_id = :mbti_type_id AND category = :category AND feature_text = :feature_text LIMIT 1',
                            [
                                'organization_id' => $organizationId,
                                'mbti_type_id' => $typeId,
                                'category' => $categoryKey,
                                'feature_text' => $featureText,
                            ]
                        );
                    } catch (Exception $exception) {
                        $existingFeature = null;
                    }

                    if ($existingFeature) {
                        $featureId = (int) ($existingFeature['id'] ?? 0);
                        if ($featureId > 0) {
                            DatabaseHelper::update(
                                'organization_mbti_type_features',
                                [
                                    'sort_order' => $sortOrder,
                                    'updated_by' => $userIdentifier,
                                ],
                                'id = :id AND organization_id = :organization_id',
                                [
                                    'id' => $featureId,
                                    'organization_id' => $organizationId,
                                ]
                            );
                            $featureUpdated++;
                        }
                        continue;
                    }

                    if ($existingFeatureCounts[$categoryKey] >= 5) {
                        continue;
                    }

                    DatabaseHelper::insert(
                        'organization_mbti_type_features',
                        [
                            'organization_id' => $organizationId,
                            'mbti_type_id' => $typeId,
                            'category' => $categoryKey,
                            'feature_text' => $featureText,
                            'sort_order' => $sortOrder,
                            'created_by' => $userIdentifier,
                            'updated_by' => $userIdentifier,
                        ]
                    );
                    $featureCreated++;
                    $existingFeatureCounts[$categoryKey]++;
                }
            }

            DatabaseHelper::commit();

            if ($typeCreated === 0 && $typeUpdated === 0 && $featureCreated === 0 && $featureUpdated === 0) {
                ResponseHelper::flashWarning('تمام تیپ‌ها و ویژگی‌های آماده از قبل در سیستم ثبت شده‌اند.');
            } else {
                $summaryParts = [];

                if ($typeCreated > 0) {
                    $summaryParts[] = UtilityHelper::englishToPersian((string) $typeCreated) . ' تیپ جدید';
                }
                if ($typeUpdated > 0) {
                    $summaryParts[] = UtilityHelper::englishToPersian((string) $typeUpdated) . ' تیپ به‌روزرسانی شد';
                }
                if ($featureCreated > 0) {
                    $summaryParts[] = UtilityHelper::englishToPersian((string) $featureCreated) . ' ویژگی تازه';
                }
                if ($featureUpdated > 0) {
                    $summaryParts[] = UtilityHelper::englishToPersian((string) $featureUpdated) . ' ویژگی به‌روزرسانی شد';
                }

                $message = 'تیپ‌های شخصیت آماده با موفقیت ثبت شدند';
                if (!empty($summaryParts)) {
                    $message .= ' (' . implode('، ', $summaryParts) . ')';
                }

                ResponseHelper::flashSuccess($message . '.');
            }
        } catch (Exception $exception) {
            try {
                DatabaseHelper::rollback();
            } catch (Exception $rollbackException) {
                // ignore rollback failure
            }

            ResponseHelper::flashError('در هنگام افزودن داده‌های پیش‌فرض تیپ‌های شخصیتی مشکلی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }
    public function createOrganizationEvaluationToolQuestion(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolQuestionsTableExists();
        $this->ensureOrganizationEvaluationToolAnswersTableExists();

        $toolId = isset($_GET['tool_id']) ? (int) $_GET['tool_id'] : 0;
        $redirectTools = UtilityHelper::baseUrl('organizations/evaluation-tools');

        if ($toolId <= 0) {
            ResponseHelper::flashError('شناسه ابزار آزمون نامعتبر است.');
            UtilityHelper::redirect($redirectTools);
        }

        $title = 'افزودن سوال جدید';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        try {
            $evaluationTool = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_evaluation_tools WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $toolId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $evaluationTool = null;
        }

        if (!$evaluationTool) {
            ResponseHelper::flashError('ابزار ارزیابی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectTools);
        }

    $validationErrors = $_SESSION['validation_errors'] ?? [];
    $oldInput = $_SESSION['old_input'] ?? [];
    unset($_SESSION['validation_errors']);

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/evaluations/tools/questions/create.php';
    }

    public function storeOrganizationEvaluationToolQuestion(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolQuestionsTableExists();
        $this->ensureOrganizationEvaluationToolAnswersTableExists();

        $toolId = isset($_POST['tool_id']) ? (int) $_POST['tool_id'] : 0;
        $redirectTools = UtilityHelper::baseUrl('organizations/evaluation-tools');
        $redirectQuestions = UtilityHelper::baseUrl('organizations/evaluation-tools/questions?tool_id=' . $toolId);
        $redirectCreate = UtilityHelper::baseUrl('organizations/evaluation-tools/questions/create?tool_id=' . $toolId);

        if ($toolId <= 0) {
            ResponseHelper::flashError('شناسه ابزار آزمون نامعتبر است.');
            UtilityHelper::redirect($redirectTools);
        }

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        if ($organizationId <= 0) {
            ResponseHelper::flashError('دسترسی به سازمان معتبر نیست.');
            UtilityHelper::redirect($redirectTools);
        }

        try {
            $evaluationTool = DatabaseHelper::fetchOne(
                'SELECT id, name, is_exam FROM organization_evaluation_tools WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $toolId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $evaluationTool = null;
        }

        if (!$evaluationTool) {
            ResponseHelper::flashError('ابزار ارزیابی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectTools);
        }

        $displayOrderRaw = UtilityHelper::persianToEnglish(trim((string) ($_POST['display_order'] ?? '')));

        $input = [
            'tool_id' => $toolId,
            'code' => trim((string) ($_POST['code'] ?? '')),
            'question' => trim((string) ($_POST['question'] ?? '')),
            'description' => trim((string) ($_POST['description'] ?? '')),
            'display_order' => $displayOrderRaw,
            'is_description_only' => isset($_POST['is_description_only']) ? '1' : '0',
        ];

        $answersRaw = $_POST['answers'] ?? [];
        $correctAnswerKey = isset($_POST['correct_answer']) ? (string) $_POST['correct_answer'] : '';

        if (!is_array($answersRaw)) {
            $answersRaw = [];
        }

        $validationErrors = [];

        if ($input['code'] === '') {
            $validationErrors['code'] = 'کد سوال الزامی است.';
        }

        if ($input['question'] === '') {
            $validationErrors['question'] = 'متن سوال الزامی است.';
        }

        $displayOrder = null;
        if ($displayOrderRaw !== '') {
            if (!preg_match('/^\d+$/', $displayOrderRaw)) {
                $validationErrors['display_order'] = 'ترتیب سوال باید عددی مثبت باشد.';
            } else {
                $displayOrder = (int) $displayOrderRaw;
            }
        }

        $processedAnswers = [];
        foreach ($answersRaw as $key => $answerInput) {
            $answerCode = trim((string) ($answerInput['code'] ?? ''));
            $answerOption = trim((string) ($answerInput['option'] ?? ''));
            $numericScoreRaw = UtilityHelper::persianToEnglish(trim((string) ($answerInput['score_numeric'] ?? '')));
            $characterScore = trim((string) ($answerInput['score_character'] ?? ''));
            $answerOrderRaw = UtilityHelper::persianToEnglish(trim((string) ($answerInput['display_order'] ?? '')));

            if ($answerCode === '' && $answerOption === '' && $numericScoreRaw === '' && $characterScore === '') {
                continue;
            }

            if ($answerCode === '') {
                $validationErrors['answers'][] = 'کد تمامی گزینه‌ها الزامی است.';
                break;
            }

            if ($answerOption === '') {
                $validationErrors['answers'][] = 'متن تمامی گزینه‌ها الزامی است.';
                break;
            }

            $numericScore = null;
            if ($numericScoreRaw !== '') {
                if (!preg_match('/^-?\d+(?:\.\d+)?$/', $numericScoreRaw)) {
                    $validationErrors['answers'][] = 'امتیاز عددی باید مقدار معتبر داشته باشد.';
                    break;
                }
                $numericScore = (float) $numericScoreRaw;
            }

            $answerOrder = null;
            if ($answerOrderRaw !== '') {
                if (!preg_match('/^\d+$/', $answerOrderRaw)) {
                    $validationErrors['answers'][] = 'ترتیب گزینه‌ها باید عددی مثبت باشد.';
                    break;
                }
                $answerOrder = (int) $answerOrderRaw;
            }

            $processedAnswers[] = [
                'key' => (string) $key,
                'code' => $answerCode,
                'option' => $answerOption,
                'numeric_score' => $numericScore,
                'character_score' => $characterScore !== '' ? $characterScore : null,
                'display_order' => $answerOrder,
                'is_correct' => 0,
            ];
        }

        if (empty($processedAnswers)) {
            $validationErrors['answers'][] = 'حداقل دو گزینه برای سوال ضروری است.';
        } elseif (count($processedAnswers) < 2) {
            $validationErrors['answers'][] = 'حداقل دو گزینه باید تکمیل شود.';
        }

        $correctAssigned = false;
        foreach ($processedAnswers as &$processedAnswer) {
            if ($processedAnswer['key'] === $correctAnswerKey) {
                $processedAnswer['is_correct'] = 1;
                $correctAssigned = true;
                break;
            }
        }
        unset($processedAnswer);

        if (!$correctAssigned) {
            $validationErrors['correct_answer'] = 'انتخاب گزینه صحیح الزامی است.';
        }

        $_SESSION['old_input'] = $input;
        $_SESSION['old_input']['answers'] = $answersRaw;
        $_SESSION['old_input']['correct_answer'] = $correctAnswerKey;

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $duplicateQuestion = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_evaluation_tool_questions WHERE organization_id = :organization_id AND evaluation_tool_id = :tool_id AND code = :code LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'tool_id' => $toolId,
                    'code' => $input['code'],
                ]
            );

            if ($duplicateQuestion) {
                $_SESSION['validation_errors'] = ['code' => 'این کد سوال قبلاً ثبت شده است.'];
                ResponseHelper::flashError('کد سوال تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectCreate);
            }
        } catch (Exception $exception) {
            // در صورت خطا اجازه ادامه می‌دهیم تا خطای اصلی گزارش شود.
        }

        $imagePath = null;
        if (!empty($_FILES['question_image']['name'])) {
            if (!FileHelper::isValidImage($_FILES['question_image'])) {
                $_SESSION['validation_errors'] = ['question_image' => 'فایل انتخاب شده معتبر نیست.'];
                ResponseHelper::flashError('فایل تصویری سوال معتبر نیست.');
                UtilityHelper::redirect($redirectCreate);
            }

            $uploadResult = FileHelper::uploadFile(
                $_FILES['question_image'],
                'uploads/organizations/questions/',
                ['jpg', 'jpeg', 'png', 'gif', 'webp']
            );

            if (empty($uploadResult['success'])) {
                $_SESSION['validation_errors'] = ['question_image' => $uploadResult['error'] ?? 'در آپلود تصویر سوال خطایی رخ داد.'];
                ResponseHelper::flashError('امکان آپلود تصویر سوال وجود ندارد.');
                UtilityHelper::redirect($redirectCreate);
            }

            $imagePath = $uploadResult['path'] ?? null;
        }

        try {
            DatabaseHelper::beginTransaction();

            $questionId = DatabaseHelper::insert(
                'organization_evaluation_tool_questions',
                [
                    'organization_id' => $organizationId,
                    'evaluation_tool_id' => $toolId,
                    'code' => $input['code'],
                    'title' => $input['question'],
                    'question_text' => $input['question'],
                    'description' => $input['description'] !== '' ? $input['description'] : null,
                    'image_path' => $imagePath,
                    'display_order' => $displayOrder,
                    'is_description_only' => (int) $input['is_description_only'],
                    'created_by' => $userIdentifier,
                    'updated_by' => $userIdentifier,
                ]
            );

            foreach ($processedAnswers as $processedAnswer) {
                DatabaseHelper::insert(
                    'organization_evaluation_tool_answers',
                    [
                        'organization_id' => $organizationId,
                        'evaluation_tool_id' => $toolId,
                        'question_id' => (int) $questionId,
                        'answer_code' => $processedAnswer['code'],
                        'option_text' => $processedAnswer['option'],
                        'numeric_score' => $processedAnswer['numeric_score'],
                        'character_score' => $processedAnswer['character_score'],
                        'display_order' => $processedAnswer['display_order'],
                        'is_correct' => (int) $processedAnswer['is_correct'],
                        'created_by' => $userIdentifier,
                        'updated_by' => $userIdentifier,
                    ]
                );
            }

            $this->refreshEvaluationToolQuestionsCount($organizationId, $toolId);

            DatabaseHelper::commit();

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('سوال جدید با موفقیت ثبت شد.');
            UtilityHelper::redirect($redirectQuestions);
        } catch (Exception $exception) {
            DatabaseHelper::rollback();

            ResponseHelper::flashError('در ذخیره سوال جدید مشکلی رخ داد.');
            UtilityHelper::redirect($redirectCreate);
        }
    }

    public function editOrganizationEvaluationToolQuestion(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolQuestionsTableExists();
        $this->ensureOrganizationEvaluationToolAnswersTableExists();

        $toolId = isset($_GET['tool_id']) ? (int) $_GET['tool_id'] : 0;
        $questionId = isset($_GET['id']) ? (int) $_GET['id'] : 0;

        $redirectTools = UtilityHelper::baseUrl('organizations/evaluation-tools');
        $redirectQuestions = UtilityHelper::baseUrl('organizations/evaluation-tools/questions?tool_id=' . $toolId);

        if ($toolId <= 0 || $questionId <= 0) {
            ResponseHelper::flashError('شناسه‌های ارسالی برای ابزار یا سوال نامعتبر است.');
            UtilityHelper::redirect($redirectTools);
        }

        $title = 'ویرایش سوال';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        try {
            $evaluationTool = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_evaluation_tools WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $toolId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $evaluationTool = null;
        }

        if (!$evaluationTool) {
            ResponseHelper::flashError('ابزار ارزیابی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectTools);
        }

        try {
            $question = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_evaluation_tool_questions WHERE id = :id AND organization_id = :organization_id AND evaluation_tool_id = :tool_id LIMIT 1',
                [
                    'id' => $questionId,
                    'organization_id' => $organizationId,
                    'tool_id' => $toolId,
                ]
            );
        } catch (Exception $exception) {
            $question = null;
        }

        if (!$question) {
            ResponseHelper::flashError('سوال مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectQuestions);
        }

        $questionAnswers = [];
        try {
            $questionAnswers = DatabaseHelper::fetchAll(
                'SELECT * FROM organization_evaluation_tool_answers WHERE organization_id = :organization_id AND evaluation_tool_id = :tool_id AND question_id = :question_id ORDER BY display_order ASC, id ASC',
                [
                    'organization_id' => $organizationId,
                    'tool_id' => $toolId,
                    'question_id' => $questionId,
                ]
            );
        } catch (Exception $exception) {
            $questionAnswers = [];
        }

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');
        $successMessage = flash('success');

        include __DIR__ . '/../Views/organizations/evaluations/tools/questions/edit.php';
    }

    public function updateOrganizationEvaluationToolQuestion(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolQuestionsTableExists();
        $this->ensureOrganizationEvaluationToolAnswersTableExists();

        $toolId = isset($_POST['tool_id']) ? (int) $_POST['tool_id'] : 0;
        $questionId = isset($_POST['id']) ? (int) $_POST['id'] : 0;

        $redirectTools = UtilityHelper::baseUrl('organizations/evaluation-tools');
        $redirectQuestions = UtilityHelper::baseUrl('organizations/evaluation-tools/questions?tool_id=' . $toolId);
        $redirectEdit = UtilityHelper::baseUrl('organizations/evaluation-tools/questions/edit?tool_id=' . $toolId . '&id=' . $questionId);

        if ($toolId <= 0 || $questionId <= 0) {
            ResponseHelper::flashError('شناسه‌های ارسالی برای ابزار یا سوال نامعتبر است.');
            UtilityHelper::redirect($redirectTools);
        }

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        if ($organizationId <= 0) {
            ResponseHelper::flashError('دسترسی به سازمان معتبر نیست.');
            UtilityHelper::redirect($redirectTools);
        }

        try {
            $evaluationTool = DatabaseHelper::fetchOne(
                'SELECT id, name, is_exam FROM organization_evaluation_tools WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $toolId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $evaluationTool = null;
        }

        if (!$evaluationTool) {
            ResponseHelper::flashError('ابزار ارزیابی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectTools);
        }

        try {
            $question = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_evaluation_tool_questions WHERE id = :id AND organization_id = :organization_id AND evaluation_tool_id = :tool_id LIMIT 1',
                [
                    'id' => $questionId,
                    'organization_id' => $organizationId,
                    'tool_id' => $toolId,
                ]
            );
        } catch (Exception $exception) {
            $question = null;
        }

        if (!$question) {
            ResponseHelper::flashError('سوال مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectQuestions);
        }

        $displayOrderRaw = UtilityHelper::persianToEnglish(trim((string) ($_POST['display_order'] ?? '')));

        $input = [
            'tool_id' => $toolId,
            'code' => trim((string) ($_POST['code'] ?? '')),
            'question' => trim((string) ($_POST['question'] ?? '')),
            'description' => trim((string) ($_POST['description'] ?? '')),
            'display_order' => $displayOrderRaw,
            'is_description_only' => isset($_POST['is_description_only']) ? '1' : '0',
        ];

        $answersRaw = $_POST['answers'] ?? [];
        $correctAnswerKey = isset($_POST['correct_answer']) ? (string) $_POST['correct_answer'] : '';

        if (!is_array($answersRaw)) {
            $answersRaw = [];
        }

        $validationErrors = [];

        if ($input['code'] === '') {
            $validationErrors['code'] = 'کد سوال الزامی است.';
        }

        if ($input['question'] === '') {
            $validationErrors['question'] = 'متن سوال الزامی است.';
        }

        $displayOrder = null;
        if ($displayOrderRaw !== '') {
            if (!preg_match('/^\d+$/', $displayOrderRaw)) {
                $validationErrors['display_order'] = 'ترتیب سوال باید عددی مثبت باشد.';
            } else {
                $displayOrder = (int) $displayOrderRaw;
            }
        }

        $processedAnswers = [];
        foreach ($answersRaw as $key => $answerInput) {
            $answerCode = trim((string) ($answerInput['code'] ?? ''));
            $answerOption = trim((string) ($answerInput['option'] ?? ''));
            $numericScoreRaw = UtilityHelper::persianToEnglish(trim((string) ($answerInput['score_numeric'] ?? '')));
            $characterScore = trim((string) ($answerInput['score_character'] ?? ''));
            $answerOrderRaw = UtilityHelper::persianToEnglish(trim((string) ($answerInput['display_order'] ?? '')));

            if ($answerCode === '' && $answerOption === '' && $numericScoreRaw === '' && $characterScore === '') {
                continue;
            }

            if ($answerCode === '') {
                $validationErrors['answers'][] = 'کد تمامی گزینه‌ها الزامی است.';
                break;
            }

            if ($answerOption === '') {
                $validationErrors['answers'][] = 'متن تمامی گزینه‌ها الزامی است.';
                break;
            }

            $numericScore = null;
            if ($numericScoreRaw !== '') {
                if (!preg_match('/^-?\d+(?:\.\d+)?$/', $numericScoreRaw)) {
                    $validationErrors['answers'][] = 'امتیاز عددی باید مقدار معتبر داشته باشد.';
                    break;
                }
                $numericScore = (float) $numericScoreRaw;
            }

            $answerOrder = null;
            if ($answerOrderRaw !== '') {
                if (!preg_match('/^\d+$/', $answerOrderRaw)) {
                    $validationErrors['answers'][] = 'ترتیب گزینه‌ها باید عددی مثبت باشد.';
                    break;
                }
                $answerOrder = (int) $answerOrderRaw;
            }

            $processedAnswers[] = [
                'key' => (string) $key,
                'code' => $answerCode,
                'option' => $answerOption,
                'numeric_score' => $numericScore,
                'character_score' => $characterScore !== '' ? $characterScore : null,
                'display_order' => $answerOrder,
                'is_correct' => 0,
            ];
        }

        if (empty($processedAnswers)) {
            $validationErrors['answers'][] = 'حداقل دو گزینه برای سوال ضروری است.';
        } elseif (count($processedAnswers) < 2) {
            $validationErrors['answers'][] = 'حداقل دو گزینه باید تکمیل شود.';
        }

        $correctAssigned = false;
        foreach ($processedAnswers as &$processedAnswer) {
            if ($processedAnswer['key'] === $correctAnswerKey) {
                $processedAnswer['is_correct'] = 1;
                $correctAssigned = true;
                break;
            }
        }
        unset($processedAnswer);

        if (!$correctAssigned) {
            $validationErrors['correct_answer'] = 'انتخاب گزینه صحیح الزامی است.';
        }

        $_SESSION['old_input'] = $input;
        $_SESSION['old_input']['id'] = $questionId;
        $_SESSION['old_input']['answers'] = $answersRaw;
        $_SESSION['old_input']['correct_answer'] = $correctAnswerKey;

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        try {
            $duplicateQuestion = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_evaluation_tool_questions WHERE organization_id = :organization_id AND evaluation_tool_id = :tool_id AND code = :code AND id <> :question_id LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'tool_id' => $toolId,
                    'code' => $input['code'],
                    'question_id' => $questionId,
                ]
            );

            if ($duplicateQuestion) {
                $_SESSION['validation_errors'] = ['code' => 'این کد سوال قبلاً ثبت شده است.'];
                ResponseHelper::flashError('کد سوال تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectEdit);
            }
        } catch (Exception $exception) {
            // ادامه روند برای گزارش خطای اصلی.
        }

        $imagePath = $question['image_path'] ?? null;
        $removeImage = isset($_POST['remove_image']);

        if (!empty($_FILES['question_image']['name'])) {
            if (!FileHelper::isValidImage($_FILES['question_image'])) {
                $_SESSION['validation_errors'] = ['question_image' => 'فایل انتخاب شده معتبر نیست.'];
                ResponseHelper::flashError('فایل تصویری سوال معتبر نیست.');
                UtilityHelper::redirect($redirectEdit);
            }

            $uploadResult = FileHelper::uploadFile(
                $_FILES['question_image'],
                'uploads/organizations/questions/',
                ['jpg', 'jpeg', 'png', 'gif', 'webp']
            );

            if (empty($uploadResult['success'])) {
                $_SESSION['validation_errors'] = ['question_image' => $uploadResult['error'] ?? 'در آپلود تصویر سوال خطایی رخ داد.'];
                ResponseHelper::flashError('امکان آپلود تصویر سوال وجود ندارد.');
                UtilityHelper::redirect($redirectEdit);
            }

            if (!empty($imagePath)) {
                FileHelper::deleteFile($imagePath);
            }

            $imagePath = $uploadResult['path'] ?? null;
            $removeImage = false;
        }

        if ($removeImage && !empty($imagePath)) {
            FileHelper::deleteFile($imagePath);
            $imagePath = null;
        }

        try {
            DatabaseHelper::beginTransaction();

            DatabaseHelper::update(
                'organization_evaluation_tool_questions',
                [
                    'code' => $input['code'],
                    'title' => $input['question'],
                    'question_text' => $input['question'],
                    'description' => $input['description'] !== '' ? $input['description'] : null,
                    'image_path' => $imagePath,
                    'display_order' => $displayOrder,
                    'is_description_only' => (int) $input['is_description_only'],
                    'updated_by' => $userIdentifier,
                ],
                'id = :id AND organization_id = :organization_id AND evaluation_tool_id = :tool_id',
                [
                    'id' => $questionId,
                    'organization_id' => $organizationId,
                    'tool_id' => $toolId,
                ]
            );

            DatabaseHelper::delete(
                'organization_evaluation_tool_answers',
                'organization_id = :organization_id AND question_id = :question_id',
                [
                    'organization_id' => $organizationId,
                    'question_id' => $questionId,
                ]
            );

            foreach ($processedAnswers as $processedAnswer) {
                DatabaseHelper::insert(
                    'organization_evaluation_tool_answers',
                    [
                        'organization_id' => $organizationId,
                        'evaluation_tool_id' => $toolId,
                        'question_id' => $questionId,
                        'answer_code' => $processedAnswer['code'],
                        'option_text' => $processedAnswer['option'],
                        'numeric_score' => $processedAnswer['numeric_score'],
                        'character_score' => $processedAnswer['character_score'],
                        'display_order' => $processedAnswer['display_order'],
                        'is_correct' => (int) $processedAnswer['is_correct'],
                        'created_by' => $userIdentifier,
                        'updated_by' => $userIdentifier,
                    ]
                );
            }

            $this->refreshEvaluationToolQuestionsCount($organizationId, $toolId);

            DatabaseHelper::commit();

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('سوال با موفقیت به‌روزرسانی شد.');
            UtilityHelper::redirect($redirectQuestions);
        } catch (Exception $exception) {
            DatabaseHelper::rollback();

            ResponseHelper::flashError('در به‌روزرسانی سوال مشکلی رخ داد.');
            UtilityHelper::redirect($redirectEdit);
        }
    }

    public function deleteOrganizationEvaluationToolQuestion(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolQuestionsTableExists();
        $this->ensureOrganizationEvaluationToolAnswersTableExists();

        $toolId = isset($_POST['tool_id']) ? (int) $_POST['tool_id'] : 0;
        $questionId = isset($_POST['id']) ? (int) $_POST['id'] : 0;

        $redirectTools = UtilityHelper::baseUrl('organizations/evaluation-tools');
        $redirectQuestions = UtilityHelper::baseUrl('organizations/evaluation-tools/questions?tool_id=' . $toolId);

        if ($toolId <= 0 || $questionId <= 0) {
            ResponseHelper::flashError('شناسه‌های ارسالی برای ابزار یا سوال نامعتبر است.');
            UtilityHelper::redirect($redirectTools);
        }

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectQuestions);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);

        if ($organizationId <= 0) {
            ResponseHelper::flashError('دسترسی به سازمان معتبر نیست.');
            UtilityHelper::redirect($redirectTools);
        }

        try {
            $question = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_evaluation_tool_questions WHERE id = :id AND organization_id = :organization_id AND evaluation_tool_id = :tool_id LIMIT 1',
                [
                    'id' => $questionId,
                    'organization_id' => $organizationId,
                    'tool_id' => $toolId,
                ]
            );
        } catch (Exception $exception) {
            $question = null;
        }

        if (!$question) {
            ResponseHelper::flashError('سوال مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectQuestions);
        }

        try {
            DatabaseHelper::beginTransaction();

            DatabaseHelper::delete(
                'organization_evaluation_tool_answers',
                'organization_id = :organization_id AND question_id = :question_id',
                [
                    'organization_id' => $organizationId,
                    'question_id' => $questionId,
                ]
            );

            DatabaseHelper::delete(
                'organization_evaluation_tool_questions',
                'id = :id AND organization_id = :organization_id AND evaluation_tool_id = :tool_id',
                [
                    'id' => $questionId,
                    'organization_id' => $organizationId,
                    'tool_id' => $toolId,
                ]
            );

            if (!empty($question['image_path'])) {
                FileHelper::deleteFile((string) $question['image_path']);
            }

            $this->refreshEvaluationToolQuestionsCount($organizationId, $toolId);

            DatabaseHelper::commit();

            ResponseHelper::flashSuccess('سوال با موفقیت حذف شد.');
        } catch (Exception $exception) {
            DatabaseHelper::rollback();
            ResponseHelper::flashError('در حذف سوال مشکلی رخ داد.');
        }

        UtilityHelper::redirect($redirectQuestions);
    }

    public function importOrganizationEvaluationToolQuestionsFromExam(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolQuestionsTableExists();
        $this->ensureOrganizationEvaluationToolAnswersTableExists();
        $this->ensureExamsTableExists();
        $this->ensureExamQuestionsTableExists();

        $toolId = isset($_POST['tool_id']) ? (int) $_POST['tool_id'] : 0;
        $examId = isset($_POST['exam_id']) ? (int) $_POST['exam_id'] : 0;

        $redirectTools = UtilityHelper::baseUrl('organizations/evaluation-tools');
        $redirectQuestions = UtilityHelper::baseUrl('organizations/evaluation-tools/questions?tool_id=' . $toolId);

        if ($toolId <= 0) {
            ResponseHelper::flashError('شناسه ابزار ارزیابی نامعتبر است.');
            UtilityHelper::redirect($redirectTools);
        }

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectQuestions);
        }

        if ($examId <= 0) {
            ResponseHelper::flashError('آزمون معتبری برای افزودن سوالات انتخاب نشده است.');
            UtilityHelper::redirect($redirectQuestions);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        if ($organizationId <= 0) {
            ResponseHelper::flashError('دسترسی به سازمان معتبر نیست.');
            UtilityHelper::redirect($redirectTools);
        }

        try {
            $evaluationTool = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_evaluation_tools WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $toolId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $evaluationTool = null;
        }

        if (!$evaluationTool) {
            ResponseHelper::flashError('ابزار ارزیابی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectTools);
        }

        try {
            $exam = DatabaseHelper::fetchOne(
                'SELECT * FROM exams WHERE id = :id LIMIT 1',
                [
                    'id' => $examId,
                ]
            );
        } catch (Exception $exception) {
            $exam = null;
        }

        if (!$exam) {
            ResponseHelper::flashError('آزمون انتخاب شده یافت نشد یا در دسترس نیست.');
            UtilityHelper::redirect($redirectQuestions);
        }

        try {
            $examQuestions = DatabaseHelper::fetchAll(
                'SELECT * FROM exam_questions WHERE exam_id = :exam_id ORDER BY (question_code IS NULL) ASC, question_code ASC, id ASC',
                ['exam_id' => $examId]
            );
        } catch (Exception $exception) {
            $examQuestions = [];
        }

        if (empty($examQuestions)) {
            ResponseHelper::flashError('سوالی برای آزمون انتخابی ثبت نشده است.');
            UtilityHelper::redirect($redirectQuestions);
        }

        $existingCodes = [];
        try {
            $existingRows = DatabaseHelper::fetchAll(
                'SELECT code FROM organization_evaluation_tool_questions WHERE organization_id = :organization_id AND evaluation_tool_id = :tool_id',
                [
                    'organization_id' => $organizationId,
                    'tool_id' => $toolId,
                ]
            );
        } catch (Exception $exception) {
            $existingRows = [];
        }

        foreach ($existingRows as $row) {
            $existingCodes[] = mb_strtolower((string) ($row['code'] ?? ''));
        }

        try {
            $maxOrderRow = DatabaseHelper::fetchOne(
                'SELECT MAX(display_order) AS max_order FROM organization_evaluation_tool_questions WHERE organization_id = :organization_id AND evaluation_tool_id = :tool_id',
                [
                    'organization_id' => $organizationId,
                    'tool_id' => $toolId,
                ]
            );
            $orderCounter = (int) ($maxOrderRow['max_order'] ?? 0);
        } catch (Exception $exception) {
            $orderCounter = 0;
        }

        $inserted = 0;
        $skippedDuplicates = 0;
        $skippedInvalid = 0;

        $transactionStarted = false;

        try {
            DatabaseHelper::beginTransaction();
            $transactionStarted = true;

            foreach ($examQuestions as $index => $examQuestion) {
                $questionCode = trim((string) ($examQuestion['question_code'] ?? ''));
                if ($questionCode === '') {
                    $questionCode = 'EX-' . strtoupper(dechex($examId)) . '-' . str_pad((string) ($index + 1), 3, '0', STR_PAD_LEFT);
                }

                $normalizedCode = mb_strtolower($questionCode);
                if ($normalizedCode !== '' && in_array($normalizedCode, $existingCodes, true)) {
                    $skippedDuplicates++;
                    continue;
                }

                $questionText = trim((string) ($examQuestion['question_text'] ?? ''));
                if ($questionText === '') {
                    $skippedInvalid++;
                    continue;
                }

                $options = $this->extractOptionsFromExamQuestion($examQuestion);
                $isDescriptionOnly = count($options) < 2 ? 1 : 0;

                if ($isDescriptionOnly === 1 && count($options) === 0) {
                    // Allow description-only questions, but ensure there is at least some text to show.
                    $options = [];
                }

                $title = mb_substr($questionText, 0, 190);
                if ($title === '') {
                    $title = 'سوال وارد شده از آزمون';
                }

                $orderCounter++;

                $questionId = (int) DatabaseHelper::insert(
                    'organization_evaluation_tool_questions',
                    [
                        'organization_id' => $organizationId,
                        'evaluation_tool_id' => $toolId,
                        'code' => $questionCode,
                        'title' => $title,
                        'question_text' => $questionText,
                        'description' => null,
                        'image_path' => null,
                        'display_order' => $orderCounter,
                        'is_description_only' => $isDescriptionOnly,
                        'created_by' => $userIdentifier,
                        'updated_by' => $userIdentifier,
                    ]
                );

                $existingCodes[] = $normalizedCode;
                $inserted++;

                if ($isDescriptionOnly === 0) {
                    $answerOrder = 1;
                    foreach ($options as $option) {
                        DatabaseHelper::insert(
                            'organization_evaluation_tool_answers',
                            [
                                'organization_id' => $organizationId,
                                'evaluation_tool_id' => $toolId,
                                'question_id' => $questionId,
                                'answer_code' => (string) $option['code'],
                                'option_text' => (string) $option['option'],
                                'numeric_score' => $option['numeric_score'],
                                'character_score' => $option['character_score'],
                                'display_order' => $answerOrder,
                                'is_correct' => (int) $option['is_correct'],
                                'created_by' => $userIdentifier,
                                'updated_by' => $userIdentifier,
                            ]
                        );
                        $answerOrder++;
                    }
                }
            }

            if ($inserted > 0) {
                $this->refreshEvaluationToolQuestionsCount($organizationId, $toolId);
            }

            DatabaseHelper::commit();
            $transactionStarted = false;
        } catch (Exception $exception) {
            if ($transactionStarted) {
                DatabaseHelper::rollback();
            }

            ResponseHelper::flashError('در هنگام افزودن سوالات از بانک سوالات سیستمی خطایی رخ داد.');
            UtilityHelper::redirect($redirectQuestions);
        }

        if ($inserted === 0) {
            ResponseHelper::flashWarning('هیچ سوال جدیدی به این ابزار اضافه نشد؛ احتمالاً تمامی سوالات انتخابی پیش‌تر افزوده شده‌اند یا ساختار نامعتبری داشتند.');
            UtilityHelper::redirect($redirectQuestions);
        }

        $examTitleForMessage = trim((string) ($exam['title'] ?? '---'));
        if ($examTitleForMessage === '') {
            $examTitleForMessage = 'آزمون انتخابی';
        }

        $successMessage = 'تعداد ' . UtilityHelper::englishToPersian((string) $inserted) . ' سوال از آزمون «' . $examTitleForMessage . '» به این ابزار افزوده شد.';
        ResponseHelper::flashSuccess($successMessage);

        if ($skippedDuplicates > 0 || $skippedInvalid > 0) {
            $notes = [];
            if ($skippedDuplicates > 0) {
                $notes[] = UtilityHelper::englishToPersian((string) $skippedDuplicates) . ' مورد به دلیل تکراری بودن نادیده گرفته شد.';
            }
            if ($skippedInvalid > 0) {
                $notes[] = UtilityHelper::englishToPersian((string) $skippedInvalid) . ' مورد به دلیل ساختار نامعتبر یا نبود گزینه‌های کافی افزوده نشد.';
            }

            if (!empty($notes)) {
                ResponseHelper::flashWarning(implode(' ', $notes));
            }
        }

        UtilityHelper::redirect($redirectQuestions);
    }

    public function organizationToolsMbtiSettings(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationMbtiTypesTableExists();

        $title = 'تنظیمات آزمون MBTI';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $mbtiTypes = [];

        try {
            $records = DatabaseHelper::fetchAll(
                'SELECT * FROM organization_mbti_types WHERE organization_id = :organization_id ORDER BY type_code ASC',
                ['organization_id' => $organizationId]
            );

            foreach ($records as $record) {
                $typeId = (int) ($record['id'] ?? 0);
                if ($typeId <= 0) {
                    continue;
                }

                $typeCode = strtoupper(trim((string) ($record['type_code'] ?? '')));
                $mbtiTypes[] = [
                    'id' => $typeId,
                    'type_code' => $typeCode,
                    'title' => trim((string) ($record['title'] ?? '')),
                    'summary' => trim((string) ($record['summary'] ?? '')),
                    'cognitive_functions' => trim((string) ($record['cognitive_functions'] ?? '')),
                    'categories_raw' => (string) ($record['categories'] ?? ''),
                    'categories' => $this->decodeMbtiCategories((string) ($record['categories'] ?? '')),
                    'description' => trim((string) ($record['description'] ?? '')),
                    'created_at' => $record['created_at'] ?? null,
                    'updated_at' => $record['updated_at'] ?? null,
                ];
            }
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی تیپ‌های شخصیتی MBTI مشکلی رخ داد.');
        }

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/tools/mbti/index.php';
    }

    public function createOrganizationToolsMbtiType(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationMbtiTypesTableExists();

        $title = 'افزودن تیپ شخصیتی MBTI';
        $user = $sessionData['user'];

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/tools/mbti/create.php';
    }

    public function storeOrganizationToolsMbtiType(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationMbtiTypesTableExists();

        $redirectCreate = UtilityHelper::baseUrl('organizations/tools/mbti-settings/create');
        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/mbti-settings');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $typeCodeRaw = trim((string) ($_POST['type_code'] ?? ''));
        $typeCodeNormalized = strtoupper(preg_replace('/\s+/u', '', UtilityHelper::persianToEnglish($typeCodeRaw)));

        $input = [
            'type_code' => $typeCodeNormalized,
            'title' => trim((string) ($_POST['title'] ?? '')),
            'summary' => trim((string) ($_POST['summary'] ?? '')),
            'functions' => trim((string) ($_POST['functions'] ?? '')),
            'categories' => trim((string) ($_POST['categories'] ?? '')),
            'description' => trim((string) ($_POST['description'] ?? '')),
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($input['type_code'] === '') {
            $validationErrors['type_code'] = 'کد تیپ شخصیتی الزامی است.';
        } elseif (!$this->isValidMbtiCode($input['type_code'])) {
            $validationErrors['type_code'] = 'کد تیپ شخصیتی باید شامل چهار حرف معتبر MBTI باشد (مانند ENFP).';
        }

        if ($input['title'] === '') {
            $validationErrors['title'] = 'عنوان تیپ شخصیتی الزامی است.';
        } elseif (mb_strlen($input['title']) > 191) {
            $validationErrors['title'] = 'طول عنوان نباید بیش از ۱۹۱ کاراکتر باشد.';
        }

        if ($input['summary'] !== '' && mb_strlen($input['summary']) > 500) {
            $validationErrors['summary'] = 'توصیف مختصر نباید بیش از ۵۰۰ کاراکتر باشد.';
        }

        $categoriesList = $this->normalizeMbtiCategoriesInput($input['categories']);
        if ($input['categories'] !== '' && empty($categoriesList)) {
            $validationErrors['categories'] = 'فرمت دسته‌بندی‌ها معتبر نیست. از جداکننده ویرگول، خط جدید یا نقطه‌ویرگول استفاده کنید.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        if ($organizationId <= 0) {
            ResponseHelper::flashError('شناسه سازمان نامعتبر است.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $duplicate = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_mbti_types WHERE organization_id = :organization_id AND type_code = :type_code LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'type_code' => $input['type_code'],
                ]
            );

            if ($duplicate) {
                $_SESSION['validation_errors'] = ['type_code' => 'این کد تیپ شخصیتی قبلاً ثبت شده است.'];
                ResponseHelper::flashError('کد تیپ شخصیتی تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectCreate);
            }

            DatabaseHelper::insert(
                'organization_mbti_types',
                [
                    'organization_id' => $organizationId,
                    'type_code' => $input['type_code'],
                    'title' => $input['title'],
                    'summary' => $input['summary'] !== '' ? $input['summary'] : null,
                    'cognitive_functions' => $input['functions'] !== '' ? $input['functions'] : null,
                    'categories' => !empty($categoriesList) ? json_encode($categoriesList, JSON_UNESCAPED_UNICODE) : null,
                    'description' => $input['description'] !== '' ? $input['description'] : null,
                    'created_by' => $userIdentifier,
                    'updated_by' => $userIdentifier,
                ]
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('تیپ شخصیتی جدید با موفقیت ثبت شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در ذخیره تیپ شخصیتی مشکلی رخ داد.');
            UtilityHelper::redirect($redirectCreate);
        }
    }

    public function editOrganizationToolsMbtiType(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationMbtiTypesTableExists();

        $title = 'ویرایش تیپ شخصیتی MBTI';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $typeId = isset($_GET['id']) ? (int) $_GET['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/mbti-settings');

        if ($typeId <= 0) {
            ResponseHelper::flashError('شناسه تیپ شخصیتی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $mbtiType = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_mbti_types WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $typeId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $mbtiType = null;
        }

        if (!$mbtiType) {
            ResponseHelper::flashError('تیپ شخصیتی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/tools/mbti/edit.php';
    }

    public function updateOrganizationToolsMbtiType(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationMbtiTypesTableExists();

        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/mbti-settings');

        $typeId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        $redirectEdit = UtilityHelper::baseUrl('organizations/tools/mbti-settings/edit?id=' . $typeId);

        if ($typeId <= 0) {
            ResponseHelper::flashError('شناسه تیپ شخصیتی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $typeCodeRaw = trim((string) ($_POST['type_code'] ?? ''));
        $typeCodeNormalized = strtoupper(preg_replace('/\s+/u', '', UtilityHelper::persianToEnglish($typeCodeRaw)));

        $input = [
            'type_code' => $typeCodeNormalized,
            'title' => trim((string) ($_POST['title'] ?? '')),
            'summary' => trim((string) ($_POST['summary'] ?? '')),
            'functions' => trim((string) ($_POST['functions'] ?? '')),
            'categories' => trim((string) ($_POST['categories'] ?? '')),
            'description' => trim((string) ($_POST['description'] ?? '')),
        ];

        $_SESSION['old_input'] = $input;
        $_SESSION['old_input']['id'] = $typeId;

        $validationErrors = [];

        if ($input['type_code'] === '') {
            $validationErrors['type_code'] = 'کد تیپ شخصیتی الزامی است.';
        } elseif (!$this->isValidMbtiCode($input['type_code'])) {
            $validationErrors['type_code'] = 'کد تیپ شخصیتی باید شامل چهار حرف معتبر MBTI باشد (مانند ENFP).';
        }

        if ($input['title'] === '') {
            $validationErrors['title'] = 'عنوان تیپ شخصیتی الزامی است.';
        } elseif (mb_strlen($input['title']) > 191) {
            $validationErrors['title'] = 'طول عنوان نباید بیش از ۱۹۱ کاراکتر باشد.';
        }

        if ($input['summary'] !== '' && mb_strlen($input['summary']) > 500) {
            $validationErrors['summary'] = 'توصیف مختصر نباید بیش از ۵۰۰ کاراکتر باشد.';
        }

        $categoriesList = $this->normalizeMbtiCategoriesInput($input['categories']);
        if ($input['categories'] !== '' && empty($categoriesList)) {
            $validationErrors['categories'] = 'فرمت دسته‌بندی‌ها معتبر نیست. از جداکننده ویرگول، خط جدید یا نقطه‌ویرگول استفاده کنید.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        if ($organizationId <= 0) {
            ResponseHelper::flashError('شناسه سازمان نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $existing = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_mbti_types WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $typeId,
                    'organization_id' => $organizationId,
                ]
            );

            if (!$existing) {
                ResponseHelper::flashError('تیپ شخصیتی مورد نظر یافت نشد.');
                UtilityHelper::redirect($redirectIndex);
            }

            $duplicate = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_mbti_types WHERE organization_id = :organization_id AND type_code = :type_code AND id <> :id LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'type_code' => $input['type_code'],
                    'id' => $typeId,
                ]
            );

            if ($duplicate) {
                $_SESSION['validation_errors'] = ['type_code' => 'این کد تیپ شخصیتی قبلاً ثبت شده است.'];
                ResponseHelper::flashError('کد تیپ شخصیتی تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectEdit);
            }

            DatabaseHelper::update(
                'organization_mbti_types',
                [
                    'type_code' => $input['type_code'],
                    'title' => $input['title'],
                    'summary' => $input['summary'] !== '' ? $input['summary'] : null,
                    'cognitive_functions' => $input['functions'] !== '' ? $input['functions'] : null,
                    'categories' => !empty($categoriesList) ? json_encode($categoriesList, JSON_UNESCAPED_UNICODE) : null,
                    'description' => $input['description'] !== '' ? $input['description'] : null,
                    'updated_by' => $userIdentifier,
                ],
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $typeId,
                    'organization_id' => $organizationId,
                ]
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('تیپ شخصیتی با موفقیت به‌روزرسانی شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در به‌روزرسانی تیپ شخصیتی مشکلی رخ داد.');
            UtilityHelper::redirect($redirectEdit);
        }
    }

    public function deleteOrganizationToolsMbtiType(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationMbtiTypesTableExists();

        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/mbti-settings');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $typeId = isset($_POST['id']) ? (int) $_POST['id'] : 0;

        if ($typeId <= 0) {
            ResponseHelper::flashError('شناسه تیپ شخصیتی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $organization = $sessionData['organization'];
        $organizationId = (int) ($organization['id'] ?? 0);

        try {
            $deleted = DatabaseHelper::delete(
                'organization_mbti_types',
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $typeId,
                    'organization_id' => $organizationId,
                ]
            );

            if ($deleted > 0) {
                ResponseHelper::flashSuccess('تیپ شخصیتی با موفقیت حذف شد.');
            } else {
                ResponseHelper::flashError('تیپ شخصیتی مورد نظر یافت نشد یا قبلاً حذف شده است.');
            }
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام حذف تیپ شخصیتی مشکلی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function manageOrganizationMbtiTypeFeatures(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationMbtiTypesTableExists();
        $this->ensureOrganizationMbtiTypeFeaturesTableExists();

        $title = 'تعریف ویژگی‌های تیپ شخصیتی MBTI';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $typeId = isset($_GET['id']) ? (int) $_GET['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/mbti-settings');

        if ($typeId <= 0) {
            ResponseHelper::flashError('شناسه تیپ شخصیتی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $mbtiType = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_mbti_types WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $typeId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $mbtiType = null;
        }

        if (!$mbtiType) {
            ResponseHelper::flashError('تیپ شخصیتی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $mbtiType['id'] = $typeId;
        $mbtiType['categories_list'] = $this->decodeMbtiCategories((string) ($mbtiType['categories'] ?? ''));

        $featureCategories = $this->getMbtiFeatureCategories();
        $categoryKeys = array_keys($featureCategories);
        $defaultCategoryKey = isset($categoryKeys[0]) ? (string) $categoryKeys[0] : '';
        $featuresByCategory = [];

        $activeTabKey = trim((string) ($_GET['tab'] ?? ''));
        if ($activeTabKey === '' || !array_key_exists($activeTabKey, $featureCategories)) {
            $activeTabKey = $defaultCategoryKey;
        }

        foreach ($featureCategories as $categoryKey => $categoryMeta) {
            try {
                $featuresByCategory[$categoryKey] = DatabaseHelper::fetchAll(
                    'SELECT id, category, feature_text, sort_order, created_at, updated_at FROM organization_mbti_type_features WHERE organization_id = :organization_id AND mbti_type_id = :mbti_type_id AND category = :category ORDER BY sort_order ASC, id ASC',
                    [
                        'organization_id' => $organizationId,
                        'mbti_type_id' => $typeId,
                        'category' => $categoryKey,
                    ]
                );
            } catch (Exception $exception) {
                $featuresByCategory[$categoryKey] = [];
            }
        }

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/tools/mbti/features.php';
    }

    public function createOrganizationMbtiTypeFeature(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationMbtiTypesTableExists();
        $this->ensureOrganizationMbtiTypeFeaturesTableExists();

        $title = 'افزودن ویژگی برای تیپ MBTI';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $typeId = isset($_GET['id']) ? (int) $_GET['id'] : 0;
        $categoryFromRequest = trim((string) ($_GET['category'] ?? ''));

        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/mbti-settings');
        if ($typeId <= 0 || $organizationId <= 0) {
            ResponseHelper::flashError('شناسه تیپ شخصیتی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $mbtiType = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_mbti_types WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $typeId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $mbtiType = null;
        }

        if (!$mbtiType) {
            ResponseHelper::flashError('تیپ شخصیتی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $mbtiType['id'] = $typeId;
        $featureCategories = $this->getMbtiFeatureCategories();
        $categoryKeys = array_keys($featureCategories);
        $defaultCategoryKey = isset($categoryKeys[0]) ? (string) $categoryKeys[0] : '';

        $selectedCategoryKey = $categoryFromRequest;
        if ($selectedCategoryKey === '' || !array_key_exists($selectedCategoryKey, $featureCategories)) {
            $selectedCategoryKey = $defaultCategoryKey;
        }

        $redirectFeatures = UtilityHelper::baseUrl(
            'organizations/tools/mbti-settings/features?id=' . urlencode((string) $typeId)
            . ($selectedCategoryKey !== '' ? '&tab=' . urlencode($selectedCategoryKey) : '')
        );

        try {
            $existingFeatureCountRow = DatabaseHelper::fetchOne(
                'SELECT COUNT(*) AS total FROM organization_mbti_type_features WHERE organization_id = :organization_id AND mbti_type_id = :mbti_type_id AND category = :category',
                [
                    'organization_id' => $organizationId,
                    'mbti_type_id' => $typeId,
                    'category' => $selectedCategoryKey,
                ]
            );
            $existingFeatureCount = (int) ($existingFeatureCountRow['total'] ?? 0);
        } catch (Exception $exception) {
            $existingFeatureCount = 0;
        }

        if ($existingFeatureCount >= 5) {
            ResponseHelper::flashError('حداکثر ۵ ویژگی برای این دسته مجاز است. ابتدا یک ویژگی را حذف کنید.');
            UtilityHelper::redirect($redirectFeatures);
        }

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        $oldInput = $_SESSION['old_input'] ?? [];
        unset($_SESSION['validation_errors'], $_SESSION['old_input']);

        if (!empty($oldInput)) {
            $selectedCategoryKey = (string) ($oldInput['category'] ?? $selectedCategoryKey);
        }

        $errorMessage = flash('error');
        $mbtiType['categories_list'] = $this->decodeMbtiCategories((string) ($mbtiType['categories'] ?? ''));

        include __DIR__ . '/../Views/organizations/tools/mbti/features-create.php';
    }

    public function storeOrganizationMbtiTypeFeature(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationMbtiTypesTableExists();
        $this->ensureOrganizationMbtiTypeFeaturesTableExists();

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/tools/mbti-settings'));
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $typeId = isset($_POST['mbti_type_id']) ? (int) $_POST['mbti_type_id'] : 0;
        $categoryKey = trim((string) ($_POST['category'] ?? ''));

        $featureCategories = $this->getMbtiFeatureCategories();
        if (!array_key_exists($categoryKey, $featureCategories)) {
            ResponseHelper::flashError('دسته‌بندی انتخاب شده معتبر نیست.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/tools/mbti-settings/features?id=' . urlencode((string) $typeId)));
        }

        $redirectCreate = UtilityHelper::baseUrl('organizations/tools/mbti-settings/features/create?id=' . urlencode((string) $typeId) . '&category=' . urlencode($categoryKey));
        $redirectFeatures = UtilityHelper::baseUrl('organizations/tools/mbti-settings/features?id=' . urlencode((string) $typeId) . '&tab=' . urlencode($categoryKey));

        if ($organizationId <= 0 || $typeId <= 0) {
            ResponseHelper::flashError('شناسه سازمان یا تیپ شخصیتی معتبر نیست.');
            UtilityHelper::redirect($redirectCreate);
        }

        $featureText = trim((string) ($_POST['feature_text'] ?? ''));
        $sortOrderRaw = UtilityHelper::persianToEnglish(trim((string) ($_POST['sort_order'] ?? '')));

        $input = [
            'category' => $categoryKey,
            'feature_text' => $featureText,
            'sort_order' => $sortOrderRaw,
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($featureText === '') {
            $validationErrors['feature_text'] = 'متن ویژگی الزامی است.';
        } elseif (mb_strlen($featureText) > 1000) {
            $validationErrors['feature_text'] = 'طول ویژگی نباید بیش از ۱۰۰۰ کاراکتر باشد.';
        }

        $sortOrder = 0;
        if ($sortOrderRaw !== '') {
            if (!preg_match('/^-?\d+$/', $sortOrderRaw)) {
                $validationErrors['sort_order'] = 'ترتیب نمایش باید یک عدد صحیح باشد.';
            } else {
                $sortOrder = (int) $sortOrderRaw;
            }
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $typeExists = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_mbti_types WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $typeId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $typeExists = null;
        }

        if (!$typeExists) {
            ResponseHelper::flashError('تیپ شخصیتی انتخاب شده یافت نشد.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $existingFeatureCountRow = DatabaseHelper::fetchOne(
                'SELECT COUNT(*) AS total FROM organization_mbti_type_features WHERE organization_id = :organization_id AND mbti_type_id = :mbti_type_id AND category = :category',
                [
                    'organization_id' => $organizationId,
                    'mbti_type_id' => $typeId,
                    'category' => $categoryKey,
                ]
            );
            $existingFeatureCount = (int) ($existingFeatureCountRow['total'] ?? 0);
        } catch (Exception $exception) {
            $existingFeatureCount = 0;
        }

        if ($existingFeatureCount >= 5) {
            ResponseHelper::flashError('حداکثر ۵ ویژگی برای این دسته مجاز است. ابتدا یکی از ویژگی‌های فعلی را حذف کنید.');
            UtilityHelper::redirect($redirectFeatures);
        }

        $userIdentifier = (string) ($user['id'] ?? 'system');

        try {
            DatabaseHelper::insert('organization_mbti_type_features', [
                'organization_id' => $organizationId,
                'mbti_type_id' => $typeId,
                'category' => $categoryKey,
                'feature_text' => $featureText,
                'sort_order' => $sortOrder,
                'created_by' => $userIdentifier,
                'updated_by' => $userIdentifier,
            ]);

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('ویژگی جدید با موفقیت ثبت شد.');
            UtilityHelper::redirect($redirectFeatures);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام ذخیره ویژگی مشکلی رخ داد.');
            UtilityHelper::redirect($redirectCreate);
        }
    }

    public function editOrganizationMbtiTypeFeature(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationMbtiTypesTableExists();
        $this->ensureOrganizationMbtiTypeFeaturesTableExists();

        $title = 'ویرایش ویژگی تیپ MBTI';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $featureId = isset($_GET['id']) ? (int) $_GET['id'] : 0;

        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/mbti-settings');
        if ($featureId <= 0 || $organizationId <= 0) {
            ResponseHelper::flashError('شناسه ویژگی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $featureRecord = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_mbti_type_features WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $featureId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $featureRecord = null;
        }

        if (!$featureRecord) {
            ResponseHelper::flashError('ویژگی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $typeId = (int) ($featureRecord['mbti_type_id'] ?? 0);
        if ($typeId <= 0) {
            ResponseHelper::flashError('ویژگی معتبر نیست.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $mbtiType = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_mbti_types WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $typeId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $mbtiType = null;
        }

        if (!$mbtiType) {
            ResponseHelper::flashError('تیپ شخصیتی مرتبط یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $mbtiType['id'] = $typeId;
    $featureCategories = $this->getMbtiFeatureCategories();
    $categoryKeys = array_keys($featureCategories);
    $defaultCategoryKey = isset($categoryKeys[0]) ? (string) $categoryKeys[0] : '';

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        $oldInput = $_SESSION['old_input'] ?? [];
        unset($_SESSION['validation_errors'], $_SESSION['old_input']);

        if (empty($oldInput)) {
            $oldInput = [
                'feature_text' => (string) ($featureRecord['feature_text'] ?? ''),
                'sort_order' => (string) ($featureRecord['sort_order'] ?? ''),
                'category' => (string) ($featureRecord['category'] ?? ''),
            ];
        }

        $selectedCategoryKey = (string) ($oldInput['category'] ?? ($featureRecord['category'] ?? ''));
        if ($selectedCategoryKey === '' || !array_key_exists($selectedCategoryKey, $featureCategories)) {
            $selectedCategoryKey = $defaultCategoryKey;
        }

        $errorMessage = flash('error');
        $mbtiType['categories_list'] = $this->decodeMbtiCategories((string) ($mbtiType['categories'] ?? ''));

        include __DIR__ . '/../Views/organizations/tools/mbti/features-edit.php';
    }

    public function updateOrganizationMbtiTypeFeature(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationMbtiTypesTableExists();
        $this->ensureOrganizationMbtiTypeFeaturesTableExists();

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/tools/mbti-settings'));
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $featureId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        $typeId = isset($_POST['mbti_type_id']) ? (int) $_POST['mbti_type_id'] : 0;

        $categoryKey = trim((string) ($_POST['category'] ?? ''));

        $featureCategories = $this->getMbtiFeatureCategories();
        if (!array_key_exists($categoryKey, $featureCategories)) {
            ResponseHelper::flashError('دسته‌بندی انتخاب شده معتبر نیست.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/tools/mbti-settings'));
        }

        $redirectEdit = UtilityHelper::baseUrl('organizations/tools/mbti-settings/features/edit?id=' . urlencode((string) $featureId));
        $redirectFeatures = UtilityHelper::baseUrl('organizations/tools/mbti-settings/features?id=' . urlencode((string) $typeId) . '&tab=' . urlencode($categoryKey));

        if ($organizationId <= 0 || $featureId <= 0 || $typeId <= 0) {
            ResponseHelper::flashError('اطلاعات ارسال شده ناقص است.');
            UtilityHelper::redirect($redirectEdit);
        }

        $featureText = trim((string) ($_POST['feature_text'] ?? ''));
        $sortOrderRaw = UtilityHelper::persianToEnglish(trim((string) ($_POST['sort_order'] ?? '')));

        $input = [
            'category' => $categoryKey,
            'feature_text' => $featureText,
            'sort_order' => $sortOrderRaw,
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($featureText === '') {
            $validationErrors['feature_text'] = 'متن ویژگی الزامی است.';
        } elseif (mb_strlen($featureText) > 1000) {
            $validationErrors['feature_text'] = 'طول ویژگی نباید بیش از ۱۰۰۰ کاراکتر باشد.';
        }

        $sortOrder = 0;
        if ($sortOrderRaw !== '') {
            if (!preg_match('/^-?\d+$/', $sortOrderRaw)) {
                $validationErrors['sort_order'] = 'ترتیب نمایش باید یک عدد صحیح باشد.';
            } else {
                $sortOrder = (int) $sortOrderRaw;
            }
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        try {
            $featureRecord = DatabaseHelper::fetchOne(
                'SELECT id, organization_id, mbti_type_id FROM organization_mbti_type_features WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $featureId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $featureRecord = null;
        }

        if (!$featureRecord) {
            ResponseHelper::flashError('ویژگی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectFeatures);
        }

        if ((int) ($featureRecord['mbti_type_id'] ?? 0) !== $typeId) {
            ResponseHelper::flashError('ویژگی انتخاب شده با تیپ شخصیتی ارسال شده همخوانی ندارد.');
            UtilityHelper::redirect($redirectFeatures);
        }

        try {
            $typeExists = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_mbti_types WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $typeId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $typeExists = null;
        }

        if (!$typeExists) {
            ResponseHelper::flashError('تیپ شخصیتی مرتبط یافت نشد.');
            UtilityHelper::redirect($redirectFeatures);
        }

        $existingCategoryKey = (string) ($featureRecord['category'] ?? '');

        if ($categoryKey !== $existingCategoryKey) {
            try {
                $existingFeatureCountRow = DatabaseHelper::fetchOne(
                    'SELECT COUNT(*) AS total FROM organization_mbti_type_features WHERE organization_id = :organization_id AND mbti_type_id = :mbti_type_id AND category = :category',
                    [
                        'organization_id' => $organizationId,
                        'mbti_type_id' => $typeId,
                        'category' => $categoryKey,
                    ]
                );
                $existingFeatureCount = (int) ($existingFeatureCountRow['total'] ?? 0);
            } catch (Exception $exception) {
                $existingFeatureCount = 0;
            }

            if ($existingFeatureCount >= 5) {
                ResponseHelper::flashError('انتقال ویژگی به این دسته ممکن نیست؛ حداکثر ۵ ویژگی مجاز است.');
                UtilityHelper::redirect($redirectEdit);
            }
        }

        $userIdentifier = (string) ($user['id'] ?? 'system');

        try {
            DatabaseHelper::update(
                'organization_mbti_type_features',
                [
                    'category' => $categoryKey,
                    'feature_text' => $featureText,
                    'sort_order' => $sortOrder,
                    'updated_by' => $userIdentifier,
                ],
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $featureId,
                    'organization_id' => $organizationId,
                ]
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('ویژگی با موفقیت به‌روزرسانی شد.');
            UtilityHelper::redirect($redirectFeatures);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام به‌روزرسانی ویژگی مشکلی رخ داد.');
            UtilityHelper::redirect($redirectEdit);
        }
    }

    public function deleteOrganizationMbtiTypeFeature(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationMbtiTypesTableExists();
        $this->ensureOrganizationMbtiTypeFeaturesTableExists();

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/tools/mbti-settings'));
        }

    $organization = $sessionData['organization'];

    $organizationId = (int) ($organization['id'] ?? 0);
    $featureId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
    $typeId = isset($_POST['mbti_type_id']) ? (int) $_POST['mbti_type_id'] : 0;
    $requestedTypeId = $typeId;
        $categoryKey = trim((string) ($_POST['category'] ?? ''));

        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/mbti-settings');
        $redirectFeatures = $typeId > 0
            ? UtilityHelper::baseUrl('organizations/tools/mbti-settings/features?id=' . urlencode((string) $typeId) . ($categoryKey !== '' ? '&tab=' . urlencode($categoryKey) : ''))
            : $redirectIndex;

        if ($organizationId <= 0 || $featureId <= 0) {
            ResponseHelper::flashError('اطلاعات ارسال شده ناقص است.');
            UtilityHelper::redirect($redirectFeatures);
        }

        try {
            $featureRecord = DatabaseHelper::fetchOne(
                'SELECT id, mbti_type_id, category FROM organization_mbti_type_features WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $featureId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $featureRecord = null;
        }

        if (!$featureRecord) {
            ResponseHelper::flashError('ویژگی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectFeatures);
        }

        $recordTypeId = (int) ($featureRecord['mbti_type_id'] ?? 0);
        $recordCategory = (string) ($featureRecord['category'] ?? '');

        if ($typeId <= 0) {
            $typeId = $recordTypeId;
        }

        if ($categoryKey === '') {
            $categoryKey = $recordCategory;
        }

        $redirectFeatures = $typeId > 0
            ? UtilityHelper::baseUrl('organizations/tools/mbti-settings/features?id=' . urlencode((string) $typeId) . ($categoryKey !== '' ? '&tab=' . urlencode($categoryKey) : ''))
            : $redirectIndex;

        if ($requestedTypeId > 0 && $recordTypeId > 0 && $requestedTypeId !== $recordTypeId) {
            ResponseHelper::flashError('ویژگی انتخاب شده با تیپ ارسال شده همخوانی ندارد.');
            UtilityHelper::redirect($redirectFeatures);
        }

        try {
            DatabaseHelper::delete(
                'organization_mbti_type_features',
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $featureId,
                    'organization_id' => $organizationId,
                ]
            );

            ResponseHelper::flashSuccess('ویژگی با موفقیت حذف شد.');
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام حذف ویژگی مشکلی رخ داد.');
        }

        UtilityHelper::redirect($redirectFeatures);
    }

    public function organizationToolsDiscSettings(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationDiscPersonalityTypesTableExists();

        $title = 'تنظیمات آزمون DISC';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $scopeMeta = $this->getDiscScopeMeta();

        $discTypesByScope = [];

        foreach ($scopeMeta as $scopeKey => $meta) {
            try {
                $discTypesByScope[$scopeKey] = DatabaseHelper::fetchAll(
                    'SELECT * FROM organization_disc_personality_types WHERE organization_id = :organization_id AND scope = :scope ORDER BY disc_type_code ASC, id ASC',
                    [
                        'organization_id' => $organizationId,
                        'scope' => $scopeKey,
                    ]
                );
            } catch (Exception $exception) {
                $discTypesByScope[$scopeKey] = [];
            }
        }

        $activeScope = isset($_GET['scope']) ? trim((string) $_GET['scope']) : 'primary';
        if (!array_key_exists($activeScope, $scopeMeta)) {
            $activeScope = 'primary';
        }

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/tools/disc/index.php';
    }

    public function seedOrganizationDiscPersonalityTypes(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationDiscPersonalityTypesTableExists();

        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/disc-settings');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        if ($organizationId <= 0) {
            ResponseHelper::flashError('شناسه سازمان نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $presetData = $this->getDiscPresetSeedData();
        if (empty($presetData)) {
            ResponseHelper::flashError('داده‌های پیش‌فرض برای تیپ‌های DISC در دسترس نیست.');
            UtilityHelper::redirect($redirectIndex);
        }

        $scopeMeta = $this->getDiscScopeMeta();

        $createdCount = 0;
        $updatedCount = 0;

        try {
            DatabaseHelper::beginTransaction();

            foreach ($presetData as $preset) {
                if (!is_array($preset)) {
                    continue;
                }

                $scopeKey = (string) ($preset['scope'] ?? 'primary');
                if (!array_key_exists($scopeKey, $scopeMeta)) {
                    $scopeKey = 'primary';
                }

                $discTypeCode = $this->normalizeDiscTypeCode((string) ($preset['disc_type_code'] ?? ''));
                if (!$this->isValidDiscTypeCodeForScope($scopeKey, $discTypeCode)) {
                    continue;
                }

                $discTypeLabel = $this->getDiscTypeLabel($discTypeCode);

                try {
                    $existingRecord = DatabaseHelper::fetchOne(
                        'SELECT id FROM organization_disc_personality_types WHERE organization_id = :organization_id AND scope = :scope AND disc_type_code = :disc_type_code LIMIT 1',
                        [
                            'organization_id' => $organizationId,
                            'scope' => $scopeKey,
                            'disc_type_code' => $discTypeCode,
                        ]
                    );
                } catch (Exception $exception) {
                    $existingRecord = null;
                }

                $isSecondary = $scopeKey === 'secondary';
                $recordPayload = [];

                if ($isSecondary) {
                    $secondaryDescription = trim((string) ($preset['secondary_description'] ?? ''));
                    if ($secondaryDescription === '') {
                        continue;
                    }

                    $recordPayload = [
                        'short_description' => $this->buildSecondaryShortSummary($secondaryDescription),
                        'general_tendencies' => $secondaryDescription,
                        'work_preferences' => $secondaryDescription,
                        'effectiveness_requirements' => $secondaryDescription,
                        'companion_requirements' => $secondaryDescription,
                        'behavior_overview' => $secondaryDescription,
                    ];
                } else {
                    $shortDescription = trim((string) ($preset['short_description'] ?? ''));
                    $generalTendencies = trim((string) ($preset['general_tendencies'] ?? ''));
                    $workPreferences = trim((string) ($preset['work_preferences'] ?? ''));
                    $effectivenessRequirements = trim((string) ($preset['effectiveness_requirements'] ?? ''));
                    $companionRequirements = trim((string) ($preset['companion_requirements'] ?? ''));
                    $behaviorOverview = trim((string) ($preset['behavior_overview'] ?? ''));

                    if (
                        $shortDescription === ''
                        || $generalTendencies === ''
                        || $workPreferences === ''
                        || $effectivenessRequirements === ''
                        || $companionRequirements === ''
                        || $behaviorOverview === ''
                    ) {
                        continue;
                    }

                    $recordPayload = [
                        'short_description' => $shortDescription,
                        'general_tendencies' => $generalTendencies,
                        'work_preferences' => $workPreferences,
                        'effectiveness_requirements' => $effectivenessRequirements,
                        'companion_requirements' => $companionRequirements,
                        'behavior_overview' => $behaviorOverview,
                    ];
                }

                if (empty($recordPayload)) {
                    continue;
                }

                if ($existingRecord) {
                    $recordId = (int) ($existingRecord['id'] ?? 0);
                    if ($recordId > 0) {
                        DatabaseHelper::update(
                            'organization_disc_personality_types',
                            array_merge(
                                [
                                    'scope' => $scopeKey,
                                    'disc_type_code' => $discTypeCode,
                                    'disc_type_label' => $discTypeLabel,
                                    'updated_by' => $userIdentifier,
                                ],
                                $recordPayload
                            ),
                            'id = :id AND organization_id = :organization_id',
                            [
                                'id' => $recordId,
                                'organization_id' => $organizationId,
                            ]
                        );
                        $updatedCount++;
                    }
                    continue;
                }

                $insertId = (int) DatabaseHelper::insert(
                    'organization_disc_personality_types',
                    array_merge(
                        [
                            'organization_id' => $organizationId,
                            'scope' => $scopeKey,
                            'disc_type_code' => $discTypeCode,
                            'disc_type_label' => $discTypeLabel,
                            'created_by' => $userIdentifier,
                            'updated_by' => $userIdentifier,
                        ],
                        $recordPayload
                    )
                );

                if ($insertId > 0) {
                    $createdCount++;
                }
            }

            DatabaseHelper::commit();

            $successMessage = 'تیپ‌های آماده DISC با موفقیت ثبت شدند.';
            $successMessage .= ' (' . UtilityHelper::englishToPersian((string) $createdCount) . ' مورد جدید، ' . UtilityHelper::englishToPersian((string) $updatedCount) . ' مورد به‌روزرسانی)';
            ResponseHelper::flashSuccess($successMessage);
        } catch (Exception $exception) {
            DatabaseHelper::rollBack();
            ResponseHelper::flashError('در هنگام ثبت تیپ‌های آماده DISC مشکلی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function createOrganizationDiscPersonalityType(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationDiscPersonalityTypesTableExists();

        $scopeMeta = $this->getDiscScopeMeta();

        $scopeKey = isset($_GET['scope']) ? trim((string) $_GET['scope']) : 'primary';
        if (!array_key_exists($scopeKey, $scopeMeta)) {
            $scopeKey = 'primary';
        }

        $title = 'افزودن تیپ شخصیتی DISC';
        $user = $sessionData['user'];

        $discTypeOptions = $this->getDiscTypeOptionsForScope($scopeKey);

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        $oldInput = $_SESSION['old_input'] ?? [];
        unset($_SESSION['validation_errors'], $_SESSION['old_input']);

        if (empty($oldInput)) {
            $oldInput = ['scope' => $scopeKey];
        }

        if (!array_key_exists('secondary_description', $oldInput)) {
            $oldInput['secondary_description'] = '';
        }

        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/tools/disc/create.php';
    }

    public function storeOrganizationDiscPersonalityType(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationDiscPersonalityTypesTableExists();

        $scopeMeta = $this->getDiscScopeMeta();

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/tools/disc-settings'));
        }

        $scopeKey = isset($_POST['scope']) ? trim((string) $_POST['scope']) : 'primary';
        if (!array_key_exists($scopeKey, $scopeMeta)) {
            $scopeKey = 'primary';
        }

        $redirectCreate = UtilityHelper::baseUrl('organizations/tools/disc-settings/create?scope=' . urlencode($scopeKey));
        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/disc-settings?scope=' . urlencode($scopeKey));

        $input = [
            'scope' => $scopeKey,
            'disc_type_code' => $this->normalizeDiscTypeCode((string) ($_POST['disc_type'] ?? '')),
            'short_description' => trim((string) ($_POST['short_description'] ?? '')),
            'general_tendencies' => trim((string) ($_POST['general_tendencies'] ?? '')),
            'work_preferences' => trim((string) ($_POST['work_preferences'] ?? '')),
            'effectiveness_requirements' => trim((string) ($_POST['effectiveness_requirements'] ?? '')),
            'companion_requirements' => trim((string) ($_POST['companion_requirements'] ?? '')),
            'behavior_overview' => trim((string) ($_POST['behavior_overview'] ?? '')),
            'secondary_description' => trim((string) ($_POST['secondary_description'] ?? '')),
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if (!$this->isValidDiscTypeCodeForScope($scopeKey, $input['disc_type_code'])) {
            $validationErrors['disc_type'] = 'انتخاب نوع DISC الزامی است.';
        }

        if ($scopeKey === 'secondary') {
            if ($input['secondary_description'] === '') {
                $validationErrors['secondary_description'] = 'توضیحات تیپ ثانویه الزامی است.';
            }
        } else {
            foreach (['short_description', 'general_tendencies', 'work_preferences', 'effectiveness_requirements', 'companion_requirements', 'behavior_overview'] as $field) {
                if ($input[$field] === '') {
                    $validationErrors[$field] = 'تکمیل این فیلد الزامی است.';
                }
            }
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        if ($organizationId <= 0) {
            ResponseHelper::flashError('شناسه سازمان نامعتبر است.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $duplicate = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_disc_personality_types WHERE organization_id = :organization_id AND scope = :scope AND disc_type_code = :disc_type_code LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'scope' => $scopeKey,
                    'disc_type_code' => $input['disc_type_code'],
                ]
            );
        } catch (Exception $exception) {
            $duplicate = null;
        }

        if ($duplicate) {
            $_SESSION['validation_errors'] = ['disc_type' => 'این نوع DISC برای این بخش قبلاً ثبت شده است.'];
            ResponseHelper::flashError('این تیپ در این بخش تکراری است.');
            UtilityHelper::redirect($redirectCreate);
        }

        $discTypeLabel = $this->getDiscTypeLabel($input['disc_type_code']);

        $recordPayload = $scopeKey === 'secondary'
            ? [
                'short_description' => $this->buildSecondaryShortSummary($input['secondary_description']),
                'general_tendencies' => $input['secondary_description'],
                'work_preferences' => $input['secondary_description'],
                'effectiveness_requirements' => $input['secondary_description'],
                'companion_requirements' => $input['secondary_description'],
                'behavior_overview' => $input['secondary_description'],
            ]
            : [
                'short_description' => $input['short_description'],
                'general_tendencies' => $input['general_tendencies'],
                'work_preferences' => $input['work_preferences'],
                'effectiveness_requirements' => $input['effectiveness_requirements'],
                'companion_requirements' => $input['companion_requirements'],
                'behavior_overview' => $input['behavior_overview'],
            ];

        try {
            DatabaseHelper::insert(
                'organization_disc_personality_types',
                array_merge(
                    [
                        'organization_id' => $organizationId,
                        'scope' => $scopeKey,
                        'disc_type_code' => $input['disc_type_code'],
                        'disc_type_label' => $discTypeLabel,
                        'created_by' => $userIdentifier,
                        'updated_by' => $userIdentifier,
                    ],
                    $recordPayload
                )
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('تیپ شخصیتی DISC با موفقیت ثبت شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام ذخیره تیپ DISC مشکلی رخ داد.');
            UtilityHelper::redirect($redirectCreate);
        }
    }

    public function editOrganizationDiscPersonalityType(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationDiscPersonalityTypesTableExists();

        $scopeMeta = $this->getDiscScopeMeta();
        $discTypeOptions = $this->getDiscTypeOptions();

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $typeId = isset($_GET['id']) ? (int) $_GET['id'] : 0;

        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/disc-settings');

        if ($typeId <= 0 || $organizationId <= 0) {
            ResponseHelper::flashError('شناسه تیپ شخصیتی معتبر نیست.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $discTypeRecord = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_disc_personality_types WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $typeId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $discTypeRecord = null;
        }

        if (!$discTypeRecord) {
            ResponseHelper::flashError('تیپ شخصیتی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $scopeKey = (string) ($discTypeRecord['scope'] ?? 'primary');
        if (!array_key_exists($scopeKey, $scopeMeta)) {
            $scopeKey = 'primary';
        }

        $discTypeOptions = $this->getDiscTypeOptionsForScope($scopeKey);

        $discTypeRecord['id'] = $typeId;
        $discTypeRecord['secondary_description'] = (string) ($discTypeRecord['behavior_overview'] ?? '');

        $title = 'ویرایش تیپ شخصیتی DISC';

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        $oldInput = $_SESSION['old_input'] ?? [];
        unset($_SESSION['validation_errors'], $_SESSION['old_input']);

        if (empty($oldInput)) {
            $oldInput = [
                'scope' => $scopeKey,
                'disc_type_code' => (string) ($discTypeRecord['disc_type_code'] ?? ''),
                'short_description' => (string) ($discTypeRecord['short_description'] ?? ''),
                'general_tendencies' => (string) ($discTypeRecord['general_tendencies'] ?? ''),
                'work_preferences' => (string) ($discTypeRecord['work_preferences'] ?? ''),
                'effectiveness_requirements' => (string) ($discTypeRecord['effectiveness_requirements'] ?? ''),
                'companion_requirements' => (string) ($discTypeRecord['companion_requirements'] ?? ''),
                'behavior_overview' => (string) ($discTypeRecord['behavior_overview'] ?? ''),
                'secondary_description' => (string) ($discTypeRecord['behavior_overview'] ?? ''),
            ];
        }

        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/tools/disc/edit.php';
    }

    public function updateOrganizationDiscPersonalityType(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationDiscPersonalityTypesTableExists();

        $scopeMeta = $this->getDiscScopeMeta();

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/tools/disc-settings'));
        }

        $typeId = isset($_POST['id']) ? (int) $_POST['id'] : 0;

        $scopeKey = isset($_POST['scope']) ? trim((string) $_POST['scope']) : 'primary';
        if (!array_key_exists($scopeKey, $scopeMeta)) {
            $scopeKey = 'primary';
        }

        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/disc-settings?scope=' . urlencode($scopeKey));
        $redirectEdit = UtilityHelper::baseUrl('organizations/tools/disc-settings/edit?id=' . urlencode((string) $typeId));

        if ($typeId <= 0) {
            ResponseHelper::flashError('شناسه تیپ شخصیتی معتبر نیست.');
            UtilityHelper::redirect($redirectIndex);
        }

        $input = [
            'scope' => $scopeKey,
            'disc_type_code' => $this->normalizeDiscTypeCode((string) ($_POST['disc_type'] ?? '')),
            'short_description' => trim((string) ($_POST['short_description'] ?? '')),
            'general_tendencies' => trim((string) ($_POST['general_tendencies'] ?? '')),
            'work_preferences' => trim((string) ($_POST['work_preferences'] ?? '')),
            'effectiveness_requirements' => trim((string) ($_POST['effectiveness_requirements'] ?? '')),
            'companion_requirements' => trim((string) ($_POST['companion_requirements'] ?? '')),
            'behavior_overview' => trim((string) ($_POST['behavior_overview'] ?? '')),
            'secondary_description' => trim((string) ($_POST['secondary_description'] ?? '')),
        ];

        $_SESSION['old_input'] = $input;
        $_SESSION['old_input']['id'] = $typeId;

        $validationErrors = [];

        if (!$this->isValidDiscTypeCodeForScope($scopeKey, $input['disc_type_code'])) {
            $validationErrors['disc_type'] = 'انتخاب نوع DISC الزامی است.';
        }

        if ($scopeKey === 'secondary') {
            if ($input['secondary_description'] === '') {
                $validationErrors['secondary_description'] = 'توضیحات تیپ ثانویه الزامی است.';
            }
        } else {
            foreach (['short_description', 'general_tendencies', 'work_preferences', 'effectiveness_requirements', 'companion_requirements', 'behavior_overview'] as $field) {
                if ($input[$field] === '') {
                    $validationErrors[$field] = 'تکمیل این فیلد الزامی است.';
                }
            }
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        if ($organizationId <= 0) {
            ResponseHelper::flashError('شناسه سازمان معتبر نیست.');
            UtilityHelper::redirect($redirectEdit);
        }

        try {
            $existingRecord = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_disc_personality_types WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $typeId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $existingRecord = null;
        }

        if (!$existingRecord) {
            ResponseHelper::flashError('تیپ شخصیتی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $duplicate = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_disc_personality_types WHERE organization_id = :organization_id AND scope = :scope AND disc_type_code = :disc_type_code AND id <> :id LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'scope' => $scopeKey,
                    'disc_type_code' => $input['disc_type_code'],
                    'id' => $typeId,
                ]
            );
        } catch (Exception $exception) {
            $duplicate = null;
        }

        if ($duplicate) {
            $_SESSION['validation_errors'] = ['disc_type' => 'این نوع DISC برای این بخش قبلاً ثبت شده است.'];
            ResponseHelper::flashError('این تیپ در این بخش تکراری است.');
            UtilityHelper::redirect($redirectEdit);
        }

        $discTypeLabel = $this->getDiscTypeLabel($input['disc_type_code']);

        $recordPayload = $scopeKey === 'secondary'
            ? [
                'short_description' => $this->buildSecondaryShortSummary($input['secondary_description']),
                'general_tendencies' => $input['secondary_description'],
                'work_preferences' => $input['secondary_description'],
                'effectiveness_requirements' => $input['secondary_description'],
                'companion_requirements' => $input['secondary_description'],
                'behavior_overview' => $input['secondary_description'],
            ]
            : [
                'short_description' => $input['short_description'],
                'general_tendencies' => $input['general_tendencies'],
                'work_preferences' => $input['work_preferences'],
                'effectiveness_requirements' => $input['effectiveness_requirements'],
                'companion_requirements' => $input['companion_requirements'],
                'behavior_overview' => $input['behavior_overview'],
            ];

        try {
            DatabaseHelper::update(
                'organization_disc_personality_types',
                [
                    'scope' => $scopeKey,
                    'disc_type_code' => $input['disc_type_code'],
                    'disc_type_label' => $discTypeLabel,
                    'updated_by' => $userIdentifier,
                ],
                $recordPayload,
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $typeId,
                    'organization_id' => $organizationId,
                ]
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('تیپ شخصیتی DISC با موفقیت به‌روزرسانی شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام به‌روزرسانی تیپ DISC مشکلی رخ داد.');
            UtilityHelper::redirect($redirectEdit);
        }
    }

    public function deleteOrganizationDiscPersonalityType(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationDiscPersonalityTypesTableExists();

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/tools/disc-settings'));
        }

        $typeId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        $scopeKey = isset($_POST['scope']) ? trim((string) $_POST['scope']) : 'primary';

        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/disc-settings?scope=' . urlencode($scopeKey));

        if ($typeId <= 0) {
            ResponseHelper::flashError('شناسه تیپ شخصیتی معتبر نیست.');
            UtilityHelper::redirect($redirectIndex);
        }

        $organization = $sessionData['organization'];
        $organizationId = (int) ($organization['id'] ?? 0);

        if ($organizationId <= 0) {
            ResponseHelper::flashError('شناسه سازمان معتبر نیست.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $deleted = DatabaseHelper::delete(
                'organization_disc_personality_types',
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $typeId,
                    'organization_id' => $organizationId,
                ]
            );

            if ($deleted > 0) {
                ResponseHelper::flashSuccess('تیپ شخصیتی DISC حذف شد.');
            } else {
                ResponseHelper::flashError('تیپ شخصیتی مورد نظر یافت نشد یا قبلاً حذف شده است.');
            }
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام حذف تیپ DISC مشکلی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function organizationToolsNeoSettings(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationNeoTraitsTableExists();

        $title = 'تنظیمات آزمون NEO';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $neoTraits = [];
        try {
            $neoTraits = DatabaseHelper::fetchAll(
                'SELECT * FROM organization_neo_personality_traits WHERE organization_id = :organization_id ORDER BY trait_code ASC, id ASC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $neoTraits = [];
        }

        $traitOptions = $this->getNeoTraitOptions();

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/tools/neo/index.php';
    }

    public function createOrganizationNeoTrait(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationNeoTraitsTableExists();

        $title = 'افزودن تیپ شخصیتی NEO';
        $user = $sessionData['user'];

        $traitOptions = $this->getNeoTraitOptions();

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        $oldInput = $_SESSION['old_input'] ?? [];
        unset($_SESSION['validation_errors'], $_SESSION['old_input']);

        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/tools/neo/create.php';
    }

    public function storeOrganizationNeoTrait(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationNeoTraitsTableExists();

        $redirectCreate = UtilityHelper::baseUrl('organizations/tools/neo-settings/create');
        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/neo-settings');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $input = [
            'trait_code' => $this->normalizeNeoTraitCode((string) ($_POST['trait_code'] ?? '')),
            'short_description' => trim((string) ($_POST['short_description'] ?? '')),
            'key_drivers' => trim((string) ($_POST['key_drivers'] ?? '')),
            'communication_style' => trim((string) ($_POST['communication_style'] ?? '')),
            'development_focus' => trim((string) ($_POST['development_focus'] ?? '')),
            'stress_signals' => trim((string) ($_POST['stress_signals'] ?? '')),
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($input['trait_code'] === '') {
            $validationErrors['trait_code'] = 'انتخاب تیپ شخصیتی الزامی است.';
        }

        foreach (['short_description', 'key_drivers', 'communication_style', 'development_focus', 'stress_signals'] as $field) {
            if ($input[$field] === '') {
                $validationErrors[$field] = 'تکمیل این فیلد الزامی است.';
            }
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        if ($organizationId <= 0) {
            ResponseHelper::flashError('شناسه سازمان نامعتبر است.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $duplicate = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_neo_personality_traits WHERE organization_id = :organization_id AND trait_code = :trait_code LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'trait_code' => $input['trait_code'],
                ]
            );
        } catch (Exception $exception) {
            $duplicate = null;
        }

        if ($duplicate) {
            $_SESSION['validation_errors'] = ['trait_code' => 'این تیپ برای سازمان شما قبلاً ثبت شده است.'];
            ResponseHelper::flashError('این تیپ تکراری است.');
            UtilityHelper::redirect($redirectCreate);
        }

        $traitLabel = $this->getNeoTraitLabel($input['trait_code']);

        try {
            DatabaseHelper::insert(
                'organization_neo_personality_traits',
                [
                    'organization_id' => $organizationId,
                    'trait_code' => $input['trait_code'],
                    'trait_label' => $traitLabel,
                    'short_description' => $input['short_description'],
                    'key_drivers' => $input['key_drivers'],
                    'communication_style' => $input['communication_style'],
                    'development_focus' => $input['development_focus'],
                    'stress_signals' => $input['stress_signals'],
                    'created_by' => $userIdentifier,
                    'updated_by' => $userIdentifier,
                ]
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('تیپ شخصیتی NEO با موفقیت ثبت شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام ذخیره تیپ NEO مشکلی رخ داد.');
            UtilityHelper::redirect($redirectCreate);
        }
    }

    public function editOrganizationNeoTrait(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationNeoTraitsTableExists();

        $title = 'ویرایش تیپ شخصیتی NEO';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $traitId = isset($_GET['id']) ? (int) $_GET['id'] : 0;

        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/neo-settings');

        if ($traitId <= 0 || $organizationId <= 0) {
            ResponseHelper::flashError('شناسه تیپ شخصیتی معتبر نیست.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $neoTrait = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_neo_personality_traits WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $traitId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $neoTrait = null;
        }

        if (!$neoTrait) {
            ResponseHelper::flashError('تیپ شخصیتی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $traitOptions = $this->getNeoTraitOptions();

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        $oldInput = $_SESSION['old_input'] ?? [];
        unset($_SESSION['validation_errors'], $_SESSION['old_input']);

        if (!empty($oldInput)) {
            $neoTrait = array_merge($neoTrait, $oldInput);
        }

        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/tools/neo/edit.php';
    }

    public function updateOrganizationNeoTrait(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationNeoTraitsTableExists();

        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/neo-settings');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $traitId = isset($_POST['id']) ? (int) $_POST['id'] : 0;

        if ($traitId <= 0) {
            ResponseHelper::flashError('شناسه تیپ شخصیتی معتبر نیست.');
            UtilityHelper::redirect($redirectIndex);
        }

        $input = [
            'trait_code' => $this->normalizeNeoTraitCode((string) ($_POST['trait_code'] ?? '')),
            'short_description' => trim((string) ($_POST['short_description'] ?? '')),
            'key_drivers' => trim((string) ($_POST['key_drivers'] ?? '')),
            'communication_style' => trim((string) ($_POST['communication_style'] ?? '')),
            'development_focus' => trim((string) ($_POST['development_focus'] ?? '')),
            'stress_signals' => trim((string) ($_POST['stress_signals'] ?? '')),
        ];

        $_SESSION['old_input'] = $input;
        $_SESSION['old_input']['id'] = $traitId;

        $validationErrors = [];

        if ($input['trait_code'] === '') {
            $validationErrors['trait_code'] = 'انتخاب تیپ شخصیتی الزامی است.';
        }

        foreach (['short_description', 'key_drivers', 'communication_style', 'development_focus', 'stress_signals'] as $field) {
            if ($input[$field] === '') {
                $validationErrors[$field] = 'تکمیل این فیلد الزامی است.';
            }
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/tools/neo-settings/edit?id=' . urlencode((string) $traitId)));
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        if ($organizationId <= 0) {
            ResponseHelper::flashError('شناسه سازمان نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $existingRecord = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_neo_personality_traits WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $traitId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $existingRecord = null;
        }

        if (!$existingRecord) {
            ResponseHelper::flashError('تیپ شخصیتی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $duplicate = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_neo_personality_traits WHERE organization_id = :organization_id AND trait_code = :trait_code AND id <> :id LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'trait_code' => $input['trait_code'],
                    'id' => $traitId,
                ]
            );
        } catch (Exception $exception) {
            $duplicate = null;
        }

        if ($duplicate) {
            $_SESSION['validation_errors'] = ['trait_code' => 'این تیپ برای سازمان شما قبلاً ثبت شده است.'];
            ResponseHelper::flashError('این تیپ تکراری است.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/tools/neo-settings/edit?id=' . urlencode((string) $traitId)));
        }

        $traitLabel = $this->getNeoTraitLabel($input['trait_code']);

        try {
            DatabaseHelper::update(
                'organization_neo_personality_traits',
                [
                    'trait_code' => $input['trait_code'],
                    'trait_label' => $traitLabel,
                    'short_description' => $input['short_description'],
                    'key_drivers' => $input['key_drivers'],
                    'communication_style' => $input['communication_style'],
                    'development_focus' => $input['development_focus'],
                    'stress_signals' => $input['stress_signals'],
                    'updated_by' => $userIdentifier,
                ],
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $traitId,
                    'organization_id' => $organizationId,
                ]
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('تیپ شخصیتی NEO با موفقیت به‌روزرسانی شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام به‌روزرسانی تیپ NEO مشکلی رخ داد.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/tools/neo-settings/edit?id=' . urlencode((string) $traitId)));
        }
    }

    public function deleteOrganizationNeoTrait(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationNeoTraitsTableExists();

        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/neo-settings');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $traitId = isset($_POST['id']) ? (int) $_POST['id'] : 0;

        if ($traitId <= 0) {
            ResponseHelper::flashError('شناسه تیپ شخصیتی معتبر نیست.');
            UtilityHelper::redirect($redirectIndex);
        }

        $organization = $sessionData['organization'];
        $organizationId = (int) ($organization['id'] ?? 0);

        if ($organizationId <= 0) {
            ResponseHelper::flashError('شناسه سازمان نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $deleted = DatabaseHelper::delete(
                'organization_neo_personality_traits',
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $traitId,
                    'organization_id' => $organizationId,
                ]
            );

            if ($deleted > 0) {
                ResponseHelper::flashSuccess('تیپ شخصیتی NEO حذف شد.');
            } else {
                ResponseHelper::flashError('تیپ شخصیتی مورد نظر یافت نشد یا قبلاً حذف شده است.');
            }
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام حذف تیپ NEO مشکلی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function seedOrganizationNeoTraits(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationNeoTraitsTableExists();

        $redirectIndex = UtilityHelper::baseUrl('organizations/tools/neo-settings');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        if ($organizationId <= 0) {
            ResponseHelper::flashError('شناسه سازمان نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $presetData = $this->getNeoPresetSeedData();
        if (empty($presetData)) {
            ResponseHelper::flashError('داده‌های پیش‌فرض برای تیپ‌های NEO در دسترس نیست.');
            UtilityHelper::redirect($redirectIndex);
        }

        $createdCount = 0;
        $updatedCount = 0;

        try {
            DatabaseHelper::beginTransaction();

            foreach ($presetData as $preset) {
                $traitCode = $this->normalizeNeoTraitCode((string) ($preset['trait_code'] ?? ''));
                if ($traitCode === '') {
                    continue;
                }

                $traitLabel = $this->getNeoTraitLabel($traitCode);

                $payload = [
                    'short_description' => trim((string) ($preset['short_description'] ?? '')), 
                    'key_drivers' => trim((string) ($preset['key_drivers'] ?? '')), 
                    'communication_style' => trim((string) ($preset['communication_style'] ?? '')), 
                    'development_focus' => trim((string) ($preset['development_focus'] ?? '')), 
                    'stress_signals' => trim((string) ($preset['stress_signals'] ?? '')), 
                ];

                $allFilled = array_reduce($payload, static function ($carry, $value) {
                    return $carry && $value !== '';
                }, true);

                if (!$allFilled) {
                    continue;
                }

                try {
                    $existing = DatabaseHelper::fetchOne(
                        'SELECT id FROM organization_neo_personality_traits WHERE organization_id = :organization_id AND trait_code = :trait_code LIMIT 1',
                        [
                            'organization_id' => $organizationId,
                            'trait_code' => $traitCode,
                        ]
                    );
                } catch (Exception $exception) {
                    $existing = null;
                }

                if ($existing) {
                    DatabaseHelper::update(
                        'organization_neo_personality_traits',
                        array_merge(
                            [
                                'trait_code' => $traitCode,
                                'trait_label' => $traitLabel,
                                'updated_by' => $userIdentifier,
                            ],
                            $payload
                        ),
                        'id = :id AND organization_id = :organization_id',
                        [
                            'id' => (int) $existing['id'],
                            'organization_id' => $organizationId,
                        ]
                    );
                    $updatedCount++;
                    continue;
                }

                DatabaseHelper::insert(
                    'organization_neo_personality_traits',
                    array_merge(
                        [
                            'organization_id' => $organizationId,
                            'trait_code' => $traitCode,
                            'trait_label' => $traitLabel,
                            'created_by' => $userIdentifier,
                            'updated_by' => $userIdentifier,
                        ],
                        $payload
                    )
                );
                $createdCount++;
            }

            DatabaseHelper::commit();

            $successMessage = 'تیپ‌های آماده NEO با موفقیت ثبت شدند.';
            $successMessage .= ' (' . UtilityHelper::englishToPersian((string) $createdCount) . ' مورد جدید، ' . UtilityHelper::englishToPersian((string) $updatedCount) . ' مورد به‌روزرسانی)';
            ResponseHelper::flashSuccess($successMessage);
        } catch (Exception $exception) {
            DatabaseHelper::rollBack();
            ResponseHelper::flashError('در هنگام ثبت تیپ‌های آماده NEO مشکلی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function organizationRoles(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationRolesTableExists();
        $this->ensureOrganizationUsersTableExists();

        $title = 'مدیریت نقش‌ها';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $organizationRoles = [];
        $roleUserCounts = [];

        try {
            $organizationRoles = DatabaseHelper::fetchAll(
                'SELECT * FROM organization_roles WHERE organization_id = :organization_id ORDER BY created_at DESC',
                ['organization_id' => $organizationId]
            );

            $roleCounts = DatabaseHelper::fetchAll(
                'SELECT organization_role_id, COUNT(*) AS total FROM organization_users WHERE organization_id = :organization_id AND organization_role_id IS NOT NULL GROUP BY organization_role_id',
                ['organization_id' => $organizationId]
            );

            foreach ($roleCounts as $row) {
                $roleId = (int) ($row['organization_role_id'] ?? 0);
                $roleUserCounts[$roleId] = (int) ($row['total'] ?? 0);
            }
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی نقش‌ها مشکلی رخ داد.');
        }

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/roles/index.php';
    }

    public function createOrganizationRole(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationRolesTableExists();
        $this->ensureOrganizationUsersTableExists();

        $title = 'ایجاد نقش جدید';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/roles/create.php';
    }

    public function storeOrganizationRole(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationRolesTableExists();
        $this->ensureOrganizationUsersTableExists();

        $redirectCreate = UtilityHelper::baseUrl('organizations/roles/create');
        $redirectIndex = UtilityHelper::baseUrl('organizations/roles');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $input = [
            'name' => trim((string) ($_POST['name'] ?? '')),
            'description' => trim((string) ($_POST['description'] ?? '')),
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($input['name'] === '') {
            $validationErrors['name'] = 'نام نقش الزامی است.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان ثبت نقش در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $duplicate = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_roles WHERE organization_id = :organization_id AND name = :name LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'name' => $input['name'],
                ]
            );

            if ($duplicate) {
                $_SESSION['validation_errors'] = ['name' => 'این نام نقش قبلاً ثبت شده است.'];
                ResponseHelper::flashError('نام نقش تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectCreate);
            }

            DatabaseHelper::insert('organization_roles', [
                'organization_id' => $organizationId,
                'user_id' => $userIdentifier,
                'name' => $input['name'],
                'description' => $input['description'] !== '' ? $input['description'] : null,
            ]);

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('نقش جدید با موفقیت ایجاد شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام ذخیره نقش خطایی رخ داد.');
            UtilityHelper::redirect($redirectCreate);
        }
    }

    public function editOrganizationRole(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationRolesTableExists();
        $this->ensureOrganizationUsersTableExists();

        $title = 'ویرایش نقش';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $roleId = isset($_GET['id']) ? (int) $_GET['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/roles');

        if ($roleId <= 0) {
            ResponseHelper::flashError('شناسه نقش نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $organizationRole = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_roles WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $roleId,
                    'organization_id' => (int) ($organization['id'] ?? 0),
                ]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی اطلاعات نقش مشکلی رخ داد.');
            UtilityHelper::redirect($redirectIndex);
        }

        if (!$organizationRole) {
            ResponseHelper::flashError('نقش مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');
        $successMessage = flash('success');

        include __DIR__ . '/../Views/organizations/roles/edit.php';
    }

    public function updateOrganizationRole(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationRolesTableExists();
        $this->ensureOrganizationUsersTableExists();

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        $roleId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/roles');
        $redirectEdit = UtilityHelper::baseUrl('organizations/roles/edit?id=' . $roleId);

        if ($roleId <= 0) {
            ResponseHelper::flashError('شناسه نقش نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $input = [
            'name' => trim((string) ($_POST['name'] ?? '')),
            'description' => trim((string) ($_POST['description'] ?? '')),
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($input['name'] === '') {
            $validationErrors['name'] = 'نام نقش الزامی است.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان به‌روزرسانی نقش در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $exists = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_roles WHERE organization_id = :organization_id AND name = :name AND id <> :id LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'name' => $input['name'],
                    'id' => $roleId,
                ]
            );

            if ($exists) {
                $_SESSION['validation_errors'] = ['name' => 'این نام نقش قبلاً ثبت شده است.'];
                ResponseHelper::flashError('نام نقش تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectEdit);
            }

            DatabaseHelper::update(
                'organization_roles',
                [
                    'name' => $input['name'],
                    'description' => $input['description'] !== '' ? $input['description'] : null,
                    'user_id' => $userIdentifier,
                ],
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $roleId,
                    'organization_id' => $organizationId,
                ]
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('نقش با موفقیت به‌روزرسانی شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در به‌روزرسانی نقش خطایی رخ داد.');
            UtilityHelper::redirect($redirectEdit);
        }
    }

    public function deleteOrganizationRole(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationRolesTableExists();
        $this->ensureOrganizationUsersTableExists();

        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $redirectIndex = UtilityHelper::baseUrl('organizations/roles');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $roleId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        if ($roleId <= 0) {
            ResponseHelper::flashError('شناسه نقش نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            DatabaseHelper::update(
                'organization_users',
                ['organization_role_id' => null],
                'organization_id = :organization_id AND organization_role_id = :role_id',
                [
                    'organization_id' => $organizationId,
                    'role_id' => $roleId,
                ]
            );

            $deleted = DatabaseHelper::delete(
                'organization_roles',
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $roleId,
                    'organization_id' => $organizationId,
                ]
            );

            if ($deleted > 0) {
                ResponseHelper::flashSuccess('نقش با موفقیت حذف شد.');
            } else {
                ResponseHelper::flashError('نقش مورد نظر یافت نشد یا قبلاً حذف شده است.');
            }
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام حذف نقش خطایی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function organizationRoleAccessMatrix(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationRolesTableExists();
        $this->ensureOrganizationRolePermissionsTableExists();

        $title = 'ماتریس نقش دسترسی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        $roleDefinitions = $this->getDefaultMatrixRoleNames();
        $this->ensureOrganizationDefaultRoles($organizationId, $userIdentifier, $roleDefinitions);

        $permissionDefinitions = $this->getRoleAccessMatrixDefinitions();

        $roles = [];
        try {
            $roles = DatabaseHelper::fetchAll(
                'SELECT id, name FROM organization_roles WHERE organization_id = :organization_id ORDER BY id ASC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $roles = [];
        }

        $this->ensureRolePermissionRecords($organizationId, $roles, $permissionDefinitions);

        $matrixAssignments = [];
        try {
            $existingAssignments = DatabaseHelper::fetchAll(
                'SELECT permission_key, organization_role_id, is_allowed FROM organization_role_permissions WHERE organization_id = :organization_id',
                ['organization_id' => $organizationId]
            );

            foreach ($existingAssignments as $assignment) {
                $permissionKey = (string) ($assignment['permission_key'] ?? '');
                $roleId = (int) ($assignment['organization_role_id'] ?? 0);
                $isAllowed = (int) ($assignment['is_allowed'] ?? 0);

                if ($permissionKey !== '' && $roleId > 0) {
                    $matrixAssignments[$permissionKey][$roleId] = $isAllowed;
                }
            }
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی اطلاعات ماتریس نقش مشکلی رخ داد.');
        }

    $successMessage = flash('success');
    $errorMessage = flash('error');

    include __DIR__ . '/../Views/organizations/role-matrix/index.php';
    }

    public function organizationUserRoleMatrix(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationUsersTableExists();
        $this->ensureOrganizationRolesTableExists();

        $title = 'ماتریس نقش کاربران';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        $roleDefinitions = $this->getDefaultMatrixRoleNames();
        $this->ensureOrganizationDefaultRoles($organizationId, $userIdentifier, $roleDefinitions);

        $roles = [];
        $organizationUsers = [];
        $loadErrors = [];

        try {
            $roles = DatabaseHelper::fetchAll(
                'SELECT id, name FROM organization_roles WHERE organization_id = :organization_id ORDER BY id ASC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $roles = [];
            $loadErrors[] = 'در بازیابی نقش‌ها مشکلی رخ داد.';
        }

        try {
            $organizationUsers = DatabaseHelper::fetchAll(
                'SELECT id, username, first_name, last_name, organization_role_id, is_active FROM organization_users WHERE organization_id = :organization_id ORDER BY first_name ASC, last_name ASC, username ASC',
                ['organization_id' => $organizationId]
            );

            foreach ($organizationUsers as &$organizationUser) {
                $organizationUser['id'] = (int) ($organizationUser['id'] ?? 0);
                $organizationUser['organization_role_id'] = isset($organizationUser['organization_role_id']) ? (int) $organizationUser['organization_role_id'] : null;
                $organizationUser['is_active'] = (int) ($organizationUser['is_active'] ?? 0);
                $organizationUser['username'] = (string) ($organizationUser['username'] ?? '');
                $organizationUser['first_name'] = trim((string) ($organizationUser['first_name'] ?? ''));
                $organizationUser['last_name'] = trim((string) ($organizationUser['last_name'] ?? ''));
            }
            unset($organizationUser);
        } catch (Exception $exception) {
            $organizationUsers = [];
            $loadErrors[] = 'در بازیابی کاربران سازمان مشکلی رخ داد.';
        }

        $successMessage = flash('success');
        $errorMessage = flash('error');

        if (!empty($loadErrors)) {
            $combined = implode(' ', $loadErrors);
            $errorMessage = $errorMessage ? ($errorMessage . ' ' . $combined) : $combined;
        }

        include __DIR__ . '/../Views/organizations/users/role-matrix.php';
    }

    public function updateOrganizationUserRoleMatrix(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationUsersTableExists();
        $this->ensureOrganizationRolesTableExists();

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        $redirectIndex = UtilityHelper::baseUrl('organizations/users/role-matrix');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        if ($organizationId <= 0) {
            ResponseHelper::flashError('دسترسی به سازمان معتبر نیست.');
            UtilityHelper::redirect($redirectIndex);
        }

        $roleDefinitions = $this->getDefaultMatrixRoleNames();
        $this->ensureOrganizationDefaultRoles($organizationId, $userIdentifier, $roleDefinitions);

        $roles = [];
        try {
            $roles = DatabaseHelper::fetchAll(
                'SELECT id FROM organization_roles WHERE organization_id = :organization_id',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی نقش‌ها مشکلی رخ داد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $validRoleIds = array_map(static function ($role) {
            return (int) ($role['id'] ?? 0);
        }, $roles);

        $submittedRoles = $_POST['user_roles'] ?? [];
        if (!is_array($submittedRoles)) {
            $submittedRoles = [];
        }

        try {
            DatabaseHelper::beginTransaction();

            $users = DatabaseHelper::fetchAll(
                'SELECT id FROM organization_users WHERE organization_id = :organization_id',
                ['organization_id' => $organizationId]
            );

            foreach ($users as $userRecord) {
                $userId = (int) ($userRecord['id'] ?? 0);
                if ($userId <= 0) {
                    continue;
                }

                $submittedValue = $submittedRoles[$userId] ?? '';
                $roleId = is_numeric($submittedValue) ? (int) $submittedValue : 0;

                if ($submittedValue === '' || $submittedValue === null || $roleId <= 0) {
                    $newRoleId = null;
                } else {
                    if (!in_array($roleId, $validRoleIds, true)) {
                        $newRoleId = null;
                    } else {
                        $newRoleId = $roleId;
                    }
                }

                DatabaseHelper::update(
                    'organization_users',
                    ['organization_role_id' => $newRoleId],
                    'id = :id AND organization_id = :organization_id',
                    [
                        'id' => $userId,
                        'organization_id' => $organizationId,
                    ]
                );
            }

            DatabaseHelper::commit();
            ResponseHelper::flashSuccess('نقش کاربران با موفقیت به‌روزرسانی شد.');
        } catch (Exception $exception) {
            DatabaseHelper::rollback();
            ResponseHelper::flashError('در به‌روزرسانی نقش کاربران مشکلی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function organizationEvaluationCalendar(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationSchedulesTableExists();

        $title = 'تقویم ارزشیابی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        $this->seedOrganizationEvaluationSchedules($organizationId, $userIdentifier);

        $timezone = new DateTimeZone('Asia/Tehran');
        $calendarLocale = 'fa_IR@calendar=persian';

        $today = new DateTime('now', $timezone);

        $currentYear = null;
        $currentMonth = null;
        $currentDay = null;

        $currentFormatter = new IntlDateFormatter(
            $calendarLocale,
            IntlDateFormatter::FULL,
            IntlDateFormatter::NONE,
            $timezone,
            IntlDateFormatter::TRADITIONAL,
            'yyyy-MM-dd'
        );

        if ($currentFormatter !== false) {
            $currentFormatted = $currentFormatter->format($today);
            if ($currentFormatted !== false) {
                $currentFormatted = UtilityHelper::persianToEnglish($currentFormatted);
                $parts = explode('-', $currentFormatted);
                if (count($parts) === 3) {
                    $currentYear = (int) $parts[0];
                    $currentMonth = (int) $parts[1];
                    $currentDay = (int) $parts[2];
                }
            }
        }

        if ($currentYear === null || $currentMonth === null) {
            $todayGregorian = new DateTime('now', $timezone);
            $currentYear = (int) $todayGregorian->format('Y');
            $currentMonth = (int) $todayGregorian->format('n');
            $currentDay = (int) $todayGregorian->format('j');
        }

        $requestedYear = UtilityHelper::persianToEnglish(trim($_GET['year'] ?? ''));
        $requestedMonth = UtilityHelper::persianToEnglish(trim($_GET['month'] ?? ''));

        if ($requestedYear !== '' && strpos($requestedYear, '-') !== false && $requestedMonth === '') {
            $split = explode('-', $requestedYear, 2);
            if (count($split) === 2) {
                $requestedYear = $split[0];
                $requestedMonth = $split[1];
            }
        }

        $displayYear = (int) ($requestedYear !== '' ? $requestedYear : $currentYear);
        $displayMonth = (int) ($requestedMonth !== '' ? $requestedMonth : $currentMonth);

        if ($displayYear < 1300 || $displayYear > 1600) {
            $displayYear = $currentYear;
        }

        if ($displayMonth < 1 || $displayMonth > 12) {
            $displayMonth = $currentMonth;
        }

        $calendar = IntlCalendar::createInstance($timezone, $calendarLocale);
        if ($calendar === null) {
            ResponseHelper::flashError('امکان بارگذاری تقویم وجود ندارد. لطفاً افزونه Intl را فعال کنید.');
            $weeks = [];
            $calendarEvaluationRows = [];
            $calendarMeta = [
                'display_year' => $displayYear,
                'display_month' => $displayMonth,
                'month_label' => '—',
                'current_year' => $currentYear,
                'current_month' => $currentMonth,
                'current_day' => $currentDay,
                'prev_year' => $displayYear,
                'prev_month' => $displayMonth,
                'next_year' => $displayYear,
                'next_month' => $displayMonth,
            ];

            $weekDays = ['شنبه', 'یکشنبه', 'دوشنبه', 'سه‌شنبه', 'چهارشنبه', 'پنجشنبه', 'جمعه'];

            include __DIR__ . '/../Views/organizations/evaluations/calendar.php';
            return;
        }

        $calendar->set($displayYear, $displayMonth - 1, 1);

        $daysInMonth = $calendar->getActualMaximum(IntlCalendar::FIELD_DAY_OF_MONTH);
        $firstDayIndex = $this->mapIntlDayOfWeekToPersianIndex((int) $calendar->get(IntlCalendar::FIELD_DAY_OF_WEEK));

        $monthReference = (clone $calendar);
        $monthTimestamp = (int) round($monthReference->getTime() / 1000);
        $monthDateTime = (new DateTime('@' . $monthTimestamp))->setTimezone($timezone);

        $monthFormatter = new IntlDateFormatter(
            $calendarLocale,
            IntlDateFormatter::FULL,
            IntlDateFormatter::NONE,
            $timezone,
            IntlDateFormatter::TRADITIONAL,
            'MMMM yyyy'
        );

        $monthLabel = $monthFormatter !== false ? $monthFormatter->format($monthDateTime) : null;
        if ($monthLabel === false || $monthLabel === null) {
            $monthNames = ['فروردین', 'اردیبهشت', 'خرداد', 'تیر', 'مرداد', 'شهریور', 'مهر', 'آبان', 'آذر', 'دی', 'بهمن', 'اسفند'];
            $monthLabel = ($monthNames[$displayMonth - 1] ?? '') . ' ' . UtilityHelper::englishToPersian((string) $displayYear);
        } else {
            $monthLabel = UtilityHelper::englishToPersian(UtilityHelper::persianToEnglish($monthLabel));
        }

        $prevCalendar = clone $calendar;
        $prevCalendar->add(IntlCalendar::FIELD_MONTH, -1);
        $prevYear = (int) $prevCalendar->get(IntlCalendar::FIELD_YEAR);
        $prevMonth = (int) $prevCalendar->get(IntlCalendar::FIELD_MONTH) + 1;

        $nextCalendar = clone $calendar;
        $nextCalendar->add(IntlCalendar::FIELD_MONTH, 1);
        $nextYear = (int) $nextCalendar->get(IntlCalendar::FIELD_YEAR);
        $nextMonth = (int) $nextCalendar->get(IntlCalendar::FIELD_MONTH) + 1;

        $events = [];
        try {
            $events = DatabaseHelper::fetchAll(
                'SELECT id, evaluation_title, evaluation_date, status, is_open FROM organization_evaluation_schedules WHERE organization_id = :organization_id ORDER BY evaluation_date ASC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $events = [];
            ResponseHelper::flashError('در بازیابی تقویم ارزشیابی مشکلی رخ داد.');
        }

        $persianNumericFormatter = new IntlDateFormatter(
            $calendarLocale,
            IntlDateFormatter::FULL,
            IntlDateFormatter::NONE,
            $timezone,
            IntlDateFormatter::TRADITIONAL,
            'yyyy-MM-dd'
        );

        $persianDisplayFormatter = new IntlDateFormatter(
            $calendarLocale,
            IntlDateFormatter::FULL,
            IntlDateFormatter::NONE,
            $timezone,
            IntlDateFormatter::TRADITIONAL,
            'EEEE d MMMM yyyy'
        );

        $normalizedEvents = [];
        foreach ($events as $event) {
            $evaluationDate = $event['evaluation_date'] ?? null;
            if (!$evaluationDate) {
                continue;
            }

            try {
                $dateObject = new DateTime($evaluationDate, $timezone);
            } catch (Exception $exception) {
                continue;
            }

            $numericPersian = $persianNumericFormatter !== false ? $persianNumericFormatter->format($dateObject) : false;
            if ($numericPersian === false) {
                continue;
            }

            $numericPersian = UtilityHelper::persianToEnglish($numericPersian);
            $parts = explode('-', $numericPersian);
            if (count($parts) !== 3) {
                continue;
            }

            $persianYear = (int) $parts[0];
            $persianMonth = (int) $parts[1];
            $persianDay = (int) $parts[2];

            $displayDate = $persianDisplayFormatter !== false ? $persianDisplayFormatter->format($dateObject) : $numericPersian;
            if ($displayDate !== false && $displayDate !== null) {
                $displayDate = UtilityHelper::englishToPersian(UtilityHelper::persianToEnglish($displayDate));
            } else {
                $displayDate = UtilityHelper::englishToPersian($numericPersian);
            }

            $normalizedEvents[] = [
                'id' => (int) ($event['id'] ?? 0),
                'title' => trim((string) ($event['evaluation_title'] ?? 'بدون عنوان')),
                'status' => trim((string) ($event['status'] ?? '')),
                'is_open' => (int) ($event['is_open'] ?? 0),
                'evaluation_date' => (string) $dateObject->format('Y-m-d'),
                'persian_year' => $persianYear,
                'persian_month' => $persianMonth,
                'persian_day' => $persianDay,
                'persian_date_key' => sprintf('%04d-%02d-%02d', $persianYear, $persianMonth, $persianDay),
                'persian_date_display' => $displayDate,
                'source' => 'schedule',
            ];
        }

        $eventsByDate = [];
        foreach ($normalizedEvents as $normalizedEvent) {
            $key = $normalizedEvent['persian_date_key'];
            if (!isset($eventsByDate[$key])) {
                $eventsByDate[$key] = [];
            }
            $eventsByDate[$key][] = $normalizedEvent;
        }

        $evaluationRows = [];
        try {
            $evaluationRows = DatabaseHelper::fetchAll(
                'SELECT id, title, evaluation_date, general_model, specific_model, schedule_id
                 FROM organization_evaluations
                 WHERE organization_id = :organization_id
                 ORDER BY (evaluation_date IS NULL) ASC, evaluation_date DESC, id DESC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $evaluationRows = [];
        }

        $calendarEvaluations = [];
        foreach ($evaluationRows as $evaluationRow) {
            $evaluationId = (int) ($evaluationRow['id'] ?? 0);
            if ($evaluationId <= 0) {
                continue;
            }

            $titleValue = trim((string) ($evaluationRow['title'] ?? 'بدون عنوان'));
            $dateMeta = $this->formatEvaluationPersianDate($evaluationRow['evaluation_date'] ?? null);

            $persianDateKey = null;
            $persianYear = null;
            $persianMonth = null;
            $persianDay = null;

            if ($dateMeta['year'] !== null && $dateMeta['month'] !== null && $dateMeta['day'] !== null) {
                $persianYear = (int) $dateMeta['year'];
                $persianMonth = (int) $dateMeta['month'];
                $persianDay = (int) $dateMeta['day'];
                $persianDateKey = sprintf('%04d-%02d-%02d', $persianYear, $persianMonth, $persianDay);

                if (!isset($eventsByDate[$persianDateKey])) {
                    $eventsByDate[$persianDateKey] = [];
                }

                $alreadyExists = false;
                $scheduleId = (int) ($evaluationRow['schedule_id'] ?? 0);

                foreach ($eventsByDate[$persianDateKey] as &$existingEvent) {
                    $source = $existingEvent['source'] ?? null;
                    if ($source === 'evaluation' && (int) ($existingEvent['evaluation_id'] ?? 0) === $evaluationId) {
                        $alreadyExists = true;
                        break;
                    }

                    if ($source === 'schedule' && $scheduleId > 0 && (int) ($existingEvent['id'] ?? 0) === $scheduleId) {
                        $existingEvent['evaluation_id'] = $evaluationId;
                        if (empty($existingEvent['title']) || $existingEvent['title'] === 'بدون عنوان') {
                            $existingEvent['title'] = $titleValue;
                        }
                        $existingEvent['persian_date_display'] = $dateMeta['display'];
                        $alreadyExists = true;
                        break;
                    }
                }
                unset($existingEvent);

                if (!$alreadyExists) {
                    $eventsByDate[$persianDateKey][] = [
                        'id' => 'evaluation-' . $evaluationId,
                        'evaluation_id' => $evaluationId,
                        'title' => $titleValue,
                        'status' => null,
                        'is_open' => 1,
                        'evaluation_date' => $evaluationRow['evaluation_date'] ?? null,
                        'persian_year' => $persianYear,
                        'persian_month' => $persianMonth,
                        'persian_day' => $persianDay,
                        'persian_date_key' => $persianDateKey,
                        'persian_date_display' => $dateMeta['display'],
                        'source' => 'evaluation',
                    ];
                }
            }

            $calendarEvaluations[] = [
                'id' => $evaluationId,
                'title' => $titleValue,
                'evaluation_date' => $evaluationRow['evaluation_date'] ?? null,
                'persian_date_display' => $dateMeta['display'],
                'persian_date_key' => $persianDateKey,
                'persian_year' => $persianYear,
                'persian_month' => $persianMonth,
                'persian_day' => $persianDay,
                'general_model' => trim((string) ($evaluationRow['general_model'] ?? '')),
                'specific_model' => trim((string) ($evaluationRow['specific_model'] ?? '')),
            ];
        }

        usort($calendarEvaluations, static function (array $a, array $b): int {
            $dateA = $a['evaluation_date'] ?? null;
            $dateB = $b['evaluation_date'] ?? null;

            if ($dateA === $dateB) {
                return $b['id'] <=> $a['id'];
            }

            if ($dateA === null) {
                return 1;
            }

            if ($dateB === null) {
                return -1;
            }

            return strcmp($dateB, $dateA);
        });

        $weeks = [];
        $currentWeek = [];

        for ($blank = 0; $blank < $firstDayIndex; $blank++) {
            $currentWeek[] = null;
        }

        for ($day = 1; $day <= $daysInMonth; $day++) {
            $dateKey = sprintf('%04d-%02d-%02d', $displayYear, $displayMonth, $day);
            $eventsForDay = $eventsByDate[$dateKey] ?? [];

            $currentWeek[] = [
                'day' => $day,
                'day_label' => UtilityHelper::englishToPersian((string) $day),
                'date_key' => $dateKey,
                'events_count' => count($eventsForDay),
                'events' => $eventsForDay,
                'is_today' => ($displayYear === $currentYear && $displayMonth === $currentMonth && $day === $currentDay),
            ];

            if (count($currentWeek) === 7) {
                $weeks[] = $currentWeek;
                $currentWeek = [];
            }
        }

        if (!empty($currentWeek)) {
            while (count($currentWeek) < 7) {
                $currentWeek[] = null;
            }
            $weeks[] = $currentWeek;
        }

        $calendarMeta = [
            'display_year' => $displayYear,
            'display_month' => $displayMonth,
            'month_label' => $monthLabel,
            'current_year' => $currentYear,
            'current_month' => $currentMonth,
            'current_day' => $currentDay,
            'prev_year' => $prevYear,
            'prev_month' => $prevMonth,
            'next_year' => $nextYear,
            'next_month' => $nextMonth,
        ];

        $weekDays = ['شنبه', 'یکشنبه', 'دوشنبه', 'سه‌شنبه', 'چهارشنبه', 'پنجشنبه', 'جمعه'];

        $calendarEvaluationRows = $calendarEvaluations;

        include __DIR__ . '/../Views/organizations/evaluations/calendar.php';
    }

    public function organizationActiveEvaluations(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationSchedulesTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationUsersTableExists();

        $title = 'ارزیابی‌های فعال';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $currentOrganizationUserId = (int) ($user['organization_user_id'] ?? 0);
        $accountSourceRaw = (string) ($user['account_source'] ?? '');
        $accountSource = $accountSourceRaw !== '' && function_exists('mb_strtolower')
            ? mb_strtolower($accountSourceRaw, 'UTF-8')
            : strtolower($accountSourceRaw);

        $flags = isset($user['organization_user_flags']) && is_array($user['organization_user_flags'])
            ? $user['organization_user_flags']
            : [];

        $isOwnerAccount = $accountSource === 'organizations';
        $isSystemAdmin = $isOwnerAccount || (int) ($flags['is_system_admin'] ?? 0) === 1;
        $isManager = (int) ($flags['is_manager'] ?? 0) === 1;
        $isEvaluator = (int) ($flags['is_evaluator'] ?? 0) === 1;
        $isEvaluatee = (int) ($flags['is_evaluee'] ?? 0) === 1;

        $roleLabel = $this->resolveOrganizationRoleLabelFromUser($user);
        $displayName = trim((string) ($user['name'] ?? ($user['username'] ?? 'کاربر سازمان')));

        [$evaluationTools, $toolMap, $organizationUsers, $userMap] = $this->loadEvaluationFormReferenceData($organizationId);
        $evaluationModelSuggestions = $this->loadEvaluationModelSuggestions($organizationId);

        $toolDetailsMap = [];
        foreach ($evaluationTools as $tool) {
            $toolId = (int) ($tool['id'] ?? 0);
            if ($toolId <= 0) {
                continue;
            }

            $toolDetailsMap[$toolId] = $tool;
        }

        $rawEvaluations = [];
        try {
            $rawEvaluations = DatabaseHelper::fetchAll(
                'SELECT * FROM organization_evaluations WHERE organization_id = :organization_id ORDER BY (evaluation_date IS NULL) ASC, evaluation_date DESC, id DESC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $rawEvaluations = [];
        }

        $evaluationIds = array_values(array_unique(array_filter(array_map(static function ($row) {
            return (int) ($row['id'] ?? 0);
        }, $rawEvaluations), static function (int $id): bool {
            return $id > 0;
        })));

        $assignmentsByEvaluation = [];
        if (!empty($evaluationIds)) {
            $placeholders = implode(',', array_fill(0, count($evaluationIds), '?'));
            try {
                $assignmentRows = DatabaseHelper::fetchAll(
                    "SELECT evaluation_id, tool_id, sort_order FROM organization_evaluation_tool_assignments WHERE evaluation_id IN ({$placeholders}) ORDER BY sort_order ASC, id ASC",
                    $evaluationIds
                );

                foreach ($assignmentRows as $assignmentRow) {
                    $evaluationId = (int) ($assignmentRow['evaluation_id'] ?? 0);
                    if ($evaluationId <= 0) {
                        continue;
                    }

                    if (!isset($assignmentsByEvaluation[$evaluationId])) {
                        $assignmentsByEvaluation[$evaluationId] = [];
                    }

                    $toolId = (int) ($assignmentRow['tool_id'] ?? 0);
                    $toolIsExam = 0;
                    if (isset($toolDetailsMap[$toolId])) {
                        $toolIsExam = (int) ($toolDetailsMap[$toolId]['is_exam'] ?? 0);
                    }

                    $assignmentsByEvaluation[$evaluationId][] = [
                        'tool_id' => $toolId,
                        'tool_name' => $toolMap[$toolId] ?? ('ابزار #' . UtilityHelper::englishToPersian((string) $toolId)),
                        'sort_order' => (int) ($assignmentRow['sort_order'] ?? 0),
                        'is_exam' => $toolIsExam,
                    ];
                }
            } catch (Exception $exception) {
                $assignmentsByEvaluation = [];
            }
        }

        $scheduleMap = [];
        try {
            $scheduleRows = DatabaseHelper::fetchAll(
                'SELECT id, evaluation_title, evaluation_date, status, is_open FROM organization_evaluation_schedules WHERE organization_id = :organization_id ORDER BY evaluation_date ASC',
                ['organization_id' => $organizationId]
            );

            foreach ($scheduleRows as $scheduleRow) {
                $scheduleId = (int) ($scheduleRow['id'] ?? 0);
                if ($scheduleId <= 0) {
                    continue;
                }

                $scheduleMap[$scheduleId] = [
                    'title' => trim((string) ($scheduleRow['evaluation_title'] ?? '')),
                    'evaluation_date' => $scheduleRow['evaluation_date'] ?? null,
                    'status' => trim((string) ($scheduleRow['status'] ?? '')),
                    'is_open' => (int) ($scheduleRow['is_open'] ?? 0),
                ];
            }
        } catch (Exception $exception) {
            $scheduleMap = [];
        }

        $activeEvaluations = [];
        $timelineEntries = [];
        $totalEvaluatees = 0;
        $totalEvaluators = 0;
        $openEvaluationsCount = 0;
        $upcomingEvaluationsCount = 0;

        try {
            $nowDateTime = new DateTime('now', new DateTimeZone('Asia/Tehran'));
            $nowTimestamp = $nowDateTime->getTimestamp();
        } catch (Exception $exception) {
            $nowTimestamp = time();
        }

        $contains = static function (string $haystack, string $needle): bool {
            if ($needle === '') {
                return false;
            }

            if (function_exists('mb_stripos')) {
                return mb_stripos($haystack, $needle, 0, 'UTF-8') !== false;
            }

            return stripos($haystack, $needle) !== false;
        };

        $detectStatusVariant = static function (?string $status, bool $isOpen) use ($contains): string {
            $normalized = function_exists('mb_strtolower')
                ? mb_strtolower(trim((string) $status), 'UTF-8')
                : strtolower(trim((string) $status));

            if ($isOpen) {
                return 'success';
            }

            if ($normalized === '') {
                return $isOpen ? 'success' : 'secondary';
            }

            if ($contains($normalized, 'لغو') || $contains($normalized, 'cancel')) {
                return 'danger';
            }

            if ($contains($normalized, 'تکمیل') || $contains($normalized, 'complete')) {
                return 'primary';
            }

            if ($contains($normalized, 'برنامه') || $contains($normalized, 'schedule')) {
                return 'info';
            }

            if ($contains($normalized, 'در حال') || $contains($normalized, 'progress') || $contains($normalized, 'فعال')) {
                return 'success';
            }

            return $isOpen ? 'success' : 'secondary';
        };

        foreach ($rawEvaluations as $evaluationRow) {
            $evaluationId = (int) ($evaluationRow['id'] ?? 0);
            if ($evaluationId <= 0) {
                continue;
            }

            $scheduleId = (int) ($evaluationRow['schedule_id'] ?? 0);
            $scheduleMeta = $scheduleId > 0 ? ($scheduleMap[$scheduleId] ?? null) : null;

            $evaluators = $this->decodeUserList($evaluationRow['evaluators_json'] ?? null, $userMap);
            $evaluatees = $this->decodeUserList($evaluationRow['evaluatees_json'] ?? null, $userMap);

            $scoreBaseLink = UtilityHelper::baseUrl('organizations/active-evaluations/score?evaluation_id=' . urlencode((string) $evaluationId));
            if (!empty($evaluatees)) {
                foreach ($evaluatees as &$evaluatee) {
                    $evaluateeId = (int) ($evaluatee['id'] ?? 0);
                    $evaluatee['link'] = $evaluateeId > 0
                        ? $scoreBaseLink . '&evaluatee_id=' . urlencode((string) $evaluateeId)
                        : $scoreBaseLink;
                }
                unset($evaluatee);
            }

            $evaluatorIds = array_map(static function (array $item): int {
                return (int) ($item['id'] ?? 0);
            }, $evaluators);

            $evaluateeIds = array_map(static function (array $item): int {
                return (int) ($item['id'] ?? 0);
            }, $evaluatees);

            $canSeeAll = $isSystemAdmin || $isManager;
            $includeEvaluation = $canSeeAll;

            if (!$includeEvaluation) {
                if ($currentOrganizationUserId > 0) {
                    if ($isEvaluator) {
                        $includeEvaluation = in_array($currentOrganizationUserId, $evaluatorIds, true);
                    } elseif ($isEvaluatee) {
                        $includeEvaluation = in_array($currentOrganizationUserId, $evaluateeIds, true);
                    } else {
                        $includeEvaluation = in_array($currentOrganizationUserId, $evaluatorIds, true)
                            || in_array($currentOrganizationUserId, $evaluateeIds, true);
                    }
                } else {
                    $includeEvaluation = false;
                }
            }

            if (!$includeEvaluation) {
                continue;
            }

            $evaluationDate = $evaluationRow['evaluation_date'] ?? null;
            if (($evaluationDate === null || trim((string) $evaluationDate) === '') && $scheduleMeta && !empty($scheduleMeta['evaluation_date'])) {
                $evaluationDate = $scheduleMeta['evaluation_date'];
            }

            $dateMeta = $this->formatEvaluationPersianDate($evaluationDate);
            $dateKey = null;
            if ($dateMeta['year'] !== null && $dateMeta['month'] !== null && $dateMeta['day'] !== null) {
                $dateKey = sprintf('%04d-%02d-%02d', (int) $dateMeta['year'], (int) $dateMeta['month'], (int) $dateMeta['day']);
            }

            $timestamp = null;
            if ($evaluationDate !== null && trim((string) $evaluationDate) !== '') {
                try {
                    $dateTime = new DateTime($evaluationDate, new DateTimeZone('Asia/Tehran'));
                    $timestamp = $dateTime->getTimestamp();
                } catch (Exception $exception) {
                    $timestamp = null;
                }
            }

            if ($timestamp === null && $scheduleMeta && !empty($scheduleMeta['evaluation_date'])) {
                try {
                    $dateTime = new DateTime($scheduleMeta['evaluation_date'], new DateTimeZone('Asia/Tehran'));
                    $timestamp = $dateTime->getTimestamp();
                } catch (Exception $exception) {
                    $timestamp = null;
                }
            }

            $isUpcoming = $timestamp !== null && $timestamp >= $nowTimestamp;

            $assignments = $assignmentsByEvaluation[$evaluationId] ?? [];
            $nonExamTools = array_values(array_filter($assignments, static function (array $assignment): bool {
                return (int) ($assignment['is_exam'] ?? 0) === 0;
            }));
            $toolsCount = count($nonExamTools);

            $evaluatorsCount = count($evaluators);
            $evaluateesCount = count($evaluatees);

            $totalEvaluators += $evaluatorsCount;
            $totalEvaluatees += $evaluateesCount;

            $statusRaw = $scheduleMeta['status'] ?? '';
            $isOpen = $scheduleMeta !== null ? ((int) ($scheduleMeta['is_open'] ?? 0) === 1) : true;
            if ($isOpen) {
                $openEvaluationsCount++;
            }
            if ($isUpcoming) {
                $upcomingEvaluationsCount++;
            }

            $statusVariant = $detectStatusVariant($statusRaw, $isOpen);
            $statusLabel = $statusRaw !== '' ? $statusRaw : ($isOpen ? 'فعال' : 'نامشخص');

            $activeEvaluations[] = [
                'id' => $evaluationId,
                'title' => trim((string) ($evaluationRow['title'] ?? 'بدون عنوان')),
                'date_display' => $dateMeta['display'],
                'date_key' => $dateKey,
                'timestamp' => $timestamp,
                'is_upcoming' => $isUpcoming,
                'status_label' => $statusLabel,
                'status_variant' => $statusVariant,
                'is_open' => $isOpen,
                'evaluators' => $evaluators,
                'evaluatees' => $evaluatees,
                'evaluators_count' => $evaluatorsCount,
                'evaluatees_count' => $evaluateesCount,
                'tools' => $nonExamTools,
                'tools_count' => $toolsCount,
                'score_link' => $scoreBaseLink,
                'calendar_link' => $this->buildCalendarLink($dateMeta['year'], $dateMeta['month']),
                'manage_link' => UtilityHelper::baseUrl('organizations/evaluation-calendar/matrix/manage?id=' . urlencode((string) $evaluationId)),
                'schedule_title' => $scheduleMeta['title'] ?? null,
            ];

            $timelineEntries[] = [
                'id' => $evaluationId,
                'title' => trim((string) ($evaluationRow['title'] ?? 'بدون عنوان')),
                'date_display' => $dateMeta['display'],
                'status_label' => $statusLabel,
                'status_variant' => $statusVariant,
                'timestamp' => $timestamp,
                'is_upcoming' => $isUpcoming,
                'evaluatees_count' => $evaluateesCount,
                'evaluators_count' => $evaluatorsCount,
            ];
        }

        usort($activeEvaluations, static function (array $a, array $b): int {
            $timestampA = $a['timestamp'] ?? null;
            $timestampB = $b['timestamp'] ?? null;

            if ($timestampA === $timestampB) {
                return $b['id'] <=> $a['id'];
            }

            if ($timestampA === null) {
                return 1;
            }

            if ($timestampB === null) {
                return -1;
            }

            return $timestampA <=> $timestampB;
        });

        usort($timelineEntries, static function (array $a, array $b): int {
            $timestampA = $a['timestamp'] ?? null;
            $timestampB = $b['timestamp'] ?? null;

            if ($timestampA === $timestampB) {
                return $b['id'] <=> $a['id'];
            }

            if ($timestampA === null) {
                return 1;
            }

            if ($timestampB === null) {
                return -1;
            }

            return $timestampA <=> $timestampB;
        });

        $summaryMetrics = [
            'total' => count($activeEvaluations),
            'open' => $openEvaluationsCount,
            'upcoming' => $upcomingEvaluationsCount,
            'evaluatees' => $totalEvaluatees,
            'evaluators' => $totalEvaluators,
        ];

        if ($summaryMetrics['upcoming'] > $summaryMetrics['total']) {
            $summaryMetrics['upcoming'] = $summaryMetrics['total'];
        }

        $visibilityMode = 'limited';
        if ($isSystemAdmin) {
            $visibilityMode = 'system_admin';
        } elseif ($isManager) {
            $visibilityMode = 'manager';
        } elseif ($isEvaluator) {
            $visibilityMode = 'evaluator';
        } elseif ($isEvaluatee) {
            $visibilityMode = 'evaluatee';
        }

        $visibilityMessage = 'نمایش ارزیابی‌ها بر اساس دسترسی‌های فعال شما محدود شده است.';
        if ($isSystemAdmin) {
            $visibilityMessage = 'تمام ارزیابی‌های ثبت‌شده برای این سازمان قابل مشاهده است.';
        } elseif ($isManager) {
            $visibilityMessage = 'به‌عنوان مدیر ارزیابی، تمام ارزیابی‌های فعال را مشاهده می‌کنید.';
        } elseif ($isEvaluator) {
            $visibilityMessage = 'تنها ارزیابی‌هایی که به شما محول شده‌اند نمایش داده می‌شود.';
        } elseif ($isEvaluatee) {
            $visibilityMessage = 'ارزیابی‌هایی که شما در آن شرکت‌کننده هستید نمایش داده می‌شود.';
        }

        $visibilityContext = [
            'mode' => $visibilityMode,
            'message' => $visibilityMessage,
            'role_label' => $roleLabel,
            'user_display' => $displayName,
            'can_view_all' => $isSystemAdmin || $isManager,
            'is_evaluator' => $isEvaluator,
            'is_evaluatee' => $isEvaluatee,
        ];

        $successMessage = ResponseHelper::getFlash('success');
        $errorMessage = ResponseHelper::getFlash('error');
        $warningMessage = ResponseHelper::getFlash('warning');
        $infoMessage = ResponseHelper::getFlash('info');

        include __DIR__ . '/../Views/organizations/active-evaluations/index.php';
    }

    public function organizationActiveEvaluationScore(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationSchedulesTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationMatrixVisibilityTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolCompetenciesTableExists();
        $this->ensureOrganizationUsersTableExists();
        $this->ensureOrganizationCompetencyModelsTableExists();
        $this->ensureOrganizationCompetencyModelItemsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyDimensionsTableExists();

        $title = 'امتیازدهی ارزیابی فعال';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $currentOrganizationUserId = (int) ($user['organization_user_id'] ?? 0);
        $accountSourceRaw = (string) ($user['account_source'] ?? '');
        $accountSource = $accountSourceRaw !== '' && function_exists('mb_strtolower')
            ? mb_strtolower($accountSourceRaw, 'UTF-8')
            : strtolower($accountSourceRaw);

        $flags = isset($user['organization_user_flags']) && is_array($user['organization_user_flags'])
            ? $user['organization_user_flags']
            : [];

        $isOwnerAccount = $accountSource === 'organizations';
        $isSystemAdmin = $isOwnerAccount || (int) ($flags['is_system_admin'] ?? 0) === 1;
        $isManager = (int) ($flags['is_manager'] ?? 0) === 1;
        $isEvaluator = (int) ($flags['is_evaluator'] ?? 0) === 1;
        $isEvaluatee = (int) ($flags['is_evaluee'] ?? 0) === 1;

        [$evaluationTools, $toolMap, $organizationUsers, $userMap] = $this->loadEvaluationFormReferenceData($organizationId);
        $evaluationModelSuggestions = $this->loadEvaluationModelSuggestions($organizationId);
        $toolDetailsMap = [];
        foreach ($evaluationTools as $tool) {
            $toolId = (int) ($tool['id'] ?? 0);
            if ($toolId <= 0) {
                continue;
            }

            $toolDetailsMap[$toolId] = $tool;
        }

        $redirectIndex = UtilityHelper::baseUrl('organizations/active-evaluations');

        $evaluationIdInput = UtilityHelper::persianToEnglish(trim((string) ($_GET['evaluation_id'] ?? ($_GET['evaluation'] ?? ($_GET['id'] ?? '')))));
        $evaluationId = (int) $evaluationIdInput;

        if ($evaluationId <= 0) {
            ResponseHelper::flashError('شناسه ارزیابی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $evaluationRow = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_evaluations WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $evaluationId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $evaluationRow = null;
        }

        if (!$evaluationRow) {
            ResponseHelper::flashError('ارزیابی مورد نظر یافت نشد یا دسترسی به آن مجاز نیست.');
            UtilityHelper::redirect($redirectIndex);
        }

        $evaluators = $this->decodeUserList($evaluationRow['evaluators_json'] ?? null, $userMap);
        $evaluatees = $this->decodeUserList($evaluationRow['evaluatees_json'] ?? null, $userMap);

        $currentOrganizationUserId = (int) ($user['organization_user_id'] ?? 0);
        $accountSourceRaw = (string) ($user['account_source'] ?? '');
        $accountSource = $accountSourceRaw !== '' && function_exists('mb_strtolower')
            ? mb_strtolower($accountSourceRaw, 'UTF-8')
            : strtolower($accountSourceRaw);

        $flags = isset($user['organization_user_flags']) && is_array($user['organization_user_flags'])
            ? $user['organization_user_flags']
            : [];

        $isOwnerAccount = $accountSource === 'organizations';
        $isSystemAdmin = $isOwnerAccount || (int) ($flags['is_system_admin'] ?? 0) === 1;
        $isManager = (int) ($flags['is_manager'] ?? 0) === 1;
        $isEvaluator = (int) ($flags['is_evaluator'] ?? 0) === 1;
        $isEvaluatee = (int) ($flags['is_evaluee'] ?? 0) === 1;

        $currentOrganizationUserId = (int) ($user['organization_user_id'] ?? 0);
        $accountSourceRaw = (string) ($user['account_source'] ?? '');
        $accountSource = $accountSourceRaw !== '' && function_exists('mb_strtolower')
            ? mb_strtolower($accountSourceRaw, 'UTF-8')
            : strtolower($accountSourceRaw);

        $flags = isset($user['organization_user_flags']) && is_array($user['organization_user_flags'])
            ? $user['organization_user_flags']
            : [];

        $isOwnerAccount = $accountSource === 'organizations';
        $isSystemAdmin = $isOwnerAccount || (int) ($flags['is_system_admin'] ?? 0) === 1;
        $isManager = (int) ($flags['is_manager'] ?? 0) === 1;
        $isEvaluator = (int) ($flags['is_evaluator'] ?? 0) === 1;
        $isEvaluatee = (int) ($flags['is_evaluee'] ?? 0) === 1;

        $evaluatorIds = array_map(static function (array $item): int {
            return (int) ($item['id'] ?? 0);
        }, $evaluators);

        $evaluateeIds = array_map(static function (array $item): int {
            return (int) ($item['id'] ?? 0);
        }, $evaluatees);

        $evaluatorMap = [];
        foreach ($evaluators as $evaluator) {
            $evaluatorId = (int) ($evaluator['id'] ?? 0);
            if ($evaluatorId <= 0) {
                continue;
            }

            $evaluatorMap[$evaluatorId] = $evaluator;
        }

        $canViewAll = $isSystemAdmin || $isManager;
        $allowed = $canViewAll;

        if (!$allowed && $currentOrganizationUserId > 0) {
            if ($isEvaluator && in_array($currentOrganizationUserId, $evaluatorIds, true)) {
                $allowed = true;
            }

            if (!$allowed && $isEvaluatee && in_array($currentOrganizationUserId, $evaluateeIds, true)) {
                $allowed = true;
            }

            if (!$allowed && (in_array($currentOrganizationUserId, $evaluatorIds, true) || in_array($currentOrganizationUserId, $evaluateeIds, true))) {
                $allowed = true;
            }
        }

        if (!$allowed) {
            ResponseHelper::flashError('شما مجوز مشاهده این ارزیابی را ندارید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $scoreBaseLink = UtilityHelper::baseUrl('organizations/active-evaluations/score?evaluation_id=' . urlencode((string) $evaluationId));

        $evaluateeParam = UtilityHelper::persianToEnglish(trim((string) ($_GET['evaluatee_id'] ?? ($_GET['evaluatee'] ?? ''))));
        $requestedEvaluateeId = $evaluateeParam !== '' ? (int) $evaluateeParam : 0;

        $selectedEvaluateeId = 0;
        if ($requestedEvaluateeId > 0 && in_array($requestedEvaluateeId, $evaluateeIds, true)) {
            $selectedEvaluateeId = $requestedEvaluateeId;
        } elseif ($isEvaluatee && $currentOrganizationUserId > 0 && in_array($currentOrganizationUserId, $evaluateeIds, true)) {
            $selectedEvaluateeId = $currentOrganizationUserId;
        } elseif (!empty($evaluateeIds)) {
            $selectedEvaluateeId = $evaluateeIds[0];
        }

        $selectedEvaluatee = null;
        $evaluateeTabs = [];
        foreach ($evaluatees as $evaluatee) {
            $evaluateeId = (int) ($evaluatee['id'] ?? 0);
            if ($evaluateeId > 0 && $evaluateeId === $selectedEvaluateeId) {
                $selectedEvaluatee = $evaluatee;
            }

            $evaluateeTabs[] = [
                'id' => $evaluateeId,
                'label' => $evaluatee['label'] ?? 'ارزیابی‌شونده',
                'link' => $scoreBaseLink . ($evaluateeId > 0 ? '&evaluatee_id=' . urlencode((string) $evaluateeId) : ''),
                'selected' => $evaluateeId > 0 ? ($evaluateeId === $selectedEvaluateeId) : ($selectedEvaluateeId === 0),
            ];
        }

        if ($selectedEvaluatee === null && $selectedEvaluateeId > 0) {
            $selectedEvaluatee = [
                'id' => $selectedEvaluateeId,
                'label' => 'ارزیابی‌شونده #' . UtilityHelper::englishToPersian((string) $selectedEvaluateeId),
            ];
        }

        $assignmentRows = [];
        try {
            $assignmentRows = DatabaseHelper::fetchAll(
                'SELECT tool_id, sort_order FROM organization_evaluation_tool_assignments WHERE evaluation_id = :evaluation_id ORDER BY sort_order ASC, id ASC',
                ['evaluation_id' => $evaluationId]
            );
        } catch (Exception $exception) {
            $assignmentRows = [];
        }

        $matrixRows = [];
        try {
            $matrixRows = DatabaseHelper::fetchAll(
                'SELECT tool_id, evaluator_id, evaluatee_id, is_visible FROM organization_evaluation_matrix_visibility WHERE evaluation_id = :evaluation_id',
                ['evaluation_id' => $evaluationId]
            );
        } catch (Exception $exception) {
            $matrixRows = [];
        }

        $hasMatrixRows = !empty($matrixRows);
        $matrixVisibility = [];
        foreach ($matrixRows as $matrixRow) {
            $toolId = (int) ($matrixRow['tool_id'] ?? 0);
            $evaluateeId = (int) ($matrixRow['evaluatee_id'] ?? 0);
            if ($toolId <= 0 || $evaluateeId <= 0) {
                continue;
            }

            $evaluatorId = (int) ($matrixRow['evaluator_id'] ?? 0);
            $isVisible = (int) ($matrixRow['is_visible'] ?? 0) === 1;

            if (!isset($matrixVisibility[$evaluateeId])) {
                $matrixVisibility[$evaluateeId] = [];
            }

            if (!isset($matrixVisibility[$evaluateeId][$toolId])) {
                $matrixVisibility[$evaluateeId][$toolId] = [];
            }

            $matrixVisibility[$evaluateeId][$toolId][] = [
                'evaluator_id' => $evaluatorId,
                'is_visible' => $isVisible,
            ];
        }

        $generalModelLabel = trim((string) ($evaluationRow['general_model'] ?? ''));
        $specificModelLabel = trim((string) ($evaluationRow['specific_model'] ?? ''));

        $generalCompetencies = [];
        $specificCompetencies = [];
        $generalModelMeta = $this->resolveCompetencyModelByLabel($organizationId, $generalModelLabel);
        $specificModelMeta = $this->resolveCompetencyModelByLabel($organizationId, $specificModelLabel);

        if ($generalModelMeta && !empty($generalModelMeta['title'])) {
            $generalModelLabel = $generalModelMeta['title'];
        }

        if ($specificModelMeta && !empty($specificModelMeta['title'])) {
            $specificModelLabel = $specificModelMeta['title'];
        }

        if ($generalModelMeta && ($generalModelMeta['id'] ?? 0) > 0) {
            $generalCompetencies = $this->loadCompetenciesForModel($organizationId, (int) $generalModelMeta['id']);
        }

        if ($specificModelMeta && ($specificModelMeta['id'] ?? 0) > 0) {
            $specificCompetencies = $this->loadCompetenciesForModel($organizationId, (int) $specificModelMeta['id']);
        }

        $competencyLookup = [];
        foreach ($generalCompetencies as $competency) {
            $competencyId = (int) ($competency['id'] ?? 0);
            if ($competencyId <= 0) {
                continue;
            }

            $competencyLookup[$competencyId] = $competency;
            $competencyLookup[$competencyId]['groups'] = ['general'];
        }

        foreach ($specificCompetencies as $competency) {
            $competencyId = (int) ($competency['id'] ?? 0);
            if ($competencyId <= 0) {
                continue;
            }

            if (!isset($competencyLookup[$competencyId])) {
                $competencyLookup[$competencyId] = $competency;
                $competencyLookup[$competencyId]['groups'] = ['specific'];
            } elseif (!in_array('specific', $competencyLookup[$competencyId]['groups'], true)) {
                $competencyLookup[$competencyId]['groups'][] = 'specific';
            }
        }

        $assignmentToolIds = [];
        foreach ($assignmentRows as $assignment) {
            $toolId = (int) ($assignment['tool_id'] ?? 0);
            if ($toolId <= 0) {
                continue;
            }
            $assignmentToolIds[$toolId] = $toolId;
        }

        $relevantModelIds = [];
        if ($generalModelMeta && ($generalModelMeta['id'] ?? 0) > 0) {
            $relevantModelIds[(int) $generalModelMeta['id']] = (int) $generalModelMeta['id'];
        }
        if ($specificModelMeta && ($specificModelMeta['id'] ?? 0) > 0) {
            $relevantModelIds[(int) $specificModelMeta['id']] = (int) $specificModelMeta['id'];
        }

        $toolCompetencyMap = [];
        if (!empty($assignmentToolIds) && !empty($relevantModelIds)) {
            $params = ['organization_id' => $organizationId];
            $toolPlaceholders = [];
            $index = 0;
            foreach (array_values($assignmentToolIds) as $toolId) {
                $key = 'tool_' . $index++;
                $toolPlaceholders[] = ':' . $key;
                $params[$key] = $toolId;
            }

            $modelPlaceholders = [];
            $index = 0;
            foreach (array_values($relevantModelIds) as $modelId) {
                $key = 'model_' . $index++;
                $modelPlaceholders[] = ':' . $key;
                $params[$key] = $modelId;
            }

            $sql = sprintf(
                'SELECT evaluation_tool_id, competency_id, model_id
                 FROM organization_evaluation_tool_competencies
                 WHERE organization_id = :organization_id
                   AND evaluation_tool_id IN (%s)
                   AND model_id IN (%s)',
                implode(', ', $toolPlaceholders),
                implode(', ', $modelPlaceholders)
            );

            try {
                $toolCompetencyRows = DatabaseHelper::fetchAll($sql, $params);
            } catch (Exception $exception) {
                $toolCompetencyRows = [];
            }

            foreach ($toolCompetencyRows as $row) {
                $toolId = (int) ($row['evaluation_tool_id'] ?? 0);
                $competencyId = (int) ($row['competency_id'] ?? 0);
                $modelId = (int) ($row['model_id'] ?? 0);
                if ($toolId <= 0 || $competencyId <= 0) {
                    continue;
                }

                if (!isset($toolCompetencyMap[$toolId])) {
                    $toolCompetencyMap[$toolId] = [];
                }

                $toolCompetencyMap[$toolId][] = [
                    'id' => $competencyId,
                    'model_id' => $modelId,
                ];
            }
        }

        $additionalCompetencyIds = [];
        foreach ($toolCompetencyMap as $entries) {
            foreach ($entries as $entry) {
                $competencyId = (int) ($entry['id'] ?? 0);
                if ($competencyId <= 0 || isset($competencyLookup[$competencyId])) {
                    continue;
                }
                $additionalCompetencyIds[$competencyId] = $competencyId;
            }
        }

        if (!empty($additionalCompetencyIds)) {
            $params = ['organization_id' => $organizationId];
            $placeholders = [];
            $index = 0;
            foreach (array_values($additionalCompetencyIds) as $competencyId) {
                $key = 'comp_' . $index++;
                $placeholders[] = ':' . $key;
                $params[$key] = $competencyId;
            }

            $sql = sprintf(
                'SELECT id, code, title FROM organization_competencies WHERE organization_id = :organization_id AND id IN (%s)',
                implode(', ', $placeholders)
            );

            try {
                $extraCompetencies = DatabaseHelper::fetchAll($sql, $params);
                foreach ($extraCompetencies as $extra) {
                    $competencyId = (int) ($extra['id'] ?? 0);
                    if ($competencyId <= 0) {
                        continue;
                    }

                    $competencyLookup[$competencyId] = [
                        'id' => $competencyId,
                        'code' => trim((string) ($extra['code'] ?? '')),
                        'title' => trim((string) ($extra['title'] ?? '')),
                        'dimension' => '',
                        'groups' => [],
                    ];
                }
            } catch (Exception $exception) {
                // ignore lookup failures
            }
        }

        $toolEntries = [];
        foreach ($assignmentRows as $assignment) {
            $toolId = (int) ($assignment['tool_id'] ?? 0);
            if ($toolId <= 0) {
                continue;
            }

            $tool = $toolDetailsMap[$toolId] ?? null;
            if (!$tool) {
                continue;
            }

            $isExamTool = (int) ($tool['is_exam'] ?? 0) === 1;
            if ($isExamTool) {
                continue;
            }

            $matrixRecords = $matrixVisibility[$selectedEvaluateeId][$toolId] ?? null;
            $isVisible = true;
            $evaluatorLabels = [];

            if ($hasMatrixRows) {
                if ($matrixRecords === null) {
                    $isVisible = false;
                } else {
                    $isVisible = false;
                    foreach ($matrixRecords as $record) {
                        if ((int) ($record['is_visible'] ?? 0) !== 1) {
                            continue;
                        }

                        $isVisible = true;
                        $evaluatorId = (int) ($record['evaluator_id'] ?? 0);
                        if ($evaluatorId > 0) {
                            $label = $userMap[$evaluatorId] ?? ('ارزیاب #' . UtilityHelper::englishToPersian((string) $evaluatorId));
                        } else {
                            $label = 'ارزیاب تعیین نشده';
                        }

                        if (!in_array($label, $evaluatorLabels, true)) {
                            $evaluatorLabels[] = $label;
                        }
                    }
                }
            } else {
                foreach ($evaluators as $evaluator) {
                    $label = $evaluator['label'] ?? null;
                    if ($label && !in_array($label, $evaluatorLabels, true)) {
                        $evaluatorLabels[] = $label;
                    }
                }
            }

            if (!$isVisible) {
                continue;
            }

            if (empty($evaluatorLabels)) {
                $evaluatorLabels[] = 'ارزیاب تعیین نشده';
            }

            $competencySummaries = [];
            if (!empty($toolCompetencyMap[$toolId])) {
                $seenCompetencyIds = [];
                foreach ($toolCompetencyMap[$toolId] as $entry) {
                    $competencyId = (int) ($entry['id'] ?? 0);
                    if ($competencyId <= 0 || isset($seenCompetencyIds[$competencyId])) {
                        continue;
                    }
                    $seenCompetencyIds[$competencyId] = true;

                    $competency = $competencyLookup[$competencyId] ?? null;
                    if ($competency === null) {
                        continue;
                    }

                    $competencySummaries[] = [
                        'id' => $competencyId,
                        'title' => $competency['title'] ?? '',
                        'code' => $competency['code'] ?? '',
                        'dimension' => $competency['dimension'] ?? '',
                        'groups' => $competency['groups'] ?? [],
                    ];
                }
            }

            $scoreLink = UtilityHelper::baseUrl('organizations/active-evaluations/tool-score?evaluation_id=' . urlencode((string) $evaluationId)
                . '&tool_id=' . urlencode((string) $toolId)
                . ($selectedEvaluateeId > 0 ? '&evaluatee_id=' . urlencode((string) $selectedEvaluateeId) : ''));

            $toolEntries[] = [
                'id' => $toolId,
                'name' => $tool['name'] ?? ('ابزار #' . UtilityHelper::englishToPersian((string) $toolId)),
                'order' => (int) ($assignment['sort_order'] ?? 0),
                'question_type' => $tool['question_type'] ?? '',
                'evaluators' => $evaluatorLabels,
                'competencies' => $competencySummaries,
                'competency_count' => count($competencySummaries),
                'score_link' => $scoreLink,
                'can_score' => true,
            ];
        }

        if (!empty($toolEntries)) {
            usort($toolEntries, static function (array $a, array $b): int {
                $orderCompare = ($a['order'] ?? 0) <=> ($b['order'] ?? 0);
                if ($orderCompare !== 0) {
                    return $orderCompare;
                }

                return strcmp($a['name'] ?? '', $b['name'] ?? '');
            });
        }

        $dateMeta = $this->formatEvaluationPersianDate($evaluationRow['evaluation_date'] ?? null);
        $scheduleTitle = null;
        $scheduleId = (int) ($evaluationRow['schedule_id'] ?? 0);
        if ($scheduleId > 0) {
            try {
                $scheduleRow = DatabaseHelper::fetchOne(
                    'SELECT evaluation_title FROM organization_evaluation_schedules WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                    [
                        'id' => $scheduleId,
                        'organization_id' => $organizationId,
                    ]
                );

                if ($scheduleRow) {
                    $scheduleTitle = trim((string) ($scheduleRow['evaluation_title'] ?? ''));
                }
            } catch (Exception $exception) {
                $scheduleTitle = null;
            }
        }

        $evaluationSummary = [
            'id' => $evaluationId,
            'title' => trim((string) ($evaluationRow['title'] ?? 'بدون عنوان')),
            'date_display' => $dateMeta['display'],
            'general_model_label' => $generalModelLabel,
            'specific_model_label' => $specificModelLabel,
            'general_model_found' => $generalModelMeta !== null,
            'specific_model_found' => $specificModelMeta !== null,
            'schedule_title' => $scheduleTitle,
        ];

        $stats = [
            'tools' => count($toolEntries),
            'general_competencies' => count($generalCompetencies),
            'specific_competencies' => count($specificCompetencies),
            'evaluatees' => count($evaluatees),
            'evaluators' => count($evaluators),
        ];

        $pageMessages = [];
        if (!$hasMatrixRows) {
            $pageMessages[] = [
                'type' => 'info',
                'text' => 'ماتریس اختصاص ابزار فعال نشده است؛ کلیه ابزارهای غیرآزمون برای این ارزیابی در دسترس هستند.',
            ];
        } elseif ($selectedEvaluateeId > 0 && empty($matrixVisibility[$selectedEvaluateeId])) {
            $pageMessages[] = [
                'type' => 'warning',
                'text' => 'برای ارزیابی‌شونده انتخاب‌شده در ماتریس ابزاری فعال نشده است. لطفاً تنظیمات ماتریس را بازبینی کنید.',
            ];
        } elseif (empty($toolEntries)) {
            $pageMessages[] = [
                'type' => 'warning',
                'text' => 'هیچ ابزاری برای ارزیابی‌شونده انتخاب‌شده در دسترس نیست.',
            ];
        }

        if (empty($evaluatees)) {
            $pageMessages[] = [
                'type' => 'warning',
                'text' => 'برای این ارزیابی هنوز ارزیابی‌شونده‌ای ثبت نشده است.',
            ];
        }

        $roleLabel = $this->resolveOrganizationRoleLabelFromUser($user);
        $displayName = trim((string) ($user['name'] ?? ($user['username'] ?? 'کاربر سازمان')));

        $visibilityMessage = 'نمایش اطلاعات ارزیابی بر اساس سطح دسترسی شما تنظیم شده است.';
        if ($isSystemAdmin) {
            $visibilityMessage = 'به‌عنوان مدیر سیستم، تمام ابزارهای فعال برای این ارزیابی نمایش داده می‌شود.';
        } elseif ($isManager) {
            $visibilityMessage = 'تمام ابزارهای اختصاص داده‌شده به ارزیابی‌شونده‌های این ارزیابی برای شما قابل مشاهده است.';
        } elseif ($isEvaluator) {
            $visibilityMessage = 'فهرست ابزارهایی که به شما برای این ارزیابی تخصیص یافته‌اند نمایش داده می‌شود.';
        } elseif ($isEvaluatee) {
            $visibilityMessage = 'ابزارهایی که باید توسط شما تکمیل شود در این بخش نمایش داده می‌شود.';
        }

        $generalModelSection = [
            'label' => $generalModelLabel,
            'model' => $generalModelMeta,
            'competencies' => $generalCompetencies,
        ];

        $specificModelSection = [
            'label' => $specificModelLabel,
            'model' => $specificModelMeta,
            'competencies' => $specificCompetencies,
        ];

        $hasMatrixVisibility = $hasMatrixRows;
        $visibilityContext = [
            'role_label' => $roleLabel,
            'user_display' => $displayName,
            'message' => $visibilityMessage,
            'can_view_all' => $canViewAll,
            'is_evaluator' => $isEvaluator,
            'is_evaluatee' => $isEvaluatee,
        ];
        $backLink = $redirectIndex;

        include __DIR__ . '/../Views/organizations/active-evaluations/score.php';
    }

    public function organizationWashUpList(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationSchedulesTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationMatrixVisibilityTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolScoresTableExists();
        $this->ensureOrganizationUsersTableExists();

        $title = 'گزارش‌های Wash-Up';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $currentOrganizationUserId = (int) ($user['organization_user_id'] ?? 0);
        $accountSourceRaw = (string) ($user['account_source'] ?? '');
        $accountSource = $accountSourceRaw !== '' && function_exists('mb_strtolower')
            ? mb_strtolower($accountSourceRaw, 'UTF-8')
            : strtolower($accountSourceRaw);

        $flags = isset($user['organization_user_flags']) && is_array($user['organization_user_flags'])
            ? $user['organization_user_flags']
            : [];

        $isOwnerAccount = $accountSource === 'organizations';
        $isSystemAdmin = $isOwnerAccount || (int) ($flags['is_system_admin'] ?? 0) === 1;
        $isManager = (int) ($flags['is_manager'] ?? 0) === 1;
        $isEvaluator = (int) ($flags['is_evaluator'] ?? 0) === 1;
        $isEvaluatee = (int) ($flags['is_evaluee'] ?? 0) === 1;

        $roleLabel = $this->resolveOrganizationRoleLabelFromUser($user);
        $displayName = trim((string) ($user['name'] ?? ($user['username'] ?? 'کاربر سازمان')));

    [$evaluationTools, $toolMap, $organizationUsers, $userMap] = $this->loadEvaluationFormReferenceData($organizationId);
    $evaluationModelSuggestions = $this->loadEvaluationModelSuggestions($organizationId);

        $toolDetailsMap = [];
        foreach ($evaluationTools as $tool) {
            $toolId = (int) ($tool['id'] ?? 0);
            if ($toolId <= 0) {
                continue;
            }

            $toolDetailsMap[$toolId] = $tool;
        }

        $rawEvaluations = [];
        try {
            $rawEvaluations = DatabaseHelper::fetchAll(
                'SELECT * FROM organization_evaluations WHERE organization_id = :organization_id ORDER BY (evaluation_date IS NULL) ASC, evaluation_date DESC, id DESC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $rawEvaluations = [];
        }

        $evaluationIds = array_values(array_unique(array_filter(array_map(static function ($row) {
            return (int) ($row['id'] ?? 0);
        }, $rawEvaluations), static function (int $value): bool {
            return $value > 0;
        })));

        $assignmentsByEvaluation = [];
        if (!empty($evaluationIds)) {
            $placeholders = implode(',', array_fill(0, count($evaluationIds), '?'));
            try {
                $assignmentRows = DatabaseHelper::fetchAll(
                    "SELECT evaluation_id, tool_id, sort_order FROM organization_evaluation_tool_assignments WHERE evaluation_id IN ({$placeholders}) ORDER BY sort_order ASC, id ASC",
                    $evaluationIds
                );

                foreach ($assignmentRows as $assignmentRow) {
                    $evaluationId = (int) ($assignmentRow['evaluation_id'] ?? 0);
                    if ($evaluationId <= 0) {
                        continue;
                    }

                    if (!isset($assignmentsByEvaluation[$evaluationId])) {
                        $assignmentsByEvaluation[$evaluationId] = [];
                    }

                    $assignmentsByEvaluation[$evaluationId][] = [
                        'tool_id' => (int) ($assignmentRow['tool_id'] ?? 0),
                        'sort_order' => (int) ($assignmentRow['sort_order'] ?? 0),
                    ];
                }
            } catch (Exception $exception) {
                $assignmentsByEvaluation = [];
            }
        }

        $scheduleMap = [];
        try {
            $scheduleRows = DatabaseHelper::fetchAll(
                'SELECT id, evaluation_title, evaluation_date, status, is_open FROM organization_evaluation_schedules WHERE organization_id = :organization_id ORDER BY evaluation_date ASC',
                ['organization_id' => $organizationId]
            );

            foreach ($scheduleRows as $scheduleRow) {
                $scheduleId = (int) ($scheduleRow['id'] ?? 0);
                if ($scheduleId <= 0) {
                    continue;
                }

                $scheduleMap[$scheduleId] = [
                    'title' => trim((string) ($scheduleRow['evaluation_title'] ?? '')),
                    'evaluation_date' => $scheduleRow['evaluation_date'] ?? null,
                    'status' => trim((string) ($scheduleRow['status'] ?? '')),
                    'is_open' => (int) ($scheduleRow['is_open'] ?? 0),
                ];
            }
        } catch (Exception $exception) {
            $scheduleMap = [];
        }

        $processedEvaluations = [];
        $collectedEvaluationIds = [];
        $uniqueEvaluateeIds = [];

        foreach ($rawEvaluations as $evaluationRow) {
            $evaluationId = (int) ($evaluationRow['id'] ?? 0);
            if ($evaluationId <= 0) {
                continue;
            }

            $evaluators = $this->decodeUserList($evaluationRow['evaluators_json'] ?? null, $userMap);
            $evaluatees = $this->decodeUserList($evaluationRow['evaluatees_json'] ?? null, $userMap);

            $evaluatorIds = array_map(static function (array $item): int {
                return (int) ($item['id'] ?? 0);
            }, $evaluators);

            $evaluateeIds = array_map(static function (array $item): int {
                return (int) ($item['id'] ?? 0);
            }, $evaluatees);

            $canSeeAll = $isSystemAdmin || $isManager;
            $includeEvaluation = $canSeeAll;

            if (!$includeEvaluation) {
                if ($currentOrganizationUserId > 0) {
                    if ($isEvaluator) {
                        $includeEvaluation = in_array($currentOrganizationUserId, $evaluatorIds, true);
                    } elseif ($isEvaluatee) {
                        $includeEvaluation = in_array($currentOrganizationUserId, $evaluateeIds, true);
                    } else {
                        $includeEvaluation = in_array($currentOrganizationUserId, $evaluatorIds, true)
                            || in_array($currentOrganizationUserId, $evaluateeIds, true);
                    }
                } else {
                    $includeEvaluation = false;
                }
            }

            if (!$includeEvaluation) {
                continue;
            }

            $scheduleId = (int) ($evaluationRow['schedule_id'] ?? 0);
            $scheduleMeta = $scheduleId > 0 ? ($scheduleMap[$scheduleId] ?? null) : null;

            $evaluationDate = $evaluationRow['evaluation_date'] ?? null;
            if (($evaluationDate === null || trim((string) $evaluationDate) === '') && $scheduleMeta && !empty($scheduleMeta['evaluation_date'])) {
                $evaluationDate = $scheduleMeta['evaluation_date'];
            }

            $dateMeta = $this->formatEvaluationPersianDate($evaluationDate);

            $assignments = $assignmentsByEvaluation[$evaluationId] ?? [];
            $nonExamTools = array_values(array_filter($assignments, static function (array $assignment) use ($toolDetailsMap): bool {
                $toolId = (int) ($assignment['tool_id'] ?? 0);
                if ($toolId <= 0) {
                    return false;
                }

                $tool = $toolDetailsMap[$toolId] ?? null;
                if ($tool === null) {
                    return false;
                }

                return (int) ($tool['is_exam'] ?? 0) === 0;
            }));

            $processedEvaluations[] = [
                'evaluation' => $evaluationRow,
                'evaluators' => $evaluators,
                'evaluatees' => $evaluatees,
                'non_exam_tools' => $nonExamTools,
                'date_meta' => $dateMeta,
                'schedule_meta' => $scheduleMeta,
            ];

            $collectedEvaluationIds[$evaluationId] = $evaluationId;

            foreach ($evaluatees as $evaluatee) {
                $evaluateeId = (int) ($evaluatee['id'] ?? 0);
                if ($evaluateeId <= 0) {
                    continue;
                }
                $uniqueEvaluateeIds[$evaluateeId] = true;
            }
        }

        $scoreStatsMap = [];
        if (!empty($collectedEvaluationIds)) {
            $params = ['organization_id' => $organizationId];
            $placeholders = [];
            foreach (array_values($collectedEvaluationIds) as $index => $evaluationId) {
                $key = 'eval_' . $index;
                $placeholders[] = ':' . $key;
                $params[$key] = $evaluationId;
            }

            $sql = sprintf(
                'SELECT evaluation_id, evaluatee_id,
                        COUNT(*) AS total_scores,
                        COUNT(DISTINCT tool_id) AS tools_scored,
                        COUNT(DISTINCT scorer_id) AS scorers_involved,
                        MAX(updated_at) AS last_updated
                 FROM organization_evaluation_tool_scores
                 WHERE organization_id = :organization_id
                   AND evaluation_id IN (%s)
                 GROUP BY evaluation_id, evaluatee_id',
                implode(', ', $placeholders)
            );

            try {
                $scoreRows = DatabaseHelper::fetchAll($sql, $params);
            } catch (Exception $exception) {
                $scoreRows = [];
            }

            foreach ($scoreRows as $scoreRow) {
                $evaluationId = (int) ($scoreRow['evaluation_id'] ?? 0);
                $evaluateeId = (int) ($scoreRow['evaluatee_id'] ?? 0);
                if ($evaluationId <= 0 || $evaluateeId <= 0) {
                    continue;
                }

                if (!isset($scoreStatsMap[$evaluationId])) {
                    $scoreStatsMap[$evaluationId] = [];
                }

                $scoreStatsMap[$evaluationId][$evaluateeId] = [
                    'total_scores' => (int) ($scoreRow['total_scores'] ?? 0),
                    'tools_scored' => (int) ($scoreRow['tools_scored'] ?? 0),
                    'scorers_involved' => (int) ($scoreRow['scorers_involved'] ?? 0),
                    'last_updated' => $scoreRow['last_updated'] ?? null,
                ];
            }
        }

        $statusMeta = [
            'complete' => ['label' => 'آماده بررسی', 'variant' => 'success'],
            'in_progress' => ['label' => 'در حال تکمیل', 'variant' => 'info'],
            'pending' => ['label' => 'در انتظار امتیاز', 'variant' => 'warning'],
        ];
        $statusOrder = ['complete' => 0, 'in_progress' => 1, 'pending' => 2];

        $washUpRows = [];
        $statusCounters = ['complete' => 0, 'in_progress' => 0, 'pending' => 0];
        $uniqueEvaluations = [];

        foreach ($processedEvaluations as $entry) {
            $evaluationRow = $entry['evaluation'] ?? [];
            $evaluationId = (int) ($evaluationRow['id'] ?? 0);
            if ($evaluationId <= 0) {
                continue;
            }

            $evaluationTitle = trim((string) ($evaluationRow['title'] ?? 'بدون عنوان'));
            $dateDisplay = $entry['date_meta']['display'] ?? '—';
            $scheduleMeta = $entry['schedule_meta'] ?? null;
            $scheduleTitle = $scheduleMeta['title'] ?? null;

            $evaluators = $entry['evaluators'] ?? [];
            $evaluatorLabels = array_values(array_filter(array_map(static function (array $item): ?string {
                $label = trim((string) ($item['label'] ?? ''));
                return $label !== '' ? $label : null;
            }, $evaluators)));

            $nonExamTools = $entry['non_exam_tools'] ?? [];
            $toolsCount = count($nonExamTools);

            foreach ($entry['evaluatees'] as $evaluatee) {
                $evaluateeId = (int) ($evaluatee['id'] ?? 0);
                if ($evaluateeId <= 0) {
                    continue;
                }

                $uniqueEvaluations[$evaluationId] = true;

                $stats = $scoreStatsMap[$evaluationId][$evaluateeId] ?? [
                    'total_scores' => 0,
                    'tools_scored' => 0,
                    'scorers_involved' => 0,
                    'last_updated' => null,
                ];

                $totalScores = (int) ($stats['total_scores'] ?? 0);
                $toolsScored = (int) ($stats['tools_scored'] ?? 0);
                $scorersInvolved = (int) ($stats['scorers_involved'] ?? 0);

                $status = 'pending';
                if ($toolsCount > 0) {
                    if ($totalScores > 0 && $toolsScored >= $toolsCount && $scorersInvolved > 0) {
                        $status = 'complete';
                    } elseif ($totalScores > 0) {
                        $status = 'in_progress';
                    }
                } elseif ($totalScores > 0) {
                    $status = 'in_progress';
                }

                if (!isset($statusCounters[$status])) {
                    $statusCounters[$status] = 0;
                }
                $statusCounters[$status]++;

                $lastUpdated = $stats['last_updated'] ?? null;
                $lastUpdatedDisplay = null;
                $lastUpdatedAgo = null;

                if ($lastUpdated) {
                    try {
                        $updatedAt = new DateTime($lastUpdated, new DateTimeZone('Asia/Tehran'));
                        $lastUpdatedDisplay = UtilityHelper::englishToPersian($updatedAt->format('H:i Y/m/d'));
                        $lastUpdatedAgo = UtilityHelper::timeAgo($updatedAt->format('Y-m-d H:i:s'));
                    } catch (Exception $exception) {
                        $lastUpdatedDisplay = UtilityHelper::englishToPersian((string) $lastUpdated);
                    }
                }

                $statusLabel = $statusMeta[$status]['label'] ?? 'نامشخص';
                $statusVariant = $statusMeta[$status]['variant'] ?? 'secondary';

                $washUpRows[] = [
                    'evaluation_id' => $evaluationId,
                    'evaluation_title' => $evaluationTitle,
                    'evaluatee_id' => $evaluateeId,
                    'evaluatee_label' => $evaluatee['label'] ?? ('ارزیابی‌شونده #' . UtilityHelper::englishToPersian((string) $evaluateeId)),
                    'evaluation_date_display' => $dateDisplay,
                    'schedule_title' => $scheduleTitle,
                    'evaluator_labels' => $evaluatorLabels,
                    'tools_count' => $toolsCount,
                    'tools_scored' => $toolsScored,
                    'scores_recorded' => $totalScores,
                    'scorers_involved' => $scorersInvolved,
                    'status' => $status,
                    'status_label' => $statusLabel,
                    'status_variant' => $statusVariant,
                    'last_updated' => $lastUpdated,
                    'last_updated_display' => $lastUpdatedDisplay,
                    'last_updated_ago' => $lastUpdatedAgo,
                    'washup_link' => UtilityHelper::baseUrl('organizations/wash-up/detail?evaluation_id=' . urlencode((string) $evaluationId) . '&evaluatee_id=' . urlencode((string) $evaluateeId)),
                    'final_link' => UtilityHelper::baseUrl('organizations/wash-up/final-recommendation?evaluation_id=' . urlencode((string) $evaluationId) . '&evaluatee_id=' . urlencode((string) $evaluateeId)),
                ];
            }
        }

        if (!empty($washUpRows)) {
            usort($washUpRows, static function (array $a, array $b) use ($statusOrder): int {
                $statusA = $a['status'] ?? 'pending';
                $statusB = $b['status'] ?? 'pending';

                $orderA = $statusOrder[$statusA] ?? 99;
                $orderB = $statusOrder[$statusB] ?? 99;

                if ($orderA !== $orderB) {
                    return $orderA <=> $orderB;
                }

                $dateA = $a['last_updated'] ?? null;
                $dateB = $b['last_updated'] ?? null;

                if ($dateA === $dateB) {
                    return ($b['evaluation_id'] ?? 0) <=> ($a['evaluation_id'] ?? 0);
                }

                if ($dateA === null) {
                    return 1;
                }

                if ($dateB === null) {
                    return -1;
                }

                return strcmp($dateB, $dateA);
            });
        }

        $totalRows = count($washUpRows);
        $summaryMetrics = [
            'rows' => $totalRows,
            'evaluations' => count($uniqueEvaluations),
            'evaluatees' => count($uniqueEvaluateeIds),
            'completed' => $statusCounters['complete'] ?? 0,
            'in_progress' => $statusCounters['in_progress'] ?? 0,
            'pending' => $statusCounters['pending'] ?? 0,
        ];
        $summaryMetrics['with_scores'] = ($summaryMetrics['completed'] ?? 0) + ($summaryMetrics['in_progress'] ?? 0);
        $summaryMetrics['completion_rate'] = $totalRows > 0
            ? (int) round((($summaryMetrics['completed'] ?? 0) / $totalRows) * 100)
            : 0;

        $visibilityMessage = 'نمایش گزارش‌های Wash-Up بر اساس سطح دسترسی شما تنظیم شده است.';
        if ($isSystemAdmin) {
            $visibilityMessage = 'به‌عنوان مدیر سیستم، تمام ارزیابی‌های ثبت‌شده برای Wash-Up نمایان هستند.';
        } elseif ($isManager) {
            $visibilityMessage = 'به‌عنوان مدیر سازمان می‌توانید Wash-Up همه ارزیابی‌های سازمان را مشاهده کنید.';
        } elseif ($isEvaluator) {
            $visibilityMessage = 'ارزیابی‌هایی که به شما محول شده‌اند برای بررسی Wash-Up نمایش داده می‌شوند.';
        } elseif ($isEvaluatee) {
            $visibilityMessage = 'ارزیابی‌هایی که شما ارزیابی‌شونده آن‌ها هستید نمایش داده می‌شوند.';
        }

        $visibilityContext = [
            'role_label' => $roleLabel,
            'user_display' => $displayName,
            'message' => $visibilityMessage,
            'can_view_all' => $isSystemAdmin || $isManager,
            'is_evaluator' => $isEvaluator,
            'is_evaluatee' => $isEvaluatee,
        ];

        $pageMessages = [];
        if (empty($washUpRows)) {
            $pageMessages[] = [
                'type' => 'info',
                'text' => 'برای نمایش Wash-Up ابتدا باید ارزیابی فعال و امتیازهای مربوط به آن ثبت شود.',
            ];
        } elseif (($summaryMetrics['pending'] ?? 0) > 0 && ($summaryMetrics['completed'] ?? 0) === 0) {
            $pageMessages[] = [
                'type' => 'warning',
                'text' => 'برای برخی ارزیابی‌شوندگان هنوز امتیازی ثبت نشده است. لطفاً قبل از Wash-Up نسبت به تکمیل امتیازدهی اقدام کنید.',
            ];
        }

        $canFinalize = $this->userHasAnyRequiredPermission($user, ['results_washup_final']);

        $successMessage = ResponseHelper::getFlash('success');
        $errorMessage = ResponseHelper::getFlash('error');
        $warningMessage = ResponseHelper::getFlash('warning');
        $infoMessage = ResponseHelper::getFlash('info');

        include __DIR__ . '/../Views/organizations/wash-up/index.php';
    }

    public function organizationExcelReport(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationUsersTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
    $this->ensureOrganizationEvaluationExamParticipationsTableExists();
    $this->ensureOrganizationMbtiTypesTableExists();
    $this->ensureOrganizationMbtiTypeFeaturesTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationMatrixVisibilityTableExists();

        $title = 'گزارش اکسل ارزیابی‌شوندگان';
        $organization = $sessionData['organization'] ?? [];
        $user = $sessionData['user'] ?? [];

        $organizationId = (int) ($organization['id'] ?? 0);

        $search = trim((string) ($_GET['search'] ?? ''));
        $statusFilter = trim((string) ($_GET['exam_status'] ?? 'all'));
        if ($statusFilter === '') {
            $statusFilter = 'all';
        }

        $dataset = $this->buildOrganizationExcelReportDataset($organizationId, $search, $statusFilter);

        $excelReportRows = $dataset['filtered_rows'];
        $excelReportSummary = $dataset['status_counters'];
        $excelStatusMeta = $dataset['status_meta'];
        $statusOptions = $dataset['status_options'];

        $successMessage = flash('success');
        $errorMessage = flash('error');
        $warningMessage = flash('warning');
        $infoMessage = flash('info');

        include __DIR__ . '/../Views/organizations/reports/excel.php';
    }

    public function organizationSelfAssessmentResults(): void
    {
        $sessionData = $this->ensureOrganizationSession(['reports_self_view']);

        AuthHelper::startSession();

        $this->ensureOrganizationUsersTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolScoresTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolQuestionsTableExists();
        $this->ensureOrganizationEvaluationExamAnswersTableExists();
        $this->ensureOrganizationEvaluationExamParticipationsTableExists();

        $title = 'نتایج خود ارزیابی کاربران';
        $organization = $sessionData['organization'] ?? [];
        $user = $sessionData['user'] ?? [];

        $organizationId = (int) ($organization['id'] ?? 0);

        $search = trim((string) ($_GET['search'] ?? ''));
        $evaluationFilterInput = UtilityHelper::persianToEnglish(trim((string) ($_GET['evaluation_id'] ?? '0')));
        $evaluationIdFilter = (int) $evaluationFilterInput;
        if ($evaluationIdFilter <= 0) {
            $evaluationIdFilter = null;
        }

        $dataset = $this->buildSelfAssessmentResultsDataset($organizationId, $search, $evaluationIdFilter);

        $selfAssessmentRows = $dataset['rows'];
        $selfAssessmentSummary = $dataset['summary'];
        $evaluationOptions = $dataset['evaluation_options'];
        $selectedEvaluationId = $dataset['selected_evaluation_id'];
        $searchQuery = $dataset['search_term'];

        $successMessage = flash('success');
        $errorMessage = flash('error');
        $warningMessage = flash('warning');
        $infoMessage = flash('info');

        include __DIR__ . '/../Views/organizations/reports/self-assessment.php';
    }

    public function organizationSelfAssessmentCertificate(): void
    {
        $sessionData = $this->ensureOrganizationSession(['reports_self_view']);

        AuthHelper::startSession();

        $this->ensureOrganizationUsersTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationToolQuestionsTableExists();
        $this->ensureOrganizationEvaluationExamAnswersTableExists();
        $this->ensureOrganizationEvaluationExamParticipationsTableExists();

        $organization = $sessionData['organization'] ?? [];
        $user = $sessionData['user'] ?? [];

        $organizationId = (int) ($organization['id'] ?? 0);

        $evaluationId = (int) UtilityHelper::persianToEnglish(trim((string) ($_GET['evaluation_id'] ?? '0')));
        $evaluateeId = (int) UtilityHelper::persianToEnglish(trim((string) ($_GET['evaluatee_id'] ?? '0')));

    $redirectUrl = UtilityHelper::baseUrl('organizations/reports/self-assessment');
    // Optional preview mode to bypass completion gate for authorized org users (owners/admins/settings-managers)
    $previewParam = isset($_GET['preview']) ? trim((string) $_GET['preview']) : '';
    $isPreviewRequested = in_array($previewParam, ['1','true','yes'], true);

        if ($organizationId <= 0 || $evaluationId <= 0 || $evaluateeId <= 0) {
            ResponseHelper::flashError('پارامترهای ورودی نامعتبر است.');
            UtilityHelper::redirect($redirectUrl);
        }

        try {
            $evaluatee = DatabaseHelper::fetchOne(
                'SELECT id, username, national_code, first_name, last_name, personnel_code, organization_post, service_location, created_at AS user_created_at FROM organization_users WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                ['id' => $evaluateeId, 'organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $evaluatee = null;
        }

        if (!$evaluatee) {
            ResponseHelper::flashError('کاربر مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectUrl);
        }

        try {
            $evaluation = DatabaseHelper::fetchOne(
                'SELECT id, title, evaluation_date, general_model, specific_model FROM organization_evaluations WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                ['id' => $evaluationId, 'organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $evaluation = null;
        }

        if (!$evaluation) {
            ResponseHelper::flashError('برنامه ارزیابی یافت نشد.');
            UtilityHelper::redirect($redirectUrl);
        }

        // Check completion: all exam tools of this evaluation completed by this evaluatee
        $examToolIds = [];
        try {
            $rows = DatabaseHelper::fetchAll(
                'SELECT a.tool_id FROM organization_evaluation_tool_assignments a INNER JOIN organization_evaluation_tools t ON t.id = a.tool_id AND t.is_exam = 1 WHERE a.evaluation_id = :evaluation_id',
                ['evaluation_id' => $evaluationId]
            );
        } catch (Exception $exception) {
            $rows = [];
        }
        foreach ($rows as $r) {
            $tid = (int) ($r['tool_id'] ?? 0);
            if ($tid > 0) { $examToolIds[$tid] = true; }
        }
        $examToolIds = array_keys($examToolIds);

    $canView = false;
        if (!empty($examToolIds)) {
            // Count questions per tool
            $placeholders = implode(',', array_fill(0, count($examToolIds), '?'));
            try {
                $qRows = DatabaseHelper::fetchAll(
                    "SELECT evaluation_tool_id AS tool_id, COUNT(*) AS total_q FROM organization_evaluation_tool_questions WHERE evaluation_tool_id IN ({$placeholders}) GROUP BY evaluation_tool_id",
                    $examToolIds
                );
            } catch (Exception $exception) {
                $qRows = [];
            }
            $questionCounts = [];
            foreach ($qRows as $qr) {
                $questionCounts[(int) ($qr['tool_id'] ?? 0)] = (int) ($qr['total_q'] ?? 0);
            }

            // Answer counts per tool for this evaluation/evaluatee
            try {
                $aRows = DatabaseHelper::fetchAll(
                    'SELECT tool_id, COUNT(*) AS total_answers FROM organization_evaluation_exam_answers WHERE organization_id = :organization_id AND evaluation_id = :evaluation_id AND evaluatee_id = :evaluatee_id GROUP BY tool_id',
                    ['organization_id' => $organizationId, 'evaluation_id' => $evaluationId, 'evaluatee_id' => $evaluateeId]
                );
            } catch (Exception $exception) {
                $aRows = [];
            }
            $answerCounts = [];
            foreach ($aRows as $ar) {
                $answerCounts[(int) ($ar['tool_id'] ?? 0)] = (int) ($ar['total_answers'] ?? 0);
            }

            // Participation flags (for tools with 0 questions)
            try {
                $pRows = DatabaseHelper::fetchAll(
                    'SELECT tool_id, MAX(is_completed) AS is_completed FROM organization_evaluation_exam_participations WHERE organization_id = :organization_id AND evaluation_id = :evaluation_id AND evaluatee_id = :evaluatee_id GROUP BY tool_id',
                    ['organization_id' => $organizationId, 'evaluation_id' => $evaluationId, 'evaluatee_id' => $evaluateeId]
                );
            } catch (Exception $exception) {
                $pRows = [];
            }
            $participationFlags = [];
            foreach ($pRows as $pr) {
                $participationFlags[(int) ($pr['tool_id'] ?? 0)] = ((int) ($pr['is_completed'] ?? 0) === 1);
            }

            $allOk = true;
            foreach ($examToolIds as $tid) {
                $need = (int) ($questionCounts[$tid] ?? 0);
                $have = (int) ($answerCounts[$tid] ?? 0);
                $completedFlag = !empty($participationFlags[$tid]);

                if ($need > 0) {
                    if ($have < $need) { $allOk = false; break; }
                } else {
                    if (!$completedFlag) { $allOk = false; break; }
                }
            }
            
            // Also check if WashUp is completed (at least one agreed score exists)
            if ($allOk) {
                $this->ensureOrganizationEvaluationAgreedScoresTableExists();
                try {
                    $washupCount = DatabaseHelper::fetchOne(
                        'SELECT COUNT(*) AS cnt
                         FROM organization_evaluation_agreed_scores
                         WHERE organization_id = :organization_id
                           AND evaluation_id = :evaluation_id
                           AND evaluatee_id = :evaluatee_id
                           AND agreed_score IS NOT NULL
                         LIMIT 1',
                        [
                            'organization_id' => $organizationId,
                            'evaluation_id' => $evaluationId,
                            'evaluatee_id' => $evaluateeId,
                        ]
                    );
                    $washupDone = isset($washupCount['cnt']) && (int) $washupCount['cnt'] > 0;
                } catch (Exception $exception) {
                    $washupDone = false;
                }
                
                if (!$washupDone) {
                    $allOk = false;
                }
            }
            
            $canView = $allOk;
        }

        // Allow preview for privileged users
        if (!$canView && $isPreviewRequested) {
            $userRaw = $sessionData['user'] ?? [];
            $accountSourceRaw = (string) ($userRaw['account_source'] ?? '');
            $accountSource = function_exists('mb_strtolower') ? mb_strtolower($accountSourceRaw, 'UTF-8') : strtolower($accountSourceRaw);
            $isOrgOwner = ($accountSource === 'organizations');
            $flags = isset($userRaw['organization_user_flags']) && is_array($userRaw['organization_user_flags']) ? $userRaw['organization_user_flags'] : [];
            $isSystemAdmin = ((int)($flags['is_system_admin'] ?? 0) === 1);
            $perms = isset($userRaw['permissions']) && is_array($userRaw['permissions']) ? $userRaw['permissions'] : [];
            $hasReportsSettingsManage = in_array('reports_settings_manage', $perms, true);
            if ($isOrgOwner || $isSystemAdmin || $hasReportsSettingsManage) {
                $canView = true; // preview bypass
            }
        }

        if (!$canView) {
            ResponseHelper::flashWarning('این گواهی تنها پس از تکمیل تمامی آزمون‌ها و WashUp این برنامه ارزیابی در دسترس است.');
            UtilityHelper::redirect($redirectUrl);
        }

        $fullName = trim((string) ($evaluatee['first_name'] ?? '') . ' ' . (string) ($evaluatee['last_name'] ?? ''));
        if ($fullName === '') {
            $fullName = trim((string) ($evaluatee['username'] ?? ''));
        }
        if ($fullName === '') { $fullName = 'ارزیابی‌شونده'; }

        $evaluationTitle = trim((string) ($evaluation['title'] ?? ''));
        if ($evaluationTitle === '') { $evaluationTitle = 'برنامه ارزیابی #' . UtilityHelper::englishToPersian((string) $evaluationId); }

        $specificModelRaw = trim((string) ($evaluation['specific_model'] ?? ''));
        $generalModelRaw = trim((string) ($evaluation['general_model'] ?? ''));
        $competencyModelDisplay = '—';
        $competencyModelId = 0;
        if ($specificModelRaw !== '') {
            $specificModelMeta = $this->resolveCompetencyModelByLabel($organizationId, $specificModelRaw);
            $competencyModelDisplay = !empty($specificModelMeta['title']) ? $specificModelMeta['title'] : $specificModelRaw;
            $competencyModelId = (int) ($specificModelMeta['id'] ?? 0);
        } elseif ($generalModelRaw !== '') {
            $generalModelMeta = $this->resolveCompetencyModelByLabel($organizationId, $generalModelRaw);
            $competencyModelDisplay = !empty($generalModelMeta['title']) ? $generalModelMeta['title'] : $generalModelRaw;
            $competencyModelId = (int) ($generalModelMeta['id'] ?? 0);
        }

        // Resolve model image path (for Page 5) and competencies list (for Page 6)
        $competencyModelImagePath = null;
        $modelCompetenciesForPage6 = [];
        if ($competencyModelId > 0) {
            // Ensure table exists before reading image path (defensive in new installs)
            $this->ensureOrganizationCompetencyModelsTableExists();
            try {
                $modelRow = DatabaseHelper::fetchOne(
                    'SELECT image_path FROM organization_competency_models WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                    ['id' => $competencyModelId, 'organization_id' => $organizationId]
                );
            } catch (Exception $exception) {
                $modelRow = null;
            }
            if ($modelRow && !empty($modelRow['image_path'])) {
                $competencyModelImagePath = (string) $modelRow['image_path'];
            }

            // Load competencies with definitions for the selected model
            $this->ensureOrganizationCompetenciesTableExists();
            $this->ensureOrganizationCompetencyModelItemsTableExists();
            $this->ensureOrganizationCompetencyDimensionsTableExists();
            $modelCompetenciesForPage6 = $this->loadCompetenciesForModel($organizationId, $competencyModelId);
        }

        $dateMeta = $this->formatEvaluationPersianDate($evaluation['evaluation_date'] ?? null);

    $orgName = (string) ($organization['name'] ?? '');
    $orgLogoUrl = null;
        try {
            $orgRecord = $this->fetchOrganization($organizationId);
        } catch (Exception $exception) {
            $orgRecord = null;
        }
        if ($orgRecord) {
            $orgName = $orgRecord['name'] ?? $orgName;
            if (!empty($orgRecord['report_cover_logo_path'])) {
                $orgLogoUrl = UtilityHelper::baseUrl('public/' . ltrim((string) $orgRecord['report_cover_logo_path'], '/'));
            } elseif (!empty($orgRecord['logo_path'])) {
                $orgLogoUrl = UtilityHelper::baseUrl('public/' . ltrim((string) $orgRecord['logo_path'], '/'));
            }
        }
        if (!$orgLogoUrl) {
            $orgLogoUrl = UtilityHelper::baseUrl('public/assets/images/logo/logo.png');
        }

        // Resolve system logo url from settings for builder logo components (system source)
        $systemLogoUrl = UtilityHelper::baseUrl('public/assets/images/logo/logo.png');
        try {
            $sysRow = DatabaseHelper::fetchOne('SELECT site_name, system_logo_path FROM system_settings ORDER BY id ASC LIMIT 1');
            if ($sysRow && !empty($sysRow['system_logo_path'])) {
                $rel = ltrim((string) $sysRow['system_logo_path'], '/');
                if (strpos($rel, 'public/') === 0) {
                    $systemLogoUrl = UtilityHelper::baseUrl($rel);
                } else {
                    $systemLogoUrl = UtilityHelper::baseUrl('public/' . $rel);
                }
            }
        } catch (Exception $e) {
            // keep default
        }

        // Load per-organization certificate settings
    $this->ensureOrganizationCertificateSettingsTableExists();
    $this->ensureOrganizationEvaluationToolsTableExists();
        $certificateSettings = [
            'title_ribbon_text' => 'گواهی پایان دوره',
            'statement_text' => 'گزارش بازخورد',
            'show_org_logo' => 1,
            'show_signatures' => 1,
            'enable_decorations' => 1,
            'pdf_mode' => 'simple',
            'extra_footer_text' => null,
            'enable_second_page' => 0,
            'second_page_image_path' => null,
            'second_page_title_ribbon_text' => 'جزئیات ارزیابی‌شونده',
        ];
        try {
            $settingsRow = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_certificate_settings WHERE organization_id = :organization_id LIMIT 1',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $settingsRow = null;
        }
        if ($settingsRow) {
            $certificateSettings['title_ribbon_text'] = (string)($settingsRow['title_ribbon_text'] ?? $certificateSettings['title_ribbon_text']);
            $certificateSettings['statement_text'] = (string)($settingsRow['statement_text'] ?? $certificateSettings['statement_text']);
            $tpl = (string)($settingsRow['template_key'] ?? 'classic');
            $certificateSettings['template_key'] = in_array($tpl, ['classic','minimal','bordered'], true) ? $tpl : 'classic';
            $certificateSettings['show_org_logo'] = (int)($settingsRow['show_org_logo'] ?? 1);
            $certificateSettings['show_signatures'] = (int)($settingsRow['show_signatures'] ?? 1);
            $certificateSettings['enable_decorations'] = (int)($settingsRow['enable_decorations'] ?? 1);
            $pdfModeVal = (string)($settingsRow['pdf_mode'] ?? 'simple');
            $certificateSettings['pdf_mode'] = in_array($pdfModeVal, ['simple','full'], true) ? $pdfModeVal : 'simple';
            $certificateSettings['extra_footer_text'] = $settingsRow['extra_footer_text'] ?? null;
            $certificateSettings['enable_second_page'] = (int)($settingsRow['enable_second_page'] ?? 0);
            $certificateSettings['second_page_image_path'] = $settingsRow['second_page_image_path'] ?? null;
            if (!empty($settingsRow['second_page_title_ribbon_text'])) {
                $certificateSettings['second_page_title_ribbon_text'] = (string)$settingsRow['second_page_title_ribbon_text'];
            }
            // Third page
            $certificateSettings['enable_third_page'] = (int)($settingsRow['enable_third_page'] ?? 0);
            if (!empty($settingsRow['third_page_title_ribbon_text'])) {
                $certificateSettings['third_page_title_ribbon_text'] = (string)$settingsRow['third_page_title_ribbon_text'];
            }
            $certificateSettings['third_page_image_path'] = $settingsRow['third_page_image_path'] ?? null;
            $certificateSettings['third_page_image_width_mm'] = $settingsRow['third_page_image_width_mm'] ?? null;
            $certificateSettings['third_page_image_height_mm'] = $settingsRow['third_page_image_height_mm'] ?? null;
            $itemsJson = $settingsRow['third_page_items_json'] ?? null;
            if (is_string($itemsJson) && $itemsJson !== '') {
                $decoded = json_decode($itemsJson, true);
                if (is_array($decoded)) {
                    $certificateSettings['third_page_items'] = $decoded;
                }
            }
            // page order
            $orderJson = $settingsRow['page_order_json'] ?? null;
            if (is_string($orderJson) && $orderJson !== '') {
                $decodedOrder = json_decode($orderJson, true);
                if (is_array($decodedOrder)) {
                    $certificateSettings['page_order'] = $decodedOrder;
                }
            }
            // Fourth page
            $certificateSettings['enable_fourth_page'] = (int)($settingsRow['enable_fourth_page'] ?? 0);
            if (!empty($settingsRow['fourth_page_title_ribbon_text'])) {
                $certificateSettings['fourth_page_title_ribbon_text'] = (string)$settingsRow['fourth_page_title_ribbon_text'];
            }
            $certificateSettings['fourth_page_text'] = $settingsRow['fourth_page_text'] ?? null;
            $certificateSettings['fourth_page_text_align'] = $settingsRow['fourth_page_text_align'] ?? null;
            $certificateSettings['fourth_page_image_path'] = $settingsRow['fourth_page_image_path'] ?? null;
            $certificateSettings['fourth_page_image_width_mm'] = $settingsRow['fourth_page_image_width_mm'] ?? null;
            $certificateSettings['fourth_page_image_height_mm'] = $settingsRow['fourth_page_image_height_mm'] ?? null;

            // Fifth page
            $certificateSettings['enable_fifth_page'] = (int)($settingsRow['enable_fifth_page'] ?? 0);
            if (!empty($settingsRow['fifth_page_title_ribbon_text'])) {
                $certificateSettings['fifth_page_title_ribbon_text'] = (string)$settingsRow['fifth_page_title_ribbon_text'];
            }
            $certificateSettings['fifth_page_text'] = $settingsRow['fifth_page_text'] ?? null;
            $certificateSettings['fifth_page_text_align'] = $settingsRow['fifth_page_text_align'] ?? null;
            // Sixth page
            $certificateSettings['enable_sixth_page'] = (int)($settingsRow['enable_sixth_page'] ?? 0);
            if (!empty($settingsRow['sixth_page_title_ribbon_text'])) {
                $certificateSettings['sixth_page_title_ribbon_text'] = (string)$settingsRow['sixth_page_title_ribbon_text'];
            }
            $certificateSettings['sixth_page_text'] = $settingsRow['sixth_page_text'] ?? null;
            $certificateSettings['sixth_page_text_align'] = $settingsRow['sixth_page_text_align'] ?? null;
            // Seventh page
            $certificateSettings['enable_seventh_page'] = (int)($settingsRow['enable_seventh_page'] ?? 0);
            if (!empty($settingsRow['seventh_page_title_ribbon_text'])) {
                $certificateSettings['seventh_page_title_ribbon_text'] = (string)$settingsRow['seventh_page_title_ribbon_text'];
            }
            $certificateSettings['seventh_page_text'] = $settingsRow['seventh_page_text'] ?? null;
            $certificateSettings['seventh_page_text_align'] = $settingsRow['seventh_page_text_align'] ?? null;
            $certificateSettings['seventh_page_image_path'] = $settingsRow['seventh_page_image_path'] ?? null;
            // Eighth page
            $certificateSettings['enable_eighth_page'] = (int)($settingsRow['enable_eighth_page'] ?? 0);
            if (!empty($settingsRow['eighth_page_title_ribbon_text'])) {
                $certificateSettings['eighth_page_title_ribbon_text'] = (string)$settingsRow['eighth_page_title_ribbon_text'];
            }
            // Ninth page
            $certificateSettings['enable_ninth_page'] = (int)($settingsRow['enable_ninth_page'] ?? 0);
            if (!empty($settingsRow['ninth_page_title_ribbon_text'])) {
                $certificateSettings['ninth_page_title_ribbon_text'] = (string)$settingsRow['ninth_page_title_ribbon_text'];
            }
            $certificateSettings['ninth_page_text'] = $settingsRow['ninth_page_text'] ?? null;
            $certificateSettings['ninth_page_text_align'] = $settingsRow['ninth_page_text_align'] ?? null;

            // Tenth page (MBTI intro)
            $certificateSettings['enable_tenth_page'] = (int)($settingsRow['enable_tenth_page'] ?? 0);
            if (!empty($settingsRow['tenth_page_title_ribbon_text'])) {
                $certificateSettings['tenth_page_title_ribbon_text'] = (string)$settingsRow['tenth_page_title_ribbon_text'];
            }
            $certificateSettings['tenth_page_text'] = $settingsRow['tenth_page_text'] ?? null;
            $certificateSettings['tenth_page_text_align'] = $settingsRow['tenth_page_text_align'] ?? null;

            // Eleventh page (MBTI results)
            $certificateSettings['enable_eleventh_page'] = (int)($settingsRow['enable_eleventh_page'] ?? 0);
            if (!empty($settingsRow['eleventh_page_title_ribbon_text'])) {
                $certificateSettings['eleventh_page_title_ribbon_text'] = (string)$settingsRow['eleventh_page_title_ribbon_text'];
            }
            $certificateSettings['eleventh_page_text'] = $settingsRow['eleventh_page_text'] ?? null;
            $certificateSettings['eleventh_page_text_align'] = $settingsRow['eleventh_page_text_align'] ?? null;

            // Thirteenth page (DISC results)
            $certificateSettings['enable_thirteenth_page'] = (int)($settingsRow['enable_thirteenth_page'] ?? 0);
            if (!empty($settingsRow['thirteenth_page_title_ribbon_text'])) {
                $certificateSettings['thirteenth_page_title_ribbon_text'] = (string)$settingsRow['thirteenth_page_title_ribbon_text'];
            }
            $certificateSettings['thirteenth_page_text'] = $settingsRow['thirteenth_page_text'] ?? null;
            $certificateSettings['thirteenth_page_text_align'] = $settingsRow['thirteenth_page_text_align'] ?? null;

            // Fifteenth page (Analytical Thinking results)
            $certificateSettings['enable_fifteenth_page'] = (int)($settingsRow['enable_fifteenth_page'] ?? 0);
            if (!empty($settingsRow['fifteenth_page_title_ribbon_text'])) {
                $certificateSettings['fifteenth_page_title_ribbon_text'] = (string)$settingsRow['fifteenth_page_title_ribbon_text'];
            }
            $certificateSettings['fifteenth_page_text'] = $settingsRow['fifteenth_page_text'] ?? null;
            $certificateSettings['fifteenth_page_text_align'] = $settingsRow['fifteenth_page_text_align'] ?? null;

            // Normalize page order: allow only enabled pages, and append missing enabled ones
            $allowedSlugs = ['details', 'toc', 'page4', 'page5', 'page6', 'page7', 'page8', 'page9', 'page10', 'page11', 'page13', 'page15'];
            $enabled = [
                'details' => ((int)($certificateSettings['enable_second_page'] ?? 0) === 1),
                'toc' => ((int)($certificateSettings['enable_third_page'] ?? 0) === 1),
                'page4' => ((int)($certificateSettings['enable_fourth_page'] ?? 0) === 1),
                'page5' => ((int)($certificateSettings['enable_fifth_page'] ?? 0) === 1),
                'page6' => ((int)($certificateSettings['enable_sixth_page'] ?? 0) === 1),
                'page7' => ((int)($certificateSettings['enable_seventh_page'] ?? 0) === 1),
                'page8' => ((int)($certificateSettings['enable_eighth_page'] ?? 0) === 1),
                'page9' => ((int)($certificateSettings['enable_ninth_page'] ?? 0) === 1),
                'page10' => ((int)($certificateSettings['enable_tenth_page'] ?? 0) === 1),
                'page11' => ((int)($certificateSettings['enable_eleventh_page'] ?? 0) === 1),
                'page13' => ((int)($certificateSettings['enable_thirteenth_page'] ?? 0) === 1),
                'page15' => ((int)($certificateSettings['enable_fifteenth_page'] ?? 0) === 1),
            ];
            $currentOrder = isset($certificateSettings['page_order']) && is_array($certificateSettings['page_order']) ? $certificateSettings['page_order'] : [];
            $normalized = [];
            foreach ($currentOrder as $slug) {
                $s = (string)$slug;
                if (!in_array($s, $allowedSlugs, true)) { continue; }
                if (!$enabled[$s]) { continue; }
                if (!in_array($s, $normalized, true)) { $normalized[] = $s; }
            }
            foreach ($allowedSlugs as $s) {
                if ($enabled[$s] && !in_array($s, $normalized, true)) { $normalized[] = $s; }
            }
            if (!empty($normalized)) {
                $certificateSettings['page_order'] = $normalized;
            }
        }

        // Prepare tools list for Page 8 (نام ابزار و تعریف ابزار) for the current evaluation
        $toolsForPage8 = [];
        try {
            $toolsForPage8 = DatabaseHelper::fetchAll(
                'SELECT t.name AS tool_name, t.description AS tool_description
                 FROM organization_evaluation_tool_assignments a
                 INNER JOIN organization_evaluation_tools t ON t.id = a.tool_id AND t.organization_id = :organization_id
                 WHERE a.evaluation_id = :evaluation_id
                 ORDER BY a.sort_order ASC, a.id ASC',
                ['organization_id' => $organizationId, 'evaluation_id' => $evaluationId]
            ) ?: [];
        } catch (Exception $exception) {
            $toolsForPage8 = [];
        }

        // attach to settings to be accessible in the view
        $certificateSettings['page8_tools'] = $toolsForPage8;

        // Ninth page: load items from settings if any (score, description, result)
        $ninthItems = [];
        if (!empty($settingsRow['ninth_page_items_json'])) {
            $decoded9 = json_decode((string)$settingsRow['ninth_page_items_json'], true);
            if (is_array($decoded9)) { $ninthItems = $decoded9; }
        }
        $certificateSettings['ninth_page_items'] = $ninthItems;

        // Build MBTI data for pages 10-11
        $mbtiData = [
            'has_mbti' => false,
            'type_code' => '',
            'counts' => [],
            'axes' => [],
            'type_title' => '',
            'type_summary' => '',
            'type_description' => '',
            'cognitive_functions' => '',
        ];

        try {
            $rows = DatabaseHelper::fetchAll(
                'SELECT a.tool_id, a.question_id, a.answer_id
                 FROM organization_evaluation_exam_answers a
                 INNER JOIN organization_evaluation_tools t ON t.id = a.tool_id
                 WHERE a.organization_id = :organization_id
                   AND a.evaluation_id = :evaluation_id
                   AND a.evaluatee_id = :evaluatee_id
                   AND (
                        LOWER(t.calculation_formula) LIKE "%mbti%"
                        OR LOWER(t.question_type) LIKE "%mbti%"
                   )',
                [
                    'organization_id' => $organizationId,
                    'evaluation_id' => $evaluationId,
                    'evaluatee_id' => $evaluateeId,
                ]
            );
        } catch (Exception $e) {
            $rows = [];
        }

        if (!empty($rows)) {
            $optionsByTool = [];
            $counts = [];
            foreach ($rows as $r) {
                $tid = (int)($r['tool_id'] ?? 0);
                $qid = (int)($r['question_id'] ?? 0);
                $aid = (int)($r['answer_id'] ?? 0);
                if ($tid <= 0 || $qid <= 0 || $aid <= 0) { continue; }
                if (!isset($optionsByTool[$tid])) {
                    $optionsByTool[$tid] = $this->loadToolAnswerOptions($organizationId, $tid);
                }
                $opt = $optionsByTool[$tid][$qid][$aid] ?? null;
                if (!$opt) { continue; }
                $score = strtoupper((string)($opt['character_score'] ?? ''));
                if ($score === '') { continue; }
                $letters = preg_split('//u', $score, -1, PREG_SPLIT_NO_EMPTY);
                foreach ($letters as $letter) {
                    if (preg_match('/^[EISNTFJP]$/u', $letter)) {
                        $counts[$letter] = ($counts[$letter] ?? 0) + 1;
                    }
                }
            }

            if (!empty($counts)) {
                $typeCode = $this->deriveMbtiTypeFromCounts($counts);
                $axes = [];
                $pairs = [ ['E','I'], ['S','N'], ['T','F'], ['J','P'] ];
                foreach ($pairs as $pair) {
                    [$a,$b] = $pair;
                    $ca = (int)($counts[$a] ?? 0);
                    $cb = (int)($counts[$b] ?? 0);
                    $total = max(1, $ca + $cb);
                    $axes[$a.$b] = [
                        $a => $ca,
                        $b => $cb,
                        $a.'_pct' => round($ca * 100 / $total),
                        $b.'_pct' => round($cb * 100 / $total),
                    ];
                }

                $mbtiData['has_mbti'] = $typeCode !== '';
                $mbtiData['type_code'] = $typeCode;
                $mbtiData['counts'] = $counts;
                $mbtiData['axes'] = $axes;

                if ($typeCode !== '') {
                    try {
                        $typeRow = DatabaseHelper::fetchOne(
                            'SELECT id, title, summary, cognitive_functions, description FROM organization_mbti_types WHERE organization_id = :organization_id AND UPPER(type_code) = :type_code LIMIT 1',
                            [ 'organization_id' => $organizationId, 'type_code' => strtoupper($typeCode) ]
                        );
                    } catch (Exception $e) {
                        $typeRow = null;
                    }
                    if ($typeRow) {
                        $mbtiData['type_title'] = (string)($typeRow['title'] ?? '');
                        $mbtiData['type_summary'] = (string)($typeRow['summary'] ?? '');
                        $mbtiData['cognitive_functions'] = (string)($typeRow['cognitive_functions'] ?? '');
                        $mbtiData['type_description'] = (string)($typeRow['description'] ?? '');
                        $mbtiTypeId = (int)($typeRow['id'] ?? 0);
                        if ($mbtiTypeId > 0) {
                            // Load features grouped by category
                            try {
                                $featRows = DatabaseHelper::fetchAll(
                                    'SELECT category, feature_text, sort_order, id FROM organization_mbti_type_features WHERE organization_id = :organization_id AND mbti_type_id = :mbti_type_id ORDER BY category ASC, sort_order ASC, id ASC',
                                    [ 'organization_id' => $organizationId, 'mbti_type_id' => $mbtiTypeId ]
                                );
                            } catch (Exception $e) {
                                $featRows = [];
                            }
                            if (!empty($featRows)) {
                                $featuresByCategory = [];
                                foreach ($featRows as $fr) {
                                    $cat = trim((string)($fr['category'] ?? ''));
                                    if ($cat === '') { $cat = 'ویژگی‌ها'; }
                                    $txt = trim((string)($fr['feature_text'] ?? ''));
                                    if ($txt === '') { continue; }
                                    if (!isset($featuresByCategory[$cat])) { $featuresByCategory[$cat] = []; }
                                    $featuresByCategory[$cat][] = $txt;
                                }
                                if (!empty($featuresByCategory)) {
                                    $mbtiData['features'] = $featuresByCategory;
                                }
                            }
                        }
                    }
                }
            }
        }

        $certificateSettings['mbti'] = $mbtiData;
        
        // Build DISC data for page 13
        $discData = [
            'has_disc' => false,
            'best_counts' => ['D'=>0,'I'=>0,'S'=>0,'C'=>0],
            'least_counts' => ['D'=>0,'I'=>0,'S'=>0,'C'=>0],
            'best_total' => 0,
            'least_total' => 0,
            'primary_code' => '',
            'primary_label' => '',
            'primary_meta' => null,
            'secondary_code' => '',
            'secondary_label' => '',
            'secondary_meta' => null,
        ];
        try {
            $rowsDisc = DatabaseHelper::fetchAll(
                'SELECT a.disc_best_answer_code, a.disc_least_answer_code
                 FROM organization_evaluation_exam_answers a
                 INNER JOIN organization_evaluation_tools t ON t.id = a.tool_id
                 WHERE a.organization_id = :organization_id
                   AND a.evaluation_id = :evaluation_id
                   AND a.evaluatee_id = :evaluatee_id
                   AND (
                        LOWER(t.calculation_formula) LIKE "%disc%"
                        OR LOWER(t.question_type) LIKE "%disc%"
                   )',
                [
                    'organization_id' => $organizationId,
                    'evaluation_id' => $evaluationId,
                    'evaluatee_id' => $evaluateeId,
                ]
            ) ?: [];
        } catch (Exception $e) {
            $rowsDisc = [];
        }
        if (!empty($rowsDisc)) {
            foreach ($rowsDisc as $r) {
                $best = (string)($r['disc_best_answer_code'] ?? '');
                $least = (string)($r['disc_least_answer_code'] ?? '');
                $bestN = $this->normalizeDiscTypeCode($best);
                $leastN = $this->normalizeDiscTypeCode($least);
                if (preg_match('/^[DISC]$/', $bestN)) { $discData['best_counts'][$bestN]++; }
                if (preg_match('/^[DISC]$/', $leastN)) { $discData['least_counts'][$leastN]++; }
            }
            $discData['best_total'] = (int) array_sum($discData['best_counts']);
            $discData['least_total'] = (int) array_sum($discData['least_counts']);
            $discData['has_disc'] = ($discData['best_total'] + $discData['least_total']) > 0;
        
            if ($discData['best_total'] > 0) {
                // Determine top two for secondary combo
                $orderPref = ['D','I','S','C'];
                // sort by counts desc, tie-breaker by orderPref
                uksort($discData['best_counts'], function($a,$b) use ($discData,$orderPref){
                    $da = $discData['best_counts'][$a];
                    $db = $discData['best_counts'][$b];
                    if ($da === $db) { return array_search($a,$orderPref,true) <=> array_search($b,$orderPref,true); }
                    return $db <=> $da;
                });
                $keys = array_keys($discData['best_counts']);
                $top1 = $keys[0] ?? '';
                $top2 = $keys[1] ?? '';
                if ($top1 !== '') {
                    $discData['primary_code'] = $top1;
                    $discData['primary_label'] = $this->getDiscTypeLabel($top1);
                    try {
                        $pm = DatabaseHelper::fetchOne(
                            'SELECT * FROM organization_disc_personality_types WHERE organization_id = :organization_id AND scope = :scope AND disc_type_code = :code LIMIT 1',
                            [ 'organization_id' => $organizationId, 'scope' => 'primary', 'code' => $top1 ]
                        );
                    } catch (Exception $e) { $pm = null; }
                    if ($pm) { $discData['primary_meta'] = $pm; }
                }
                if ($top1 !== '' && $top2 !== '') {
                    $combo = $top1 . '/' . $top2;
                    $discData['secondary_code'] = $combo;
                    $discData['secondary_label'] = $this->getDiscTypeLabel($combo);
                    try {
                        $sm = DatabaseHelper::fetchOne(
                            'SELECT * FROM organization_disc_personality_types WHERE organization_id = :organization_id AND scope = :scope AND disc_type_code = :code LIMIT 1',
                            [ 'organization_id' => $organizationId, 'scope' => 'secondary', 'code' => $combo ]
                        );
                    } catch (Exception $e) { $sm = null; }
                    if ($sm) { $discData['secondary_meta'] = $sm; }
                }
            }
        }
        $certificateSettings['disc'] = $discData;

        $publicProfileDataset = $this->buildPublicProfileDatasetFromAnswers($organizationId, $evaluationId, $evaluateeId);
        if (!empty($publicProfileDataset)) {
            $certificateSettings['public_profile'] = $publicProfileDataset;
        }
        
        // Build Analytical Thinking data for page 15
        $analyticalData = [
            'has_analytical' => false,
            'answered' => 0,
            'correct' => 0,
            'incorrect' => 0,
            'percent' => 0,
            'score' => 0,
            'total_questions' => 0,
        ];
        try {
            $rowsAnalytical = DatabaseHelper::fetchAll(
                'SELECT a.answer_id, a.answer_code, ans.is_correct
                 FROM organization_evaluation_exam_answers a
                 INNER JOIN organization_evaluation_tools t ON t.id = a.tool_id
                 LEFT JOIN organization_evaluation_tool_answers ans
                   ON ans.id = a.answer_id AND ans.evaluation_tool_id = a.tool_id AND ans.question_id = a.question_id
                 WHERE a.organization_id = :organization_id
                   AND a.evaluation_id = :evaluation_id
                   AND a.evaluatee_id = :evaluatee_id
                   AND (
                        LOWER(t.calculation_formula) LIKE "%analytical%"
                        OR LOWER(t.question_type) LIKE "%analytical%"
                        OR LOWER(t.code) LIKE "%analytical%"
                        OR LOWER(t.name) LIKE "%analytical%"
                        OR t.name LIKE "%تحلیلی%"
                        OR t.code LIKE "%تحلیلی%"
                        OR t.name LIKE "%تفکر تحلیلی%"
                   )',
                [
                    'organization_id' => $organizationId,
                    'evaluation_id' => $evaluationId,
                    'evaluatee_id' => $evaluateeId,
                ]
            ) ?: [];
        } catch (Exception $e) {
            $rowsAnalytical = [];
        }
        if (!empty($rowsAnalytical)) {
            $answered = 0; $correct = 0;
            foreach ($rowsAnalytical as $r) {
                $aid = $r['answer_id'] ?? null; $acode = $r['answer_code'] ?? null;
                if ($aid !== null || ($acode !== null && trim((string)$acode) !== '')) {
                    $answered++;
                    if ((int)($r['is_correct'] ?? 0) === 1) { $correct++; }
                }
            }

            // Determine analytical tool IDs for this evaluation
            $analyticalToolIds = [];
            try {
                $toolRows = DatabaseHelper::fetchAll(
                    'SELECT a.tool_id, t.name AS tool_name
                     FROM organization_evaluation_tool_assignments a
                     INNER JOIN organization_evaluation_tools t ON t.id = a.tool_id AND t.organization_id = a.organization_id
                     WHERE a.organization_id = :organization_id AND a.evaluation_id = :evaluation_id
                       AND (
                            LOWER(t.calculation_formula) LIKE "%analytical%"
                            OR LOWER(t.question_type) LIKE "%analytical%"
                            OR LOWER(t.code) LIKE "%analytical%"
                            OR LOWER(t.name) LIKE "%analytical%"
                            OR t.name LIKE "%تحلیلی%"
                            OR t.code LIKE "%تحلیلی%"
                            OR t.name LIKE "%تفکر تحلیلی%"
                       )',
                    [
                        'organization_id' => $organizationId,
                        'evaluation_id' => $evaluationId,
                    ]
                ) ?: [];
            } catch (Exception $e) {
                $toolRows = [];
            }
            foreach ($toolRows as $tr) {
                $tid = (int) ($tr['tool_id'] ?? 0);
                if ($tid > 0) { $analyticalToolIds[$tid] = true; }
            }
            $analyticalToolIds = array_keys($analyticalToolIds);

            // If exactly one analytical tool matched, expose its name for display/debugging
            if (count($toolRows) === 1) {
                $toolName = trim((string) ($toolRows[0]['tool_name'] ?? ''));
                if ($toolName !== '') {
                    $analyticalData['source_tool'] = $toolName;
                }
            }

            // Count total questions across analytical tools (for proper scoring base)
            $totalQuestions = 0;
            if (!empty($analyticalToolIds)) {
                $placeholders = implode(',', array_fill(0, count($analyticalToolIds), '?'));
                try {
                    $qRowsAnalytical = DatabaseHelper::fetchAll(
                        "SELECT evaluation_tool_id AS tool_id, COUNT(*) AS total_q FROM organization_evaluation_tool_questions WHERE evaluation_tool_id IN ({$placeholders}) GROUP BY evaluation_tool_id",
                        $analyticalToolIds
                    );
                } catch (Exception $e) {
                    $qRowsAnalytical = [];
                }
                foreach ($qRowsAnalytical as $qr) {
                    $totalQuestions += (int) ($qr['total_q'] ?? 0);
                }
            }

            // Compute percent based on totalQuestions when available; fallback to answered-based percent
            $percent = 0;
            if ($totalQuestions > 0) {
                $percent = (int) round(($correct * 100) / $totalQuestions);
            } elseif ($answered > 0) {
                $percent = (int) round(($correct * 100) / $answered);
            }

            $analyticalData['answered'] = $answered;
            $analyticalData['correct'] = $correct;
            $analyticalData['incorrect'] = max(0, $answered - $correct);
            $analyticalData['total_questions'] = $totalQuestions;
            $analyticalData['percent'] = max(0, min(100, $percent));
            $analyticalData['score'] = $analyticalData['percent'];
            $analyticalData['has_analytical'] = ($answered > 0 || $totalQuestions > 0);
        }
        $certificateSettings['analytical'] = $analyticalData;

        // If advanced builder template is configured, render certificate using builder pages/components
        $hasBuilder = isset($settingsRow) && is_array($settingsRow) && !empty($settingsRow['builder_state_json']);
        if ($hasBuilder) {
            $builderStateRaw = (string) $settingsRow['builder_state_json'];
            $decodedState = json_decode($builderStateRaw, true);
            if (is_array($decodedState)) {
                $builderState = $this->sanitizeCertificateBuilderState($decodedState);
                $pages = isset($builderState['pages']) && is_array($builderState['pages']) ? $builderState['pages'] : [];
                if (!empty($pages)) {
                    // Prepare component library map
                    $componentLibrary = $this->getCertificateBuilderComponentLibrary();
                    $componentMap = [];
                    foreach ($componentLibrary as $component) {
                        $typeKey = isset($component['type']) ? (string) $component['type'] : '';
                        if ($typeKey !== '') { $componentMap[$typeKey] = $component; }
                    }

                    // Prepare sample data baseline then enrich with real subject/org/evaluation
                    $sampleData = $this->getCertificatePreviewSampleData($organization, $user);
                    // Organization & evaluation meta
                    $sampleData['organization_name'] = $orgName;
                    // Ensure logo urls are available to builder components
                    $sampleData['organization_logo_url'] = $orgLogoUrl;
                    $sampleData['system_logo_url'] = $systemLogoUrl;
                    // Also attach to organization object for components reading from $organization
                    if (is_array($organization)) {
                        $organization['logo_url'] = $orgLogoUrl;
                    }
                    $sampleData['evaluation_title'] = $evaluationTitle;
                    if (!empty($dateMeta['display'])) {
                        $sampleData['evaluation_period'] = (string) $dateMeta['display'];
                    }
                    $sampleData['issued_at'] = UtilityHelper::englishToPersian(date('Y/m/d'));
                    $sampleData['competency_model_name'] = $competencyModelDisplay;
                    // If competency model image exists for this evaluation, expose it explicitly for dynamic image component
                    if (!empty($competencyModelImagePath)) {
                        $sampleData['competency_model_image_path'] = $competencyModelImagePath;
                        $rel = ltrim((string) $competencyModelImagePath, '/');
                        $normalized = stripos($rel, 'public/') === 0 ? $rel : ('public/' . $rel);
                        $sampleData['competency_model_image_url'] = UtilityHelper::baseUrl($normalized);
                    }
                    // User fields for profile components
                    $firstName = trim((string) ($evaluatee['first_name'] ?? ''));
                    $lastName = trim((string) ($evaluatee['last_name'] ?? ''));
                    $displayFull = trim($firstName . ' ' . $lastName);
                    if ($displayFull === '') { $displayFull = $fullName; }
                    $sampleData['user_first_name'] = $firstName;
                    $sampleData['user_last_name'] = $lastName;
                    $sampleData['user_full_name'] = $displayFull !== '' ? $displayFull : 'ارزیاب‌شونده';
                    if (!empty($evaluatee['username'])) { $sampleData['user_username'] = (string) $evaluatee['username']; }
                    if (!empty($evaluatee['national_code'])) { $sampleData['user_national_id'] = UtilityHelper::englishToPersian((string) $evaluatee['national_code']); }
                    if (!empty($evaluatee['personnel_code'])) { $sampleData['user_personnel_code'] = UtilityHelper::englishToPersian((string) $evaluatee['personnel_code']); }
                    if (!empty($evaluatee['organization_post'])) { $sampleData['user_organization_post'] = (string) $evaluatee['organization_post']; }
                    if (!empty($evaluatee['service_location'])) { $sampleData['user_service_location'] = (string) $evaluatee['service_location']; }

                    // Competency model items as sample dataset for components that display them
                    if (!empty($modelCompetenciesForPage6)) {
                        $competencies = [];
                        foreach ($modelCompetenciesForPage6 as $compRow) {
                            if (!is_array($compRow)) { continue; }
                            $name = trim((string) ($compRow['name'] ?? ($compRow['title'] ?? '')));
                            $definition = trim((string) ($compRow['definition'] ?? ($compRow['description'] ?? '')));
                            if ($name === '') { continue; }
                            $competencies[] = ['name' => $name, 'definition' => $definition];
                        }
                        if (!empty($competencies)) {
                            $sampleData['competencies'] = $competencies;
                        }
                    }

                    // Evaluation tools list as sample dataset for components that list tools
                    if (!empty($certificateSettings['page8_tools'])) {
                        $toolsSample = [];
                        foreach ($certificateSettings['page8_tools'] as $toolRow) {
                            if (!is_array($toolRow)) { continue; }
                            $toolsSample[] = [
                                'name' => trim((string) ($toolRow['tool_name'] ?? '')),
                                'description' => trim((string) ($toolRow['tool_description'] ?? '')),
                                'category' => '',
                                'estimatedTime' => '',
                                'difficulty' => '',
                                'icon' => 'flask-outline',
                            ];
                        }
                        if (!empty($toolsSample)) {
                            $sampleData['evaluation_tools'] = $toolsSample;
                        }
                    }

                    // Runtime datasets bound to this evaluation/evaluatee
                    $runtimeDatasets = [];
                    // Assessment tools with completion/score/status for this evaluatee
                    $evaluateeToolSummary = $this->getCertificatePreviewEvaluateeAssessmentTools($organizationId, $evaluationId, $evaluateeId);
                    if (!empty($evaluateeToolSummary)) {
                        $runtimeDatasets['assessment_tools'] = $evaluateeToolSummary;
                    }

                    // MBTI runtime dataset (enrich with preference percents if available)
                    $mbtiRuntime = $mbtiData;
                    if (isset($mbtiRuntime['axes']) && is_array($mbtiRuntime['axes'])) {
                        $mbtiRuntime['preferenceEI'] = $this->resolveMbtiPreferencePercent($mbtiRuntime, 'EI', 'E');
                        $mbtiRuntime['preferenceSN'] = $this->resolveMbtiPreferencePercent($mbtiRuntime, 'SN', 'S');
                        $mbtiRuntime['preferenceTF'] = $this->resolveMbtiPreferencePercent($mbtiRuntime, 'TF', 'T');
                        $mbtiRuntime['preferenceJP'] = $this->resolveMbtiPreferencePercent($mbtiRuntime, 'JP', 'J');
                    }
                    if (!empty($mbtiRuntime['has_mbti'])) {
                        $runtimeDatasets['mbti_profile'] = $mbtiRuntime;
                    }

                    // DISC runtime dataset
                    if (!empty($discData['has_disc'])) {
                        $runtimeDatasets['disc_profile'] = $discData;
                    }

                    // Analytical runtime dataset
                    if (!empty($analyticalData['has_analytical'])) {
                        $runtimeDatasets['analytical'] = $analyticalData;
                    }

                    // Public profile dataset
                    if (!empty($publicProfileDataset)) {
                        $runtimeDatasets['public_profile'] = $publicProfileDataset;
                    }

                    // Wash-Up agreed competencies dataset
                    $washupPreviewDataset = $this->getCertificatePreviewWashupDataset($organizationId, $sampleData);
                    if (!empty($washupPreviewDataset)) {
                        $runtimeDatasets['washup_agreed'] = $washupPreviewDataset;
                        $existingWashupSample = isset($sampleData['washup_agreed']) && is_array($sampleData['washup_agreed'])
                            ? $sampleData['washup_agreed']
                            : [];
                        $sampleData['washup_agreed'] = array_merge($existingWashupSample, $washupPreviewDataset);
                    }

                    // View variables expected by builder preview
                    $title = 'گواهی پایان دوره';
                    $activePageId = isset($builderState['activePageId']) ? (string) $builderState['activePageId'] : '';
                    $builderStateJson = htmlspecialchars(json_encode($builderState, JSON_UNESCAPED_UNICODE), ENT_QUOTES, 'UTF-8');
                    // Hide preview toolbars/navigation
                    $isEmbedded = true;
                    // Prevent selection UI
                    $evaluationOptions = [];
                    $evaluateeOptions = [];
                    $selectedEvaluation = null;
                    $selectedEvaluatee = null;
                    $selectedEvaluationId = 0;
                    $selectedEvaluateeId = 0;
                    $totalEvaluations = 0;
                    $hasRuntimeData = true;

                    include __DIR__ . '/../Views/organizations/reports/certificate-preview.php';
                    return;
                }
            }
        }

        $title = 'گواهی پایان دوره';

        include __DIR__ . '/../Views/organizations/reports/certificate.php';
    }

    public function organizationCertificateSettings(): void
    {
        $sessionData = $this->ensureOrganizationSession(['reports_settings_manage']);

        AuthHelper::startSession();

        $this->ensureOrganizationCertificateSettingsTableExists();

        $title = 'تنظیمات گواهی دوره';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];
        $organizationId = (int) ($organization['id'] ?? 0);

        $existing = null;
        if ($organizationId > 0) {
            try {
                $existing = DatabaseHelper::fetchOne(
                    'SELECT * FROM organization_certificate_settings WHERE organization_id = :organization_id LIMIT 1',
                    ['organization_id' => $organizationId]
                );
            } catch (Exception $exception) {
                $existing = null;
            }
        }

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/reports/certificate-settings.php';
    }

    public function organizationCertificateBuilder(): void
    {
        $sessionData = $this->ensureOrganizationSession(['reports_settings_manage']);

        AuthHelper::startSession();

        $this->ensureOrganizationCertificateSettingsTableExists();

        $title = 'سازنده گواهی پیشرفته';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];
        $organizationId = (int) ($organization['id'] ?? 0);

        $existing = null;
        if ($organizationId > 0) {
            try {
                $existing = DatabaseHelper::fetchOne(
                    'SELECT * FROM organization_certificate_settings WHERE organization_id = :organization_id LIMIT 1',
                    ['organization_id' => $organizationId]
                );
            } catch (Exception $exception) {
                $existing = null;
            }
        }

        $defaultState = $this->getCertificateBuilderDefaultState();

        $builderState = $defaultState;
        if ($existing && !empty($existing['builder_state_json'])) {
            $decoded = json_decode((string) $existing['builder_state_json'], true);
            if (is_array($decoded)) {
                $builderState = $this->sanitizeCertificateBuilderState($decoded);
            }
        }

        if (empty($builderState['pages'])) {
            $builderState = $defaultState;
        }

        $componentLibrary = $this->getCertificateBuilderComponentLibrary();
        $templateOptions = $this->getCertificateBuilderTemplateOptions();

        $assessmentToolOptions = [];
        $assessmentToolsForBuilder = $organizationId > 0
            ? $this->getCertificatePreviewAssessmentTools($organizationId)
            : [];

        $sampleData = $this->getCertificatePreviewSampleData($organization, $user);
        $mbtiSample = [];
        if (isset($sampleData['mbti_profile']) && is_array($sampleData['mbti_profile'])) {
            $mbtiSample = $sampleData['mbti_profile'];
        }
        $discSample = [];
        if (isset($sampleData['disc_profile']) && is_array($sampleData['disc_profile'])) {
            $discSample = $sampleData['disc_profile'];
        }
        $analyticalSample = [];
        if (isset($sampleData['analytical']) && is_array($sampleData['analytical'])) {
            $analyticalSample = $sampleData['analytical'];
        }
        $washupSample = [];
        if (isset($sampleData['washup_agreed']) && is_array($sampleData['washup_agreed'])) {
            $washupSample = $sampleData['washup_agreed'];
        }

        $mbtiPreviewDataset = $this->getCertificatePreviewMbtiDataset($organizationId, $sampleData);
        if (!empty($mbtiPreviewDataset)) {
            $mbtiSample = $mbtiPreviewDataset;
            $sampleData['mbti_profile'] = $mbtiPreviewDataset;
        }

        $discPreviewDataset = $this->getCertificatePreviewDiscDataset($organizationId, $sampleData);
        if (!empty($discPreviewDataset)) {
            $discSample = array_merge($discSample, $discPreviewDataset);
            $sampleData['disc_profile'] = $discSample;
        }

        $analyticalPreviewDataset = $this->getCertificatePreviewAnalyticalDataset($organizationId, $sampleData);
        if (!empty($analyticalPreviewDataset)) {
            $analyticalSample = array_merge($analyticalSample, $analyticalPreviewDataset);
            $sampleData['analytical'] = $analyticalSample;
        }

        $washupPreviewDataset = $this->getCertificatePreviewWashupDataset($organizationId, $sampleData);
        if (!empty($washupPreviewDataset)) {
            $washupSample = array_merge($washupSample, $washupPreviewDataset);
            $sampleData['washup_agreed'] = $washupSample;
        }

        if (!empty($assessmentToolsForBuilder)) {
            foreach ($assessmentToolsForBuilder as $toolRow) {
                if (!is_array($toolRow)) {
                    continue;
                }

                $value = isset($toolRow['id']) ? trim((string) $toolRow['id']) : '';
                if ($value === '') {
                    continue;
                }

                $label = isset($toolRow['name']) ? trim((string) $toolRow['name']) : '';
                if ($label === '') {
                    $label = 'ابزار بدون عنوان';
                }

                $assessmentToolOptions[] = [
                    'value' => $value,
                    'label' => $label,
                    'description' => isset($toolRow['description']) ? (string) $toolRow['description'] : '',
                    'meta' => [
                        'category' => isset($toolRow['category']) ? (string) $toolRow['category'] : '',
                        'estimatedTime' => isset($toolRow['estimatedTime']) ? (string) $toolRow['estimatedTime'] : '',
                        'difficulty' => isset($toolRow['difficulty']) ? (string) $toolRow['difficulty'] : '',
                    ],
                ];
            }
        }

        $builderDatasets = [
            'assessmentToolOptions' => $assessmentToolOptions,
            'mbtiProfileSample' => $mbtiSample,
            'discProfileSample' => $discSample,
            'analyticalSample' => $analyticalSample,
            'washupAgreedSample' => $washupSample,
        ];

        $builderStateJson = htmlspecialchars(json_encode($builderState, JSON_UNESCAPED_UNICODE), ENT_QUOTES, 'UTF-8');
        $componentLibraryJson = htmlspecialchars(json_encode($componentLibrary, JSON_UNESCAPED_UNICODE), ENT_QUOTES, 'UTF-8');
        $templateOptionsJson = htmlspecialchars(json_encode($templateOptions, JSON_UNESCAPED_UNICODE), ENT_QUOTES, 'UTF-8');
        $builderDatasetsJson = htmlspecialchars(json_encode($builderDatasets, JSON_UNESCAPED_UNICODE), ENT_QUOTES, 'UTF-8');

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/reports/certificate-builder.php';
    }

    public function organizationCertificatePreview(): void
    {
        $sessionData = $this->ensureOrganizationSession(['reports_settings_manage']);

        AuthHelper::startSession();

        $this->ensureOrganizationCertificateSettingsTableExists();

        $title = 'پیش‌نمایش گواهی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];
        $organizationId = (int) ($organization['id'] ?? 0);

        $defaultState = $this->getCertificateBuilderDefaultState();
        $builderState = $defaultState;

        if ($organizationId > 0) {
            $existing = null;
            try {
                $existing = DatabaseHelper::fetchOne(
                    'SELECT builder_state_json FROM organization_certificate_settings WHERE organization_id = :organization_id LIMIT 1',
                    ['organization_id' => $organizationId]
                );
            } catch (Exception $exception) {
                $existing = null;
            }

            if ($existing && !empty($existing['builder_state_json'])) {
                $decoded = json_decode((string) $existing['builder_state_json'], true);
                if (is_array($decoded)) {
                    $builderState = $this->sanitizeCertificateBuilderState($decoded);
                }
            }
        }

        if (empty($builderState['pages'])) {
            $builderState = $defaultState;
        }

        $pages = isset($builderState['pages']) && is_array($builderState['pages']) ? $builderState['pages'] : [];
        $pageIds = !empty($pages) ? array_column($pages, 'id') : [];

        $requestedPageId = isset($_GET['page']) && is_string($_GET['page']) ? trim($_GET['page']) : '';
        $activePageId = isset($builderState['activePageId']) && is_string($builderState['activePageId'])
            ? $builderState['activePageId']
            : ($pageIds[0] ?? '');

        if ($requestedPageId !== '' && in_array($requestedPageId, $pageIds, true)) {
            $activePageId = $requestedPageId;
        }

        $componentLibrary = $this->getCertificateBuilderComponentLibrary();
        $componentMap = [];
        foreach ($componentLibrary as $component) {
            $componentMap[$component['type']] = $component;
        }

        $sampleData = $this->getCertificatePreviewSampleData($organization, $user);

        $assessmentTools = $this->getCertificatePreviewAssessmentTools($organizationId);
        if (!empty($assessmentTools)) {
            $sampleData['assessment_tools'] = $assessmentTools;
        }

        $subjectContext = $this->resolveCertificatePreviewSubjectIds();
        $requestedEvaluationId = (int) ($subjectContext['evaluation_id'] ?? 0);
        $requestedEvaluateeId = (int) ($subjectContext['evaluatee_id'] ?? 0);

        $selectorContext = $this->getCertificatePreviewEvaluationContext(
            $organizationId,
            $requestedEvaluationId,
            $requestedEvaluateeId
        );

        $evaluationOptions = $selectorContext['evaluation_options'];
        $evaluateeOptions = $selectorContext['evaluatee_options'];
        $selectedEvaluation = $selectorContext['selected_evaluation'];
        $selectedEvaluationId = (int) ($selectorContext['selected_evaluation_id'] ?? 0);
        $selectedEvaluatee = $selectorContext['selected_evaluatee'];
        $selectedEvaluateeId = (int) ($selectorContext['selected_evaluatee_id'] ?? 0);
        $totalEvaluations = (int) ($selectorContext['evaluation_count'] ?? 0);
    $evaluateeToolSummary = [];

        if ($selectedEvaluation !== null) {
            $sampleData['evaluation_title'] = (string) ($selectedEvaluation['title'] ?? $sampleData['evaluation_title'] ?? '');
            if (!empty($selectedEvaluation['date_display'])) {
                $sampleData['evaluation_period'] = (string) $selectedEvaluation['date_display'];
            }
            if (isset($selectedEvaluation['evaluatees']) && is_array($selectedEvaluation['evaluatees'])) {
                $evaluateeCount = count($selectedEvaluation['evaluatees']);
                if ($evaluateeCount > 0) {
                    $sampleData['evaluatees_count'] = UtilityHelper::englishToPersian((string) $evaluateeCount) . ' ارزیاب‌شونده';
                }
            }
        }

        if ($selectedEvaluatee !== null && isset($selectedEvaluatee['user']) && is_array($selectedEvaluatee['user'])) {
            $evaluateeUser = $selectedEvaluatee['user'];
            $firstName = trim((string) ($evaluateeUser['first_name'] ?? ''));
            $lastName = trim((string) ($evaluateeUser['last_name'] ?? ''));
            $displayName = trim((string) ($evaluateeUser['display_name'] ?? ''));
            $fallbackLabel = isset($selectedEvaluatee['display_name']) ? (string) $selectedEvaluatee['display_name'] : ((string) ($selectedEvaluatee['label'] ?? ''));
            $fullName = trim($firstName . ' ' . $lastName);
            if ($fullName === '' && $displayName !== '') {
                $fullName = $displayName;
            }
            if ($fullName === '') {
                $fullName = $fallbackLabel !== '' ? $fallbackLabel : 'ارزیاب‌شونده #' . UtilityHelper::englishToPersian((string) $selectedEvaluateeId);
            }

            if ($firstName === '' && $lastName === '' && $displayName !== '') {
                $parts = preg_split('/\s+/u', $displayName, 2);
                if (is_array($parts) && !empty($parts)) {
                    $firstName = trim((string) ($parts[0] ?? ''));
                    $lastName = trim((string) ($parts[1] ?? ''));
                }
            }

            $sampleData['user_first_name'] = $firstName !== '' ? $firstName : ($sampleData['user_first_name'] ?? $fullName);
            $sampleData['user_last_name'] = $lastName !== '' ? $lastName : ($sampleData['user_last_name'] ?? '');
            $sampleData['user_full_name'] = $fullName;

            if (!empty($evaluateeUser['job_title'])) {
                $sampleData['user_job_title'] = (string) $evaluateeUser['job_title'];
            }
            if (!empty($evaluateeUser['organization_post'])) {
                $sampleData['user_organization_post'] = (string) $evaluateeUser['organization_post'];
            }
            if (!empty($evaluateeUser['department'])) {
                $sampleData['user_department'] = (string) $evaluateeUser['department'];
            }
            if (!empty($evaluateeUser['service_location'])) {
                $sampleData['user_service_location'] = (string) $evaluateeUser['service_location'];
            }

            $personnelCode = trim((string) ($evaluateeUser['personnel_code'] ?? ''));
            if ($personnelCode !== '') {
                $sampleData['user_personnel_code'] = UtilityHelper::englishToPersian($personnelCode);
            }

            $nationalCode = trim((string) ($evaluateeUser['national_code'] ?? ''));
            if ($nationalCode !== '') {
                $sampleData['user_national_id'] = UtilityHelper::englishToPersian($nationalCode);
            }

            if (!empty($evaluateeUser['username'])) {
                $sampleData['user_username'] = (string) $evaluateeUser['username'];
            }

            $initials = '';
            if ($firstName !== '') {
                $initials .= function_exists('mb_substr') ? mb_substr($firstName, 0, 1, 'UTF-8') : substr($firstName, 0, 1);
            }
            if ($lastName !== '') {
                $initials .= function_exists('mb_substr') ? mb_substr($lastName, 0, 1, 'UTF-8') : substr($lastName, 0, 1);
            }
            if ($initials === '' && $fullName !== '') {
                $initials = function_exists('mb_substr') ? mb_substr($fullName, 0, 2, 'UTF-8') : substr($fullName, 0, 2);
            }
            if ($initials !== '') {
                $sampleData['user_initials'] = $initials;
            }
        }

        if ($selectedEvaluationId > 0 && $selectedEvaluateeId > 0) {
            $evaluateeToolSummary = $this->getCertificatePreviewEvaluateeAssessmentTools($organizationId, $selectedEvaluationId, $selectedEvaluateeId);
            if (!empty($evaluateeToolSummary)) {
                $sampleData['assessment_tools'] = $evaluateeToolSummary;
            }
        }

        $runtimeDatasets = [];
        if (!empty($evaluateeToolSummary)) {
            $runtimeDatasets['assessment_tools'] = $evaluateeToolSummary;
        }
        $mbtiPreviewDataset = $this->getCertificatePreviewMbtiDataset($organizationId, $sampleData);
        if (!empty($mbtiPreviewDataset)) {
            $runtimeDatasets['mbti_profile'] = $mbtiPreviewDataset;
            $sampleData['mbti_profile'] = $mbtiPreviewDataset;
        }

        $discPreviewDataset = $this->getCertificatePreviewDiscDataset($organizationId, $sampleData);
        if (!empty($discPreviewDataset)) {
            $runtimeDatasets['disc_profile'] = $discPreviewDataset;
            $existingDiscSample = isset($sampleData['disc_profile']) && is_array($sampleData['disc_profile'])
                ? $sampleData['disc_profile']
                : [];
            $sampleData['disc_profile'] = array_merge($existingDiscSample, $discPreviewDataset);
        }

        $analyticalPreviewDataset = $this->getCertificatePreviewAnalyticalDataset($organizationId, $sampleData);
        if (!empty($analyticalPreviewDataset)) {
            $runtimeDatasets['analytical'] = $analyticalPreviewDataset;
            $existingAnalyticalSample = isset($sampleData['analytical']) && is_array($sampleData['analytical'])
                ? $sampleData['analytical']
                : [];
            $sampleData['analytical'] = array_merge($existingAnalyticalSample, $analyticalPreviewDataset);
        }

        $washupPreviewDataset = $this->getCertificatePreviewWashupDataset($organizationId, $sampleData);
        if (!empty($washupPreviewDataset)) {
            $runtimeDatasets['washup_agreed'] = $washupPreviewDataset;
            $existingWashupSample = isset($sampleData['washup_agreed']) && is_array($sampleData['washup_agreed'])
                ? $sampleData['washup_agreed']
                : [];
            $sampleData['washup_agreed'] = array_merge($existingWashupSample, $washupPreviewDataset);
        }

        $builderStateJson = htmlspecialchars(json_encode($builderState, JSON_UNESCAPED_UNICODE), ENT_QUOTES, 'UTF-8');
        $totalPages = count($pages);

        $hasRuntimeData = false;
        foreach ($runtimeDatasets as $dataset) {
            if (!empty($dataset)) {
                $hasRuntimeData = true;
                break;
            }
        }

        include __DIR__ . '/../Views/organizations/reports/certificate-preview.php';
    }

    public function updateOrganizationCertificateSettings(): void
    {
        $sessionData = $this->ensureOrganizationSession(['reports_settings_manage']);

        AuthHelper::startSession();

        $this->ensureOrganizationCertificateSettingsTableExists();

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        $redirectIndex = UtilityHelper::baseUrl('organizations/reports/certificate-settings');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $titleRibbonText = trim((string)($_POST['title_ribbon_text'] ?? ''));
        $statementText = trim((string)($_POST['statement_text'] ?? ''));
        $showOrgLogo = in_array(($_POST['show_org_logo'] ?? ''), ['1','on','true'], true) ? 1 : 0;
        $showSignatures = in_array(($_POST['show_signatures'] ?? ''), ['1','on','true'], true) ? 1 : 0;
        $enableDecorations = in_array(($_POST['enable_decorations'] ?? ''), ['1','on','true'], true) ? 1 : 0;
        $pdfMode = trim((string)($_POST['pdf_mode'] ?? 'simple'));
        $pdfMode = in_array($pdfMode, ['simple','full'], true) ? $pdfMode : 'simple';
    $extraFooterText = trim((string)($_POST['extra_footer_text'] ?? ''));
    $templateKey = trim((string)($_POST['template_key'] ?? 'classic'));
    $allowedTemplates = ['classic','minimal','bordered'];
    if (!in_array($templateKey, $allowedTemplates, true)) { $templateKey = 'classic'; }
    $enableSecondPage = in_array(($_POST['enable_second_page'] ?? ''), ['1','on','true'], true) ? 1 : 0;
    $removeSecondImage = in_array(($_POST['remove_second_page_image'] ?? ''), ['1','on','true'], true) ? 1 : 0;
    $secondPageTitle = trim((string)($_POST['second_page_title_ribbon_text'] ?? ''));
    $imgWidthInput = trim((string)($_POST['second_page_image_width_mm'] ?? ''));
    $imgHeightInput = trim((string)($_POST['second_page_image_height_mm'] ?? ''));
    $imgWidthMm = $imgWidthInput !== '' ? (float) UtilityHelper::persianToEnglish($imgWidthInput) : null;
    $imgHeightMm = $imgHeightInput !== '' ? (float) UtilityHelper::persianToEnglish($imgHeightInput) : null;

    // Third page inputs
    $enableThirdPage = in_array(($_POST['enable_third_page'] ?? ''), ['1','on','true'], true) ? 1 : 0;
    $removeThirdImage = in_array(($_POST['remove_third_page_image'] ?? ''), ['1','on','true'], true) ? 1 : 0;
    $thirdPageTitle = trim((string)($_POST['third_page_title_ribbon_text'] ?? ''));
    $thirdImgWInput = trim((string)($_POST['third_page_image_width_mm'] ?? ''));
    $thirdImgHInput = trim((string)($_POST['third_page_image_height_mm'] ?? ''));
    $thirdImgWmm = $thirdImgWInput !== '' ? (float) UtilityHelper::persianToEnglish($thirdImgWInput) : null;
    $thirdImgHmm = $thirdImgHInput !== '' ? (float) UtilityHelper::persianToEnglish($thirdImgHInput) : null;
    // dynamic items: arrays of titles and pages
    // page order: array of slugs
    $orderInput = isset($_POST['page_order']) && is_array($_POST['page_order']) ? $_POST['page_order'] : [];
    $allowedSlugs = ['details','toc','page4','page5','page6','page7','page8','page9','page10','page11','page13','page15'];
    $orderClean = [];
    foreach ($orderInput as $slug) {
        $slug = trim((string)$slug);
        if (in_array($slug, $allowedSlugs, true) && !in_array($slug, $orderClean, true)) {
            $orderClean[] = $slug;
        }
    }
    $tpItemsTitles = isset($_POST['third_page_items_title']) && is_array($_POST['third_page_items_title']) ? $_POST['third_page_items_title'] : [];
    $tpItemsPages = isset($_POST['third_page_items_page']) && is_array($_POST['third_page_items_page']) ? $_POST['third_page_items_page'] : [];
    $thirdItems = [];
    $rowCount = max(count($tpItemsTitles), count($tpItemsPages));
    for ($i=0; $i<$rowCount; $i++) {
        $t = trim((string)($tpItemsTitles[$i] ?? ''));
        $p = trim((string)($tpItemsPages[$i] ?? ''));
        if ($t !== '' && $p !== '') {
            $thirdItems[] = ['title' => mb_substr($t,0,191), 'page' => mb_substr($p,0,50)];
        }
    }

        // Handle optional second page image upload
        $secondPageImagePath = null;
        if (isset($_FILES['second_page_image']) && is_array($_FILES['second_page_image']) && ($_FILES['second_page_image']['tmp_name'] ?? '') !== '') {
            if (FileHelper::isValidImage($_FILES['second_page_image'])) {
                $uploadRes = FileHelper::uploadFile($_FILES['second_page_image'], 'uploads/organizations/certificates/');
                if (!empty($uploadRes['success'])) {
                    $secondPageImagePath = $uploadRes['path'];
                }
            }
        }

        // Handle optional third page image upload
        $thirdPageImagePath = null;
        if (isset($_FILES['third_page_image']) && is_array($_FILES['third_page_image']) && ($_FILES['third_page_image']['tmp_name'] ?? '') !== '') {
            if (FileHelper::isValidImage($_FILES['third_page_image'])) {
                $uploadRes = FileHelper::uploadFile($_FILES['third_page_image'], 'uploads/organizations/certificates/');
                if (!empty($uploadRes['success'])) {
                    $thirdPageImagePath = $uploadRes['path'];
                }
            }
        }
        // Handle optional fourth page image upload
        $fourthPageImagePath = null;
        if (isset($_FILES['fourth_page_image']) && is_array($_FILES['fourth_page_image']) && ($_FILES['fourth_page_image']['tmp_name'] ?? '') !== '') {
            if (FileHelper::isValidImage($_FILES['fourth_page_image'])) {
                $uploadRes = FileHelper::uploadFile($_FILES['fourth_page_image'], 'uploads/organizations/certificates/');
                if (!empty($uploadRes['success'])) {
                    $fourthPageImagePath = $uploadRes['path'];
                }
            }
        }
        // Handle optional seventh page image upload
        $seventhPageImagePath = null;
        if (isset($_FILES['seventh_page_image']) && is_array($_FILES['seventh_page_image']) && ($_FILES['seventh_page_image']['tmp_name'] ?? '') !== '') {
            if (FileHelper::isValidImage($_FILES['seventh_page_image'])) {
                $uploadRes = FileHelper::uploadFile($_FILES['seventh_page_image'], 'uploads/organizations/certificates/');
                if (!empty($uploadRes['success'])) {
                    $seventhPageImagePath = $uploadRes['path'];
                }
            }
        }

        $validationErrors = [];
        if ($titleRibbonText === '') { $titleRibbonText = 'گواهی پایان دوره'; }
        if ($statementText === '') { $statementText = 'گزارش بازخورد'; }
        if (mb_strlen($titleRibbonText) > 191) { $validationErrors['title_ribbon_text'] = 'طول عنوان نباید بیش از ۱۹۱ کاراکتر باشد.'; }
        if (mb_strlen($statementText) > 255) { $validationErrors['statement_text'] = 'طول متن نباید بیش از ۲۵۵ کاراکتر باشد.'; }
        if (mb_strlen($extraFooterText) > 255) { $validationErrors['extra_footer_text'] = 'طول متن پاورقی نباید بیش از ۲۵۵ کاراکتر باشد.'; }

        if ($imgWidthMm !== null && ($imgWidthMm <= 0 || $imgWidthMm > 280)) {
            $validationErrors['second_page_image_width_mm'] = 'عرض تصویر باید بین 1 تا 280 میلی‌متر باشد.';
        }
        if ($imgHeightMm !== null && ($imgHeightMm <= 0 || $imgHeightMm > 180)) {
            $validationErrors['second_page_image_height_mm'] = 'ارتفاع تصویر باید بین 1 تا 180 میلی‌متر باشد.';
        }

        if (mb_strlen($secondPageTitle) > 191) {
            $validationErrors['second_page_title_ribbon_text'] = 'طول عنوان صفحه دوم نباید بیش از ۱۹۱ کاراکتر باشد.';
        }

        if ($thirdImgWmm !== null && ($thirdImgWmm <= 0 || $thirdImgWmm > 280)) {
            $validationErrors['third_page_image_width_mm'] = 'عرض تصویر باید بین 1 تا 280 میلی‌متر باشد.';
        }
        if ($thirdImgHmm !== null && ($thirdImgHmm <= 0 || $thirdImgHmm > 180)) {
            $validationErrors['third_page_image_height_mm'] = 'ارتفاع تصویر باید بین 1 تا 180 میلی‌متر باشد.';
        }
        if (mb_strlen($thirdPageTitle) > 191) {
            $validationErrors['third_page_title_ribbon_text'] = 'طول عنوان صفحه سوم نباید بیش از ۱۹۱ کاراکتر باشد.';
        }
    // Fourth page inputs
        $enableFourthPage = in_array(($_POST['enable_fourth_page'] ?? ''), ['1','on','true'], true) ? 1 : 0;
        $removeFourthImage = in_array(($_POST['remove_fourth_page_image'] ?? ''), ['1','on','true'], true) ? 1 : 0;
        $fourthPageTitle = trim((string)($_POST['fourth_page_title_ribbon_text'] ?? ''));
        $fourthImgWInput = trim((string)($_POST['fourth_page_image_width_mm'] ?? ''));
        $fourthImgHInput = trim((string)($_POST['fourth_page_image_height_mm'] ?? ''));
        $fourthImgWmm = $fourthImgWInput !== '' ? (float) UtilityHelper::persianToEnglish($fourthImgWInput) : null;
        $fourthImgHmm = $fourthImgHInput !== '' ? (float) UtilityHelper::persianToEnglish($fourthImgHInput) : null;
        $fourthPageText = trim((string)($_POST['fourth_page_text'] ?? ''));
        $fourthPageAlign = trim((string)($_POST['fourth_page_text_align'] ?? ''));
    // Fifth page inputs
    $enableFifthPage = in_array(($_POST['enable_fifth_page'] ?? ''), ['1','on','true'], true) ? 1 : 0;
    $fifthPageTitle = trim((string)($_POST['fifth_page_title_ribbon_text'] ?? ''));
    $fifthPageText = trim((string)($_POST['fifth_page_text'] ?? ''));
    $fifthPageAlign = trim((string)($_POST['fifth_page_text_align'] ?? ''));
    // Sixth page inputs
    $enableSixthPage = in_array(($_POST['enable_sixth_page'] ?? ''), ['1','on','true'], true) ? 1 : 0;
    $sixthPageTitle = trim((string)($_POST['sixth_page_title_ribbon_text'] ?? ''));
    $sixthPageText = trim((string)($_POST['sixth_page_text'] ?? ''));
    $sixthPageAlign = trim((string)($_POST['sixth_page_text_align'] ?? ''));
    // Seventh page inputs
    $enableSeventhPage = in_array(($_POST['enable_seventh_page'] ?? ''), ['1','on','true'], true) ? 1 : 0;
    $seventhPageTitle = trim((string)($_POST['seventh_page_title_ribbon_text'] ?? ''));
    $seventhPageText = trim((string)($_POST['seventh_page_text'] ?? ''));
    $seventhPageAlign = trim((string)($_POST['seventh_page_text_align'] ?? ''));
    $removeSeventhImage = in_array(($_POST['remove_seventh_page_image'] ?? ''), ['1','on','true'], true) ? 1 : 0;
    // Eighth page inputs
    $enableEighthPage = in_array(($_POST['enable_eighth_page'] ?? ''), ['1','on','true'], true) ? 1 : 0;
    $eighthPageTitle = trim((string)($_POST['eighth_page_title_ribbon_text'] ?? ''));
    // Ninth page inputs
    $enableNinthPage = in_array(($_POST['enable_ninth_page'] ?? ''), ['1','on','true'], true) ? 1 : 0;
    $ninthPageTitle = trim((string)($_POST['ninth_page_title_ribbon_text'] ?? ''));
    $ninthPageText = trim((string)($_POST['ninth_page_text'] ?? ''));
    $ninthPageAlign = trim((string)($_POST['ninth_page_text_align'] ?? ''));
    $npScores = isset($_POST['ninth_page_items_score']) && is_array($_POST['ninth_page_items_score']) ? $_POST['ninth_page_items_score'] : [];
    $npDescs = isset($_POST['ninth_page_items_description']) && is_array($_POST['ninth_page_items_description']) ? $_POST['ninth_page_items_description'] : [];
    $npResults = isset($_POST['ninth_page_items_result']) && is_array($_POST['ninth_page_items_result']) ? $_POST['ninth_page_items_result'] : [];
    $ninthItems = [];
    $nCount = max(count($npScores), count($npDescs), count($npResults));
    for ($i=0; $i<$nCount; $i++) {
        $s = trim((string)($npScores[$i] ?? ''));
        $d = trim((string)($npDescs[$i] ?? ''));
        $r = trim((string)($npResults[$i] ?? ''));
        if ($s==='' && $d==='' && $r==='') { continue; }
        $ninthItems[] = ['score'=>$s, 'description'=>$d, 'result'=>$r];
    }
    // Tenth page (MBTI intro) inputs
    $enableTenthPage = in_array(($_POST['enable_tenth_page'] ?? ''), ['1','on','true'], true) ? 1 : 0;
    $tenthPageTitle = trim((string)($_POST['tenth_page_title_ribbon_text'] ?? ''));
    $tenthPageText = trim((string)($_POST['tenth_page_text'] ?? ''));
    $tenthPageAlign = trim((string)($_POST['tenth_page_text_align'] ?? ''));
    // Eleventh page (MBTI results) inputs
    $enableEleventhPage = in_array(($_POST['enable_eleventh_page'] ?? ''), ['1','on','true'], true) ? 1 : 0;
    $eleventhPageTitle = trim((string)($_POST['eleventh_page_title_ribbon_text'] ?? ''));
    $eleventhPageText = trim((string)($_POST['eleventh_page_text'] ?? ''));
    $eleventhPageAlign = trim((string)($_POST['eleventh_page_text_align'] ?? ''));
    // Thirteenth page (DISC) inputs
    $enableThirteenthPage = in_array(($_POST['enable_thirteenth_page'] ?? ''), ['1','on','true'], true) ? 1 : 0;
    $thirteenthPageTitle = trim((string)($_POST['thirteenth_page_title_ribbon_text'] ?? ''));
    $thirteenthPageText = trim((string)($_POST['thirteenth_page_text'] ?? ''));
    $thirteenthPageAlign = trim((string)($_POST['thirteenth_page_text_align'] ?? ''));
    // Fifteenth page (Analytical) inputs
    $enableFifteenthPage = in_array(($_POST['enable_fifteenth_page'] ?? ''), ['1','on','true'], true) ? 1 : 0;
    $fifteenthPageTitle = trim((string)($_POST['fifteenth_page_title_ribbon_text'] ?? ''));
    $fifteenthPageText = trim((string)($_POST['fifteenth_page_text'] ?? ''));
    $fifteenthPageAlign = trim((string)($_POST['fifteenth_page_text_align'] ?? ''));
        if ($fourthImgWmm !== null && ($fourthImgWmm <= 0 || $fourthImgWmm > 280)) {
            $validationErrors['fourth_page_image_width_mm'] = 'عرض تصویر باید بین 1 تا 280 میلی‌متر باشد.';
        }
        if ($fourthImgHmm !== null && ($fourthImgHmm <= 0 || $fourthImgHmm > 180)) {
            $validationErrors['fourth_page_image_height_mm'] = 'ارتفاع تصویر باید بین 1 تا 180 میلی‌متر باشد.';
        }
        if (mb_strlen($fourthPageTitle) > 191) {
            $validationErrors['fourth_page_title_ribbon_text'] = 'طول عنوان صفحه چهارم نباید بیش از ۱۹۱ کاراکتر باشد.';
        }
        if (mb_strlen($fifthPageTitle) > 191) {
            $validationErrors['fifth_page_title_ribbon_text'] = 'طول عنوان صفحه پنجم نباید بیش از ۱۹۱ کاراکتر باشدُ';
        }
        if (mb_strlen($sixthPageTitle) > 191) {
            $validationErrors['sixth_page_title_ribbon_text'] = 'طول عنوان صفحه ششم نباید بیش از ۱۹۱ کاراکتر باشد.';
        }
        if (mb_strlen($seventhPageTitle) > 191) {
            $validationErrors['seventh_page_title_ribbon_text'] = 'طول عنوان صفحه هفتم نباید بیش از ۱۹۱ کاراکتر باشد.';
        }
        if (mb_strlen($eighthPageTitle) > 191) {
            $validationErrors['eighth_page_title_ribbon_text'] = 'طول عنوان صفحه هشتم نباید بیش از ۱۹۱ کاراکتر باشد.';
        }
        if (mb_strlen($ninthPageTitle) > 191) {
            $validationErrors['ninth_page_title_ribbon_text'] = 'طول عنوان صفحه نهم نباید بیش از ۱۹۱ کاراکتر باشد.';
        }
        if (mb_strlen($tenthPageTitle) > 191) {
            $validationErrors['tenth_page_title_ribbon_text'] = 'طول عنوان صفحه دهم نباید بیش از ۱۹۱ کاراکتر باشد.';
        }
        if (mb_strlen($eleventhPageTitle) > 191) {
            $validationErrors['eleventh_page_title_ribbon_text'] = 'طول عنوان صفحه یازدهم نباید بیش از ۱۹۱ کاراکتر باشد.';
        }
        if (mb_strlen($thirteenthPageTitle) > 191) {
            $validationErrors['thirteenth_page_title_ribbon_text'] = 'طول عنوان صفحه سیزدهم نباید بیش از ۱۹۱ کاراکتر باشد.';
        }
        if (mb_strlen($fifteenthPageTitle) > 191) {
            $validationErrors['fifteenth_page_title_ribbon_text'] = 'طول عنوان صفحه پانزدهم نباید بیش از ۱۹۱ کاراکتر باشد.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectIndex);
        }
        // Normalize align values
        $validAlign = ['right','center','justify','left'];
        if (!in_array($fourthPageAlign, $validAlign, true)) { $fourthPageAlign = null; }
        if (!in_array($fifthPageAlign, $validAlign, true)) { $fifthPageAlign = null; }
        if (!in_array($sixthPageAlign, $validAlign, true)) { $sixthPageAlign = null; }
    if (!in_array($seventhPageAlign, $validAlign, true)) { $seventhPageAlign = null; }
        if (!in_array($ninthPageAlign, $validAlign, true)) { $ninthPageAlign = null; }
        if (!in_array($tenthPageAlign, $validAlign, true)) { $tenthPageAlign = null; }
    if (!in_array($eleventhPageAlign, $validAlign, true)) { $eleventhPageAlign = null; }
    if (!in_array($thirteenthPageAlign, $validAlign, true)) { $thirteenthPageAlign = null; }
    if (!in_array($fifteenthPageAlign, $validAlign, true)) { $fifteenthPageAlign = null; }

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان ثبت تنظیمات در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $exists = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_certificate_settings WHERE organization_id = :organization_id LIMIT 1',
                ['organization_id' => $organizationId]
            );

            $payload = [
                'title_ribbon_text' => $titleRibbonText,
                'statement_text' => $statementText,
                'template_key' => $templateKey,
                'show_org_logo' => $showOrgLogo,
                'show_signatures' => $showSignatures,
                'enable_decorations' => $enableDecorations,
                'pdf_mode' => $pdfMode,
                'extra_footer_text' => $extraFooterText !== '' ? $extraFooterText : null,
                'enable_second_page' => $enableSecondPage,
                'second_page_image_width_mm' => $imgWidthMm !== null ? $imgWidthMm : null,
                'second_page_image_height_mm' => $imgHeightMm !== null ? $imgHeightMm : null,
                'second_page_title_ribbon_text' => $secondPageTitle !== '' ? $secondPageTitle : null,
                // third page payload
                'enable_third_page' => $enableThirdPage,
                'third_page_image_width_mm' => $thirdImgWmm !== null ? $thirdImgWmm : null,
                'third_page_image_height_mm' => $thirdImgHmm !== null ? $thirdImgHmm : null,
                'third_page_title_ribbon_text' => $thirdPageTitle !== '' ? $thirdPageTitle : null,
                'third_page_items_json' => !empty($thirdItems) ? json_encode($thirdItems, JSON_UNESCAPED_UNICODE) : null,
                'page_order_json' => !empty($orderClean) ? json_encode($orderClean, JSON_UNESCAPED_UNICODE) : null,
                // fourth page payload
                'enable_fourth_page' => $enableFourthPage,
                'fourth_page_title_ribbon_text' => $fourthPageTitle !== '' ? $fourthPageTitle : null,
                'fourth_page_text' => $fourthPageText !== '' ? $fourthPageText : null,
                'fourth_page_text_align' => $fourthPageAlign !== null ? $fourthPageAlign : null,
                'fourth_page_image_width_mm' => $fourthImgWmm !== null ? $fourthImgWmm : null,
                'fourth_page_image_height_mm' => $fourthImgHmm !== null ? $fourthImgHmm : null,
                // fifth page payload
                'enable_fifth_page' => $enableFifthPage,
                'fifth_page_title_ribbon_text' => $fifthPageTitle !== '' ? $fifthPageTitle : null,
                'fifth_page_text' => $fifthPageText !== '' ? $fifthPageText : null,
                'fifth_page_text_align' => $fifthPageAlign !== null ? $fifthPageAlign : null,
                // sixth page payload
                'enable_sixth_page' => $enableSixthPage,
                'sixth_page_title_ribbon_text' => $sixthPageTitle !== '' ? $sixthPageTitle : null,
                'sixth_page_text' => $sixthPageText !== '' ? $sixthPageText : null,
                'sixth_page_text_align' => $sixthPageAlign !== null ? $sixthPageAlign : null,
                // seventh page payload
                'enable_seventh_page' => $enableSeventhPage,
                'seventh_page_title_ribbon_text' => $seventhPageTitle !== '' ? $seventhPageTitle : null,
                'seventh_page_text' => $seventhPageText !== '' ? $seventhPageText : null,
                'seventh_page_text_align' => $seventhPageAlign !== null ? $seventhPageAlign : null,
                // eighth page payload
                'enable_eighth_page' => $enableEighthPage,
                'eighth_page_title_ribbon_text' => $eighthPageTitle !== '' ? $eighthPageTitle : null,
                // ninth page payload
                'enable_ninth_page' => $enableNinthPage,
                'ninth_page_title_ribbon_text' => $ninthPageTitle !== '' ? $ninthPageTitle : null,
                'ninth_page_text' => $ninthPageText !== '' ? $ninthPageText : null,
                'ninth_page_text_align' => $ninthPageAlign !== null ? $ninthPageAlign : null,
                'ninth_page_items_json' => !empty($ninthItems) ? json_encode($ninthItems, JSON_UNESCAPED_UNICODE) : null,
                // tenth page payload
                'enable_tenth_page' => $enableTenthPage,
                'tenth_page_title_ribbon_text' => $tenthPageTitle !== '' ? $tenthPageTitle : null,
                'tenth_page_text' => $tenthPageText !== '' ? $tenthPageText : null,
                'tenth_page_text_align' => $tenthPageAlign !== null ? $tenthPageAlign : null,
                // eleventh page payload
                'enable_eleventh_page' => $enableEleventhPage,
                'eleventh_page_title_ribbon_text' => $eleventhPageTitle !== '' ? $eleventhPageTitle : null,
                'eleventh_page_text' => $eleventhPageText !== '' ? $eleventhPageText : null,
                'eleventh_page_text_align' => $eleventhPageAlign !== null ? $eleventhPageAlign : null,
                // thirteenth page payload (DISC)
                'enable_thirteenth_page' => $enableThirteenthPage,
                'thirteenth_page_title_ribbon_text' => $thirteenthPageTitle !== '' ? $thirteenthPageTitle : null,
                'thirteenth_page_text' => $thirteenthPageText !== '' ? $thirteenthPageText : null,
                'thirteenth_page_text_align' => $thirteenthPageAlign !== null ? $thirteenthPageAlign : null,
                // fifteenth page payload (Analytical)
                'enable_fifteenth_page' => $enableFifteenthPage,
                'fifteenth_page_title_ribbon_text' => $fifteenthPageTitle !== '' ? $fifteenthPageTitle : null,
                'fifteenth_page_text' => $fifteenthPageText !== '' ? $fifteenthPageText : null,
                'fifteenth_page_text_align' => $fifteenthPageAlign !== null ? $fifteenthPageAlign : null,
                // set image path only if uploaded this request; otherwise keep previous
                'organization_id' => $organizationId,
                'user_id' => $userIdentifier,
            ];
            if ($secondPageImagePath !== null) {
                $payload['second_page_image_path'] = $secondPageImagePath;
            }
            if ($thirdPageImagePath !== null) {
                $payload['third_page_image_path'] = $thirdPageImagePath;
            }
            if ($fourthPageImagePath !== null) {
                $payload['fourth_page_image_path'] = $fourthPageImagePath;
            }
            if ($seventhPageImagePath !== null) {
                $payload['seventh_page_image_path'] = $seventhPageImagePath;
            }

            if ($exists) {
                // If remove image is requested and no new upload provided (second page)
                if ($removeSecondImage && $secondPageImagePath === null) {
                    try {
                        $prev = DatabaseHelper::fetchOne('SELECT second_page_image_path FROM organization_certificate_settings WHERE organization_id = :organization_id LIMIT 1', ['organization_id' => $organizationId]);
                        if ($prev && !empty($prev['second_page_image_path'])) {
                            FileHelper::deleteFile($prev['second_page_image_path']);
                        }
                    } catch (Exception $e) { /* ignore */ }
                    $payload['second_page_image_path'] = null;
                }
                // Remove third page image if requested and no new upload provided
                if ($removeThirdImage && $thirdPageImagePath === null) {
                    try {
                        $prev = DatabaseHelper::fetchOne('SELECT third_page_image_path FROM organization_certificate_settings WHERE organization_id = :organization_id LIMIT 1', ['organization_id' => $organizationId]);
                        if ($prev && !empty($prev['third_page_image_path'])) {
                            FileHelper::deleteFile($prev['third_page_image_path']);
                        }
                    } catch (Exception $e) { /* ignore */ }
                    $payload['third_page_image_path'] = null;
                }
                // Fourth page remove image
                if ($removeFourthImage && $fourthPageImagePath === null) {
                    try {
                        $prev = DatabaseHelper::fetchOne('SELECT fourth_page_image_path FROM organization_certificate_settings WHERE organization_id = :organization_id LIMIT 1', ['organization_id' => $organizationId]);
                        if ($prev && !empty($prev['fourth_page_image_path'])) {
                            FileHelper::deleteFile($prev['fourth_page_image_path']);
                        }
                    } catch (Exception $e) { /* ignore */ }
                    $payload['fourth_page_image_path'] = null;
                }
                // Seventh page remove image
                if ($removeSeventhImage && $seventhPageImagePath === null) {
                    try {
                        $prev = DatabaseHelper::fetchOne('SELECT seventh_page_image_path FROM organization_certificate_settings WHERE organization_id = :organization_id LIMIT 1', ['organization_id' => $organizationId]);
                        if ($prev && !empty($prev['seventh_page_image_path'])) {
                            FileHelper::deleteFile($prev['seventh_page_image_path']);
                        }
                    } catch (Exception $e) { /* ignore */ }
                    $payload['seventh_page_image_path'] = null;
                }
                // Avoid setting organization_id in SET clause to prevent duplicate named parameter usage
                $updatePayload = $payload;
                unset($updatePayload['organization_id']);
                DatabaseHelper::update(
                    'organization_certificate_settings',
                    $updatePayload,
                    'organization_id = :organization_id',
                    ['organization_id' => $organizationId]
                );
            } else {
                DatabaseHelper::insert('organization_certificate_settings', $payload);
            }

            ResponseHelper::flashSuccess('تنظیمات با موفقیت ذخیره شد.');
        } catch (Exception $exception) {
            ResponseHelper::flashError('در ذخیره تنظیمات خطایی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function updateOrganizationCertificateBuilder(): void
    {
        $sessionData = $this->ensureOrganizationSession(['reports_settings_manage']);

        AuthHelper::startSession();

        $this->ensureOrganizationCertificateSettingsTableExists();

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        $redirectIndex = UtilityHelper::baseUrl('organizations/reports/certificate-builder');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $rawState = isset($_POST['builder_state']) ? (string) $_POST['builder_state'] : '';
        $rawState = trim($rawState);

        if ($rawState === '') {
            ResponseHelper::flashError('اطلاعات سازنده دریافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $decoded = json_decode($rawState, true);
        if (!is_array($decoded)) {
            ResponseHelper::flashError('ساختار داده‌های سازنده نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $sanitized = $this->sanitizeCertificateBuilderState($decoded);
        $encoded = json_encode($sanitized, JSON_UNESCAPED_UNICODE);
        if ($encoded === false) {
            $encoded = json_encode(['pages' => []], JSON_UNESCAPED_UNICODE);
        }

        $stateVersion = isset($sanitized['version']) && is_numeric($sanitized['version'])
            ? (int) $sanitized['version']
            : 1;

        $metadata = $this->collectCertificateBuilderMetadata($sanitized);

        $templatesJson = json_encode($metadata['templates'], JSON_UNESCAPED_UNICODE);
        if ($templatesJson === false) {
            $templatesJson = json_encode([], JSON_UNESCAPED_UNICODE);
        }

        $componentsJson = json_encode($metadata['components'], JSON_UNESCAPED_UNICODE);
        if ($componentsJson === false) {
            $componentsJson = json_encode([], JSON_UNESCAPED_UNICODE);
        }

        $toolsJson = json_encode($metadata['assessment_tool_ids'], JSON_UNESCAPED_UNICODE);
        if ($toolsJson === false) {
            $toolsJson = json_encode([], JSON_UNESCAPED_UNICODE);
        }

        try {
            $existing = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_certificate_settings WHERE organization_id = :organization_id LIMIT 1',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $existing = null;
        }

        try {
            if ($existing) {
                DatabaseHelper::query(
                    'UPDATE organization_certificate_settings
                     SET builder_state_json = :builder_state_json,
                         builder_state_version = :builder_state_version,
                         builder_templates_json = :builder_templates_json,
                         builder_components_json = :builder_components_json,
                         builder_assessment_tools_json = :builder_assessment_tools_json,
                         updated_at = NOW()
                     WHERE id = :id',
                    [
                        'builder_state_json' => $encoded,
                        'builder_state_version' => $stateVersion,
                        'builder_templates_json' => $templatesJson,
                        'builder_components_json' => $componentsJson,
                        'builder_assessment_tools_json' => $toolsJson,
                        'id' => (int) $existing['id'],
                    ]
                );
            } else {
                DatabaseHelper::query(
                    'INSERT INTO organization_certificate_settings (
                        organization_id, title_ribbon_text, statement_text, template_key,
                        show_org_logo, show_signatures, enable_decorations, pdf_mode, extra_footer_text,
                        builder_state_json, builder_state_version, builder_templates_json, builder_components_json, builder_assessment_tools_json,
                        user_id, created_at, updated_at
                    ) VALUES (
                        :organization_id, :title_ribbon_text, :statement_text, :template_key,
                        :show_org_logo, :show_signatures, :enable_decorations, :pdf_mode, :extra_footer_text,
                        :builder_state_json, :builder_state_version, :builder_templates_json, :builder_components_json, :builder_assessment_tools_json,
                        :user_id, NOW(), NOW()
                    )',
                    [
                        'organization_id' => $organizationId,
                        'title_ribbon_text' => 'گواهی پایان دوره',
                        'statement_text' => 'گزارش بازخورد',
                        'template_key' => 'classic',
                        'show_org_logo' => 1,
                        'show_signatures' => 1,
                        'enable_decorations' => 1,
                        'pdf_mode' => 'simple',
                        'extra_footer_text' => '',
                        'builder_state_json' => $encoded,
                        'builder_state_version' => $stateVersion,
                        'builder_templates_json' => $templatesJson,
                        'builder_components_json' => $componentsJson,
                        'builder_assessment_tools_json' => $toolsJson,
                        'user_id' => $userIdentifier !== '' ? $userIdentifier : 'system',
                    ]
                );
            }

            ResponseHelper::flashSuccess('تنظیمات سازنده گواهی با موفقیت ذخیره شد.');
        } catch (Exception $exception) {
            ResponseHelper::flashError('ذخیره تنظیمات سازنده با خطا مواجه شد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function uploadOrganizationCertificateBuilderImage(): void
    {
        $sessionData = $this->ensureOrganizationSession(['reports_settings_manage']);

        AuthHelper::startSession();

        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            ResponseHelper::json([
                'success' => false,
                'message' => 'درخواست نامعتبر است.'
            ], 405);
        }

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::json([
                'success' => false,
                'message' => 'توکن امنیتی نامعتبر است.'
            ], 419);
        }

        if (!isset($_FILES['image'])) {
            ResponseHelper::json([
                'success' => false,
                'message' => 'فایل تصویری ارسال نشده است.'
            ], 400);
        }

        $imageFile = $_FILES['image'];
        if (!isset($imageFile['error']) || (int) $imageFile['error'] !== UPLOAD_ERR_OK) {
            ResponseHelper::json([
                'success' => false,
                'message' => 'در هنگام دریافت فایل خطایی رخ داد.'
            ], 422);
        }
        if (!FileHelper::isValidImage($imageFile)) {
            ResponseHelper::json([
                'success' => false,
                'message' => 'فقط فایل‌های تصویری مجاز هستند.'
            ], 422);
        }

        $maxSize = 5 * 1024 * 1024; // 5 MB
        if (!isset($imageFile['size']) || (int) $imageFile['size'] > $maxSize) {
            ResponseHelper::json([
                'success' => false,
                'message' => 'حجم فایل نباید بیش از ۵ مگابایت باشد.'
            ], 422);
        }

        $organization = $sessionData['organization'];
        $organizationId = (int) ($organization['id'] ?? 0);
        if ($organizationId <= 0) {
            ResponseHelper::json([
                'success' => false,
                'message' => 'شناسه سازمان نامعتبر است.'
            ], 422);
        }

        $uploadDirectory = 'uploads/organizations/certificates/' . $organizationId . '/builder-assets/';
        $uploadResult = FileHelper::uploadFile(
            $imageFile,
            $uploadDirectory,
            ['jpg', 'jpeg', 'png', 'gif', 'webp']
        );

        if (empty($uploadResult['success'])) {
            ResponseHelper::json([
                'success' => false,
                'message' => $uploadResult['error'] ?? 'در ذخیره فایل خطایی رخ داد.'
            ], 500);
        }

        $publicRelativePath = 'public/' . ltrim($uploadResult['path'] ?? '', '/');
        $absoluteUrl = UtilityHelper::baseUrl($publicRelativePath);

        ResponseHelper::json([
            'success' => true,
            'message' => 'تصویر با موفقیت آپلود شد.',
            'url' => $absoluteUrl,
            'path' => $uploadResult['path'] ?? null,
            'public_path' => $publicRelativePath,
            'filename' => $uploadResult['filename'] ?? null,
            'size' => $uploadResult['size'] ?? null,
        ]);
    }

    private function buildOrganizationExcelReportDataset(int $organizationId, string $search, string $statusFilter, ?int $evaluateeIdFilter = null): array
    {
        $query = 'SELECT 
                id,
                organization_id,
                first_name,
                last_name,
                gender,
                evaluation_code,
                province,
                city,
                created_at,
                username,
                national_code,
                personnel_code,
                organization_post,
                is_active,
                is_evaluee
            FROM organization_users
            WHERE organization_id = :organization_id
                AND is_evaluee = 1';

        $params = [
            'organization_id' => $organizationId,
        ];

        if ($evaluateeIdFilter !== null && $evaluateeIdFilter > 0) {
            $query .= ' AND id = :evaluatee_id';
            $params['evaluatee_id'] = $evaluateeIdFilter;
        }

        if ($search !== '') {
            $query .= ' AND (
                first_name LIKE :search
                OR last_name LIKE :search
                OR evaluation_code LIKE :search
                OR national_code LIKE :search
                OR personnel_code LIKE :search
            )';
            $params['search'] = '%' . $search . '%';
        }

        $query .= ' ORDER BY last_name ASC, first_name ASC';

        try {
            $evaluatees = DatabaseHelper::fetchAll($query, $params);
        } catch (Exception $exception) {
            $evaluatees = [];
        }

        if (!empty($evaluatees)) {
            $evaluatees = $this->normalizeOrganizationUsersRecords($evaluatees);
        }

        $evaluateeIds = array_values(array_filter(array_map(static function (array $row): int {
            return (int) ($row['id'] ?? 0);
        }, $evaluatees), static function (int $value): bool {
            return $value > 0;
        }));

        $participationMap = [];
        $assignedExamMap = [];

        if (!empty($evaluateeIds)) {
            $placeholders = implode(',', array_fill(0, count($evaluateeIds), '?'));
            $sql = "SELECT evaluatee_id,
                           COUNT(*) AS total_participations,
                           SUM(CASE WHEN is_completed = 1 THEN 1 ELSE 0 END) AS completed_participations,
                           MAX(completed_at) AS last_completed_at
                    FROM organization_evaluation_exam_participations
                    WHERE organization_id = ?
                      AND evaluatee_id IN ({$placeholders})
                    GROUP BY evaluatee_id";

            $fetchParams = array_merge([$organizationId], $evaluateeIds);

            try {
                $rows = DatabaseHelper::fetchAll($sql, $fetchParams);
            } catch (Exception $exception) {
                $rows = [];
            }

            foreach ($rows as $row) {
                $evaluateeId = (int) ($row['evaluatee_id'] ?? 0);
                if ($evaluateeId <= 0) {
                    continue;
                }

                $participationMap[$evaluateeId] = [
                    'total' => (int) ($row['total_participations'] ?? 0),
                    'completed' => (int) ($row['completed_participations'] ?? 0),
                    'last_completed_at' => $row['last_completed_at'] ?? null,
                ];
            }
        }

        if ($organizationId > 0) {
            try {
                $evaluationRows = DatabaseHelper::fetchAll(
                    'SELECT id, evaluatees_json FROM organization_evaluations WHERE organization_id = :organization_id',
                    ['organization_id' => $organizationId]
                );
            } catch (Exception $exception) {
                $evaluationRows = [];
            }

            $evaluationIds = [];
            $evaluationEvaluatees = [];

            foreach ($evaluationRows as $evaluationRow) {
                $evaluationId = (int) ($evaluationRow['id'] ?? 0);
                if ($evaluationId <= 0) {
                    continue;
                }

                $evaluationIds[] = $evaluationId;
                $decodedEvaluatees = $this->decodeUserList($evaluationRow['evaluatees_json'] ?? null, []);
                $evaluationEvaluatees[$evaluationId] = [];

                foreach ($decodedEvaluatees as $entry) {
                    $evaluateeId = (int) ($entry['id'] ?? 0);
                    if ($evaluateeId <= 0) {
                        continue;
                    }

                    $evaluationEvaluatees[$evaluationId][] = $evaluateeId;
                    if (!array_key_exists($evaluateeId, $assignedExamMap)) {
                        $assignedExamMap[$evaluateeId] = 0;
                    }
                }
            }

            if (!empty($evaluationIds)) {
                $evaluationPlaceholders = implode(',', array_fill(0, count($evaluationIds), '?'));

                try {
                    $assignmentRows = DatabaseHelper::fetchAll(
                        "SELECT a.evaluation_id, a.tool_id
                         FROM organization_evaluation_tool_assignments a
                         INNER JOIN organization_evaluation_tools t ON t.id = a.tool_id AND t.is_exam = 1
                         WHERE a.evaluation_id IN ({$evaluationPlaceholders})",
                        $evaluationIds
                    );
                } catch (Exception $exception) {
                    $assignmentRows = [];
                }

                $evaluationExamTools = [];
                foreach ($assignmentRows as $assignmentRow) {
                    $evaluationId = (int) ($assignmentRow['evaluation_id'] ?? 0);
                    $toolId = (int) ($assignmentRow['tool_id'] ?? 0);

                    if ($evaluationId <= 0 || $toolId <= 0) {
                        continue;
                    }

                    if (!isset($evaluationExamTools[$evaluationId])) {
                        $evaluationExamTools[$evaluationId] = [];
                    }

                    $evaluationExamTools[$evaluationId][] = $toolId;
                }

                try {
                    $matrixRows = DatabaseHelper::fetchAll(
                        "SELECT evaluation_id, evaluatee_id, tool_id, is_visible
                         FROM organization_evaluation_matrix_visibility
                         WHERE evaluation_id IN ({$evaluationPlaceholders})",
                        $evaluationIds
                    );
                } catch (Exception $exception) {
                    $matrixRows = [];
                }

                $matrixVisibility = [];
                foreach ($matrixRows as $row) {
                    $evaluationId = (int) ($row['evaluation_id'] ?? 0);
                    $evaluateeId = (int) ($row['evaluatee_id'] ?? 0);
                    $toolId = (int) ($row['tool_id'] ?? 0);

                    if ($evaluationId <= 0 || $evaluateeId <= 0 || $toolId <= 0) {
                        continue;
                    }

                    if (!isset($matrixVisibility[$evaluationId])) {
                        $matrixVisibility[$evaluationId] = [];
                    }

                    if (!isset($matrixVisibility[$evaluationId][$evaluateeId])) {
                        $matrixVisibility[$evaluationId][$evaluateeId] = [];
                    }

                    $matrixVisibility[$evaluationId][$evaluateeId][$toolId] = (int) ($row['is_visible'] ?? 0);
                }

                foreach ($evaluationEvaluatees as $evaluationId => $currentEvaluatees) {
                    if (empty($currentEvaluatees)) {
                        continue;
                    }

                    $examToolIds = $evaluationExamTools[$evaluationId] ?? [];
                    if (empty($examToolIds)) {
                        continue;
                    }

                    $visibilityPerEvaluatee = $matrixVisibility[$evaluationId] ?? [];

                    foreach ($currentEvaluatees as $evaluateeId) {
                        if ($evaluateeId <= 0) {
                            continue;
                        }

                        if (!array_key_exists($evaluateeId, $assignedExamMap)) {
                            $assignedExamMap[$evaluateeId] = 0;
                        }

                        $visibleCount = 0;

                        if (!empty($visibilityPerEvaluatee) && isset($visibilityPerEvaluatee[$evaluateeId])) {
                            foreach ($examToolIds as $toolId) {
                                $visibilityFlag = (int) ($visibilityPerEvaluatee[$evaluateeId][$toolId] ?? 0);
                                if ($visibilityFlag === 1) {
                                    $visibleCount++;
                                }
                            }
                        } else {
                            $visibleCount = count($examToolIds);
                        }

                        if ($visibleCount > 0) {
                            $assignedExamMap[$evaluateeId] += $visibleCount;
                        }
                    }
                }
            }
        }

        $statusMeta = [
            'completed' => [
                'label' => 'تکمیل شده',
                'badge_class' => 'badge bg-success-100 text-success-700',
            ],
            'in_progress' => [
                'label' => 'در حال برگزاری',
                'badge_class' => 'badge bg-warning-100 text-warning-700',
            ],
            'pending' => [
                'label' => 'در انتظار شرکت',
                'badge_class' => 'badge bg-info-100 text-info-700',
            ],
            'no_exam' => [
                'label' => 'بدون آزمون ثبت‌شده',
                'badge_class' => 'badge bg-gray-100 text-gray-600',
            ],
        ];

        $totalAssignedExams = 0;
        $totalCompletedExams = 0;

        foreach ($evaluatees as &$evaluatee) {
            $evaluateeId = (int) ($evaluatee['id'] ?? 0);
            $participation = $participationMap[$evaluateeId] ?? ['total' => 0, 'completed' => 0, 'last_completed_at' => null];
            $assignedExams = (int) ($assignedExamMap[$evaluateeId] ?? 0);

            $statusKey = 'no_exam';
            $total = (int) ($participation['total'] ?? 0);
            $completed = (int) ($participation['completed'] ?? 0);

            if ($assignedExams > 0) {
                if ($completed >= $assignedExams) {
                    $statusKey = 'completed';
                } elseif ($completed > 0) {
                    $statusKey = 'in_progress';
                } else {
                    $statusKey = 'pending';
                }
            } elseif ($total > 0) {
                if ($completed >= $total && $completed > 0) {
                    $statusKey = 'completed';
                } elseif ($completed > 0) {
                    $statusKey = 'in_progress';
                } else {
                    $statusKey = 'pending';
                }
            }

            $evaluatee['exam_status_key'] = $statusKey;
            $evaluatee['exam_status_meta'] = $statusMeta[$statusKey] ?? $statusMeta['no_exam'];
            $evaluatee['exam_total_assigned'] = $assignedExams;
            $evaluatee['exam_total_participations'] = $total;
            $evaluatee['exam_completed_participations'] = $completed;
            $evaluatee['exam_pending_participations'] = max(0, $assignedExams - $completed);
            $evaluatee['exam_last_completed_at'] = $participation['last_completed_at'] ?? null;
            $evaluatee['exam_detail_url'] = $completed > 0
                ? UtilityHelper::baseUrl('organizations/reports/excel/detail?evaluatee_id=' . urlencode((string) $evaluateeId))
                : null;

            $totalAssignedExams += $assignedExams;
            $totalCompletedExams += $completed;
        }
        unset($evaluatee);

        $allEvaluatees = $evaluatees;

        if ($statusFilter !== '' && $statusFilter !== 'all') {
            $evaluatees = array_values(array_filter($evaluatees, static function (array $row) use ($statusFilter): bool {
                return ($row['exam_status_key'] ?? '') === $statusFilter;
            }));
        }

        $statusCounters = [
            'total' => count($allEvaluatees),
            'completed' => 0,
            'in_progress' => 0,
            'pending' => 0,
            'no_exam' => 0,
        ];

        foreach ($allEvaluatees as $row) {
            $key = $row['exam_status_key'] ?? 'no_exam';
            if (!isset($statusCounters[$key])) {
                $statusCounters[$key] = 0;
            }
            $statusCounters[$key]++;
        }

        $statusCounters['assigned_exams_total'] = $totalAssignedExams;
        $statusCounters['completed_exams_total'] = $totalCompletedExams;

        $statusOptions = [
            'all' => 'همه وضعیت‌ها',
            'completed' => 'تکمیل شده',
            'in_progress' => 'در حال برگزاری',
            'pending' => 'در انتظار شرکت',
            'no_exam' => 'بدون آزمون ثبت‌شده',
        ];

        return [
            'filtered_rows' => $evaluatees,
            'all_rows' => $allEvaluatees,
            'status_counters' => $statusCounters,
            'status_meta' => $statusMeta,
            'status_options' => $statusOptions,
        ];
    }

    private function buildSelfAssessmentResultsDataset(int $organizationId, string $searchTerm, ?int $evaluationIdFilter = null): array
    {
        $searchTerm = trim($searchTerm);
        $normalizedSearch = $searchTerm !== '' ? UtilityHelper::persianToEnglish($searchTerm) : '';
        $normalizedSearchLower = $normalizedSearch !== ''
            ? (function_exists('mb_strtolower') ? mb_strtolower($normalizedSearch, 'UTF-8') : strtolower($normalizedSearch))
            : '';

        // We will list ALL evaluatees assigned to evaluations (from evaluatees_json) regardless of participation
        $completionMeta = [];
        $assignedExamCount = [];
        $rawRows = [];

        // Load evaluations and their evaluatee assignments
        $evalParams = ['organization_id' => $organizationId];
        $evalWhere = 'organization_id = :organization_id';
        if ($evaluationIdFilter !== null && $evaluationIdFilter > 0) {
            $evalWhere .= ' AND id = :evaluation_id';
            $evalParams['evaluation_id'] = $evaluationIdFilter;
        }
        try {
            $evaluationRows = DatabaseHelper::fetchAll(
                'SELECT id, title, evaluation_date, general_model, specific_model, evaluatees_json
                 FROM organization_evaluations
                 WHERE ' . $evalWhere . '
                 ORDER BY (evaluation_date IS NULL) ASC, evaluation_date DESC, id DESC',
                $evalParams
            );
        } catch (Exception $exception) {
            $evaluationRows = [];
        }

        $evaluationOptions = [
            [
                'value' => 0,
                'label' => 'همه برنامه‌های ارزیابی',
            ],
        ];

        $evaluationIds = [];
        $evaluationEvaluatees = [];
        foreach ($evaluationRows as $evaluationRow) {
            $id = (int) ($evaluationRow['id'] ?? 0);
            if ($id <= 0) {
                continue;
            }

            $title = trim((string) ($evaluationRow['title'] ?? ''));
            if ($title === '') {
                $title = 'برنامه ارزیابی #' . UtilityHelper::englishToPersian((string) $id);
            }

            $evaluationOptions[] = [
                'value' => $id,
                'label' => $title,
            ];

            $evaluationIds[] = $id;
            $evaluationEvaluatees[$id] = array_values(array_map(static function ($entry) {
                return (int) ($entry['id'] ?? 0);
            }, $this->decodeUserList($evaluationRow['evaluatees_json'] ?? null, [])));
        }

    // Gather users for display
        $allEvaluateeIds = [];
        foreach ($evaluationEvaluatees as $ids) {
            foreach ($ids as $uid) {
                if ($uid > 0) { $allEvaluateeIds[$uid] = true; }
            }
        }
        $allEvaluateeIds = array_keys($allEvaluateeIds);

        $userMap = [];
        if (!empty($allEvaluateeIds)) {
            $placeholders = implode(',', array_fill(0, count($allEvaluateeIds), '?'));
            $params = array_merge([$organizationId], $allEvaluateeIds);
            try {
                $userRows = DatabaseHelper::fetchAll(
                    "SELECT id, username, national_code, first_name, last_name
                     FROM organization_users
                     WHERE organization_id = ? AND id IN ({$placeholders})",
                    $params
                );
            } catch (Exception $exception) {
                $userRows = [];
            }

            foreach ($userRows as $ur) {
                $uid = (int) ($ur['id'] ?? 0);
                if ($uid <= 0) { continue; }
                $userMap[$uid] = [
                    'username' => trim((string) ($ur['username'] ?? '')),
                    'national_code' => trim((string) ($ur['national_code'] ?? '')),
                    'first_name' => trim((string) ($ur['first_name'] ?? '')),
                    'last_name' => trim((string) ($ur['last_name'] ?? '')),
                ];
            }
        }

    // Aggregate self-scores for those evaluation/evaluatee pairs (optional)
        $scoreAgg = [];
        if (!empty($evaluationIds) && !empty($allEvaluateeIds)) {
            $evalPh = implode(',', array_fill(0, count($evaluationIds), '?'));
            $usrPh = implode(',', array_fill(0, count($allEvaluateeIds), '?'));
            $params = array_merge([$organizationId], $evaluationIds, $allEvaluateeIds);
            try {
                $scoreRows = DatabaseHelper::fetchAll(
                    "SELECT scores.evaluation_id, scores.evaluatee_id,
                            AVG(scores.score_value) AS average_score,
                            COUNT(*) AS score_count,
                            MAX(scores.updated_at) AS last_scored_at
                     FROM organization_evaluation_tool_scores scores
                     WHERE scores.organization_id = ?
                       AND scores.scorer_id = scores.evaluatee_id
                       AND scores.evaluation_id IN ({$evalPh})
                       AND scores.evaluatee_id IN ({$usrPh})
                     GROUP BY scores.evaluation_id, scores.evaluatee_id",
                    $params
                );
            } catch (Exception $exception) {
                $scoreRows = [];
            }

            foreach ($scoreRows as $sr) {
                $eid = (int) ($sr['evaluation_id'] ?? 0);
                $uid = (int) ($sr['evaluatee_id'] ?? 0);
                if ($eid <= 0 || $uid <= 0) { continue; }
                if (!isset($scoreAgg[$eid])) { $scoreAgg[$eid] = []; }
                $scoreAgg[$eid][$uid] = [
                    'average_score' => isset($sr['average_score']) ? (float) $sr['average_score'] : null,
                    'score_count' => (int) ($sr['score_count'] ?? 0),
                    'last_scored_at' => $sr['last_scored_at'] ?? null,
                ];
            }
        }

        // Build exam completion map using answers vs. questions per tool
        $examToolsByEvaluation = [];
        if (!empty($evaluationIds)) {
            $ph = implode(',', array_fill(0, count($evaluationIds), '?'));
            try {
                $assignments = DatabaseHelper::fetchAll(
                    "SELECT a.evaluation_id, a.tool_id
                     FROM organization_evaluation_tool_assignments a
                     INNER JOIN organization_evaluation_tools t ON t.id = a.tool_id AND t.is_exam = 1
                     WHERE a.evaluation_id IN ({$ph})",
                    $evaluationIds
                );
            } catch (Exception $exception) {
                $assignments = [];
            }

            foreach ($assignments as $ar) {
                $eid = (int) ($ar['evaluation_id'] ?? 0);
                $tid = (int) ($ar['tool_id'] ?? 0);
                if ($eid <= 0 || $tid <= 0) { continue; }
                if (!isset($examToolsByEvaluation[$eid])) { $examToolsByEvaluation[$eid] = []; }
                $examToolsByEvaluation[$eid][$tid] = true;
            }
        }

        $toolIdsAll = [];
        foreach ($examToolsByEvaluation as $eid => $toolSet) {
            foreach (array_keys($toolSet) as $tid) { $toolIdsAll[$tid] = true; }
        }
        $toolIdsAll = array_keys($toolIdsAll);

        $questionCountsByTool = [];
        if (!empty($toolIdsAll)) {
            $ph = implode(',', array_fill(0, count($toolIdsAll), '?'));
            try {
                $qRows = DatabaseHelper::fetchAll(
                    "SELECT evaluation_tool_id AS tool_id, COUNT(*) AS total_q
                     FROM organization_evaluation_tool_questions
                     WHERE evaluation_tool_id IN ({$ph})
                     GROUP BY evaluation_tool_id",
                    $toolIdsAll
                );
            } catch (Exception $exception) {
                $qRows = [];
            }
            foreach ($qRows as $qr) {
                $tid = (int) ($qr['tool_id'] ?? 0);
                if ($tid <= 0) { continue; }
                $questionCountsByTool[$tid] = (int) ($qr['total_q'] ?? 0);
            }
        }

        $answerCounts = [];
        if (!empty($evaluationIds) && !empty($allEvaluateeIds)) {
            $evalPh = implode(',', array_fill(0, count($evaluationIds), '?'));
            $usrPh = implode(',', array_fill(0, count($allEvaluateeIds), '?'));
            $params = array_merge([$organizationId], $evaluationIds, $allEvaluateeIds);
            try {
                $aRows = DatabaseHelper::fetchAll(
                    "SELECT evaluation_id, tool_id, evaluatee_id, COUNT(*) AS total_answers
                     FROM organization_evaluation_exam_answers
                     WHERE organization_id = ?
                       AND evaluation_id IN ({$evalPh})
                       AND evaluatee_id IN ({$usrPh})
                     GROUP BY evaluation_id, tool_id, evaluatee_id",
                    $params
                );
            } catch (Exception $exception) {
                $aRows = [];
            }
            foreach ($aRows as $ar) {
                $eid = (int) ($ar['evaluation_id'] ?? 0);
                $tid = (int) ($ar['tool_id'] ?? 0);
                $uid = (int) ($ar['evaluatee_id'] ?? 0);
                if ($eid <= 0 || $tid <= 0 || $uid <= 0) { continue; }
                if (!isset($answerCounts[$eid])) { $answerCounts[$eid] = []; }
                if (!isset($answerCounts[$eid][$uid])) { $answerCounts[$eid][$uid] = []; }
                $answerCounts[$eid][$uid][$tid] = (int) ($ar['total_answers'] ?? 0);
            }
        }

        // Participation completion flags per tool (fallback when tool has 0 questions)
        $participationCompleted = [];
        if (!empty($evaluationIds) && !empty($allEvaluateeIds)) {
            $evalPh = implode(',', array_fill(0, count($evaluationIds), '?'));
            $usrPh = implode(',', array_fill(0, count($allEvaluateeIds), '?'));
            $params = array_merge([$organizationId], $evaluationIds, $allEvaluateeIds);
            try {
                $pRows = DatabaseHelper::fetchAll(
                    "SELECT evaluation_id, tool_id, evaluatee_id, MAX(is_completed) AS is_completed
                     FROM organization_evaluation_exam_participations
                     WHERE organization_id = ?
                       AND evaluation_id IN ({$evalPh})
                       AND evaluatee_id IN ({$usrPh})
                     GROUP BY evaluation_id, tool_id, evaluatee_id",
                    $params
                );
            } catch (Exception $exception) {
                $pRows = [];
            }
            foreach ($pRows as $pr) {
                $eid = (int) ($pr['evaluation_id'] ?? 0);
                $tid = (int) ($pr['tool_id'] ?? 0);
                $uid = (int) ($pr['evaluatee_id'] ?? 0);
                if ($eid <= 0 || $tid <= 0 || $uid <= 0) { continue; }
                if (!isset($participationCompleted[$eid])) { $participationCompleted[$eid] = []; }
                if (!isset($participationCompleted[$eid][$uid])) { $participationCompleted[$eid][$uid] = []; }
                $participationCompleted[$eid][$uid][$tid] = ((int) ($pr['is_completed'] ?? 0) === 1);
            }
        }

        // Check WashUp completion: at least one agreed score exists for each evaluation/evaluatee pair
        $this->ensureOrganizationEvaluationAgreedScoresTableExists();
        $washupCompleted = [];
        if (!empty($evaluationIds) && !empty($allEvaluateeIds)) {
            $evalPh = implode(',', array_fill(0, count($evaluationIds), '?'));
            $usrPh = implode(',', array_fill(0, count($allEvaluateeIds), '?'));
            $params = array_merge([$organizationId], $evaluationIds, $allEvaluateeIds);
            try {
                $washupRows = DatabaseHelper::fetchAll(
                    "SELECT evaluation_id, evaluatee_id, COUNT(*) AS agreed_count
                     FROM organization_evaluation_agreed_scores
                     WHERE organization_id = ?
                       AND evaluation_id IN ({$evalPh})
                       AND evaluatee_id IN ({$usrPh})
                       AND agreed_score IS NOT NULL
                     GROUP BY evaluation_id, evaluatee_id",
                    $params
                );
            } catch (Exception $exception) {
                $washupRows = [];
            }
            foreach ($washupRows as $wr) {
                $eid = (int) ($wr['evaluation_id'] ?? 0);
                $uid = (int) ($wr['evaluatee_id'] ?? 0);
                $agreedCount = (int) ($wr['agreed_count'] ?? 0);
                if ($eid <= 0 || $uid <= 0) { continue; }
                if (!isset($washupCompleted[$eid])) { $washupCompleted[$eid] = []; }
                $washupCompleted[$eid][$uid] = ($agreedCount > 0);
            }
        }

        $formatDateTimeDisplay = static function (?string $dateTime): string {
            if ($dateTime === null || trim($dateTime) === '') {
                return '—';
            }

            try {
                $dt = new DateTime($dateTime, new DateTimeZone('Asia/Tehran'));
            } catch (Exception $exception) {
                try {
                    $dt = new DateTime($dateTime);
                } catch (Exception $innerException) {
                    return '—';
                }

                $dt->setTimezone(new DateTimeZone('Asia/Tehran'));
            }

            if (class_exists('IntlDateFormatter')) {
                $formatter = new IntlDateFormatter(
                    'fa_IR',
                    IntlDateFormatter::SHORT,
                    IntlDateFormatter::SHORT,
                    'Asia/Tehran',
                    IntlDateFormatter::TRADITIONAL,
                    'yyyy/MM/dd HH:mm'
                );

                if ($formatter !== false) {
                    $formatted = $formatter->format($dt);
                    if ($formatted !== false) {
                        return UtilityHelper::englishToPersian($formatted);
                    }
                }
            }

            return UtilityHelper::englishToPersian($dt->format('Y/m/d H:i'));
        };

        $filteredRows = [];
        $totalScoreSum = 0.0;
        $scoreCountWithValue = 0;
        $totalPairs = 0;

        // Build rows from evaluation -> assigned evaluatees
        foreach ($evaluationRows as $evaluationRow) {
            $evaluationId = (int) ($evaluationRow['id'] ?? 0);
            if ($evaluationId <= 0) { continue; }

            $evaluationTitle = trim((string) ($evaluationRow['title'] ?? ''));
            if ($evaluationTitle === '') {
                $evaluationTitle = 'برنامه ارزیابی #' . UtilityHelper::englishToPersian((string) $evaluationId);
            }
            $evaluationDate = $evaluationRow['evaluation_date'] ?? null;
            $specificModelRaw = trim((string) ($evaluationRow['specific_model'] ?? ''));
            $generalModelRaw = trim((string) ($evaluationRow['general_model'] ?? ''));
            $competencyModelDisplay = '—';
            if ($specificModelRaw !== '') {
                $specificModelMeta = $this->resolveCompetencyModelByLabel($organizationId, $specificModelRaw);
                if (!empty($specificModelMeta['title'])) {
                    $competencyModelDisplay = trim((string) $specificModelMeta['title']);
                } else {
                    $competencyModelDisplay = $specificModelRaw;
                }
            } elseif ($generalModelRaw !== '') {
                $generalModelMeta = $this->resolveCompetencyModelByLabel($organizationId, $generalModelRaw);
                if (!empty($generalModelMeta['title'])) {
                    $competencyModelDisplay = trim((string) $generalModelMeta['title']);
                } else {
                    $competencyModelDisplay = $generalModelRaw;
                }
            }

            $evaluateeIds = $evaluationEvaluatees[$evaluationId] ?? [];
            foreach ($evaluateeIds as $evaluateeId) {
                if ($evaluateeId <= 0) { continue; }
                $totalPairs++;

                $user = $userMap[$evaluateeId] ?? [
                    'username' => '',
                    'national_code' => '',
                    'first_name' => '',
                    'last_name' => '',
                ];

                $score = $scoreAgg[$evaluationId][$evaluateeId] ?? [
                    'average_score' => null,
                    'score_count' => 0,
                    'last_scored_at' => null,
                ];

                $averageScore = $score['average_score'];
                if ($averageScore !== null) {
                    $averageScore = round((float) $averageScore, 2);
                }
                $scoreCount = (int) ($score['score_count'] ?? 0);
                $lastScoredAt = $score['last_scored_at'] ?? null;

                $searchHaystack = UtilityHelper::persianToEnglish(
                    ($user['username'] ?? '') . ' ' . ($user['national_code'] ?? '') . ' ' . ($user['first_name'] ?? '') . ' ' . ($user['last_name'] ?? '') . ' ' . $evaluationTitle . ' ' . $competencyModelDisplay
                );
                $searchHaystackLower = function_exists('mb_strtolower')
                    ? mb_strtolower($searchHaystack, 'UTF-8')
                    : strtolower($searchHaystack);

                if ($normalizedSearchLower !== '' && strpos($searchHaystackLower, $normalizedSearchLower) === false) {
                    continue;
                }

                $evaluationDateMeta = $this->formatEvaluationPersianDate($evaluationDate);

                if ($averageScore !== null) {
                    $totalScoreSum += $averageScore;
                    $scoreCountWithValue++;
                }

                // Determine exam results visibility per evaluation: all exam tools completed AND WashUp completed
                $examResultsViewable = false;
                $evalToolSet = $examToolsByEvaluation[$evaluationId] ?? [];
                if (!empty($evalToolSet)) {
                    $allOk = true;
                    foreach (array_keys($evalToolSet) as $tid) {
                        $need = (int) ($questionCountsByTool[$tid] ?? 0);
                        $have = (int) (($answerCounts[$evaluationId][$evaluateeId][$tid] ?? 0));
                        $completedFlag = !empty($participationCompleted[$evaluationId][$evaluateeId][$tid]);

                        if ($need > 0) {
                            if ($have < $need) { $allOk = false; break; }
                        } else {
                            if (!$completedFlag) { $allOk = false; break; }
                        }
                    }
                    
                    // Also check if WashUp is completed (at least one agreed score exists)
                    if ($allOk) {
                        $washupDone = !empty($washupCompleted[$evaluationId][$evaluateeId]);
                        if (!$washupDone) {
                            $allOk = false;
                        }
                    }
                    
                    $examResultsViewable = $allOk;
                }

                $filteredRows[] = [
                    'evaluatee_id' => $evaluateeId,
                    'evaluation_id' => $evaluationId,
                    'evaluation_title' => $evaluationTitle,
                    'evaluation_date' => $evaluationDate,
                    'evaluation_date_display' => $evaluationDateMeta['display'] ?? '—',
                    'competency_model' => $competencyModelDisplay,
                    'username' => $user['username'] ?? '',
                    'national_code' => $user['national_code'] ?? '',
                    'first_name' => $user['first_name'] ?? '',
                    'last_name' => $user['last_name'] ?? '',
                    'average_score' => $averageScore,
                    'score_count' => $scoreCount,
                    'last_scored_at' => $lastScoredAt,
                    'last_scored_at_display' => $formatDateTimeDisplay($lastScoredAt),
                    'exam_results_viewable' => $examResultsViewable,
                ];
            }
        }

        usort($filteredRows, static function (array $a, array $b): int {
            $dateA = $a['last_scored_at'] ?? null;
            $dateB = $b['last_scored_at'] ?? null;

            if ($dateA === $dateB) {
                $evalCompare = strcmp((string) ($b['evaluation_date'] ?? ''), (string) ($a['evaluation_date'] ?? ''));
                if ($evalCompare !== 0) {
                    return $evalCompare;
                }

                return strcmp((string) ($a['username'] ?? ''), (string) ($b['username'] ?? ''));
            }

            if ($dateA === null) {
                return 1;
            }

            if ($dateB === null) {
                return -1;
            }

            try {
                $timeA = (new DateTime($dateA))->getTimestamp();
                $timeB = (new DateTime($dateB))->getTimestamp();
            } catch (Exception $exception) {
                return strcmp((string) $dateB, (string) $dateA);
            }

            return $timeB <=> $timeA;
        });

        $summary = [
            'total_records' => $totalPairs,
            'filtered_records' => count($filteredRows),
            'average_score' => $scoreCountWithValue > 0 ? round($totalScoreSum / max($scoreCountWithValue, 1), 2) : null,
        ];

        return [
            'rows' => $filteredRows,
            'summary' => $summary,
            'evaluation_options' => $evaluationOptions,
            'selected_evaluation_id' => $evaluationIdFilter ?? 0,
            'search_term' => $searchTerm,
        ];
    }

    public function organizationExcelReportDownload(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationUsersTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationExamParticipationsTableExists();
        $this->ensureOrganizationEvaluationExamAnswersTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolQuestionsTableExists();
        $this->ensureOrganizationEvaluationToolAnswersTableExists();

        $organization = $sessionData['organization'] ?? [];
        $organizationId = (int) ($organization['id'] ?? 0);

        if ($organizationId <= 0) {
            ResponseHelper::flashError('شناسه سازمان نامعتبر است.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/reports/excel'));
        }

        $search = trim((string) ($_GET['search'] ?? ''));
        $statusFilter = trim((string) ($_GET['exam_status'] ?? 'all'));
        if ($statusFilter === '') {
            $statusFilter = 'all';
        }

        $evaluateeIdFilterInput = UtilityHelper::persianToEnglish(trim((string) ($_GET['evaluatee_id'] ?? '0')));
        $evaluateeIdFilter = (int) $evaluateeIdFilterInput;
        if ($evaluateeIdFilter <= 0) {
            $evaluateeIdFilter = null;
        }

        $evaluationIdFilterInput = UtilityHelper::persianToEnglish(trim((string) ($_GET['evaluation_id'] ?? '0')));
        $evaluationIdFilter = (int) $evaluationIdFilterInput;
        if ($evaluationIdFilter <= 0) {
            $evaluationIdFilter = null;
        }

        $participationIdFilterInput = UtilityHelper::persianToEnglish(trim((string) ($_GET['participation_id'] ?? '0')));
        $participationIdFilter = (int) $participationIdFilterInput;
        if ($participationIdFilter <= 0) {
            $participationIdFilter = null;
        }

        $redirectBaseUrl = $evaluateeIdFilter !== null
            ? UtilityHelper::baseUrl('organizations/reports/excel/detail?evaluatee_id=' . urlencode((string) $evaluateeIdFilter))
            : UtilityHelper::baseUrl('organizations/reports/excel');

        $dataset = $this->buildOrganizationExcelReportDataset($organizationId, $search, $statusFilter, $evaluateeIdFilter);

        $evaluateeRows = $dataset['filtered_rows'] ?? [];

        if (empty($evaluateeRows)) {
            ResponseHelper::flashInfo('هیچ داده‌ای برای خروجی اکسل یافت نشد.');

            if ($evaluateeIdFilter !== null) {
                UtilityHelper::redirect($redirectBaseUrl);
            }

            $redirectQuery = [];
            if ($search !== '') {
                $redirectQuery['search'] = $search;
            }
            if ($statusFilter !== '' && $statusFilter !== 'all') {
                $redirectQuery['exam_status'] = $statusFilter;
            }

            $redirectUrl = $redirectBaseUrl . (!empty($redirectQuery) ? '?' . http_build_query($redirectQuery) : '');
            UtilityHelper::redirect($redirectUrl);
        }

        $evaluateeIds = array_values(array_filter(array_map(static function ($row) {
            return (int) ($row['id'] ?? 0);
        }, $evaluateeRows), static function (int $value): bool {
            return $value > 0;
        }));

    $participationsByEvaluatee = [];

        if (!empty($evaluateeIds)) {
            $placeholders = implode(',', array_fill(0, count($evaluateeIds), '?'));
            $sql = "SELECT p.*,
                           e.title AS evaluation_title,
                           t.name AS tool_name,
                           t.code AS tool_code,
                           t.question_type,
                           t.calculation_formula
                    FROM organization_evaluation_exam_participations p
                    LEFT JOIN organization_evaluations e ON e.id = p.evaluation_id
                    LEFT JOIN organization_evaluation_tools t ON t.id = p.tool_id
                    WHERE p.organization_id = ?
                      AND p.is_completed = 1
                      AND p.evaluatee_id IN ({$placeholders})
                    ORDER BY p.evaluatee_id ASC, p.completed_at ASC, p.id ASC";

            $fetchParams = array_merge([$organizationId], $evaluateeIds);

            try {
                $participationRows = DatabaseHelper::fetchAll($sql, $fetchParams);
            } catch (Exception $exception) {
                $participationRows = [];
            }

            foreach ($participationRows as $row) {
                $evaluateeId = (int) ($row['evaluatee_id'] ?? 0);
                $participationId = (int) ($row['id'] ?? 0);

                if ($evaluateeId <= 0 || $participationId <= 0) {
                    continue;
                }

                if (!isset($participationsByEvaluatee[$evaluateeId])) {
                    $participationsByEvaluatee[$evaluateeId] = [];
                }

                $participationsByEvaluatee[$evaluateeId][] = $row;
            }
        }

        $rowsByEvaluation = [];
        $questionCache = [];
        $answerOptionCache = [];

        foreach ($evaluateeRows as $evaluatee) {
            $evaluateeId = (int) ($evaluatee['id'] ?? 0);
            if ($evaluateeId <= 0) {
                continue;
            }

            if ($evaluateeIdFilter !== null && $evaluateeId !== $evaluateeIdFilter) {
                continue;
            }

            $fullName = trim((string) ($evaluatee['first_name'] ?? '') . ' ' . (string) ($evaluatee['last_name'] ?? ''));
            if ($fullName === '') {
                $fullName = trim((string) ($evaluatee['username'] ?? 'ارزیابی‌شونده'));
            }
            if ($fullName === '') {
                $fullName = 'ارزیابی‌شونده';
            }

            $username = (string) ($evaluatee['username'] ?? '');
            $evaluationCode = (string) ($evaluatee['evaluation_code'] ?? '');
            $statusMeta = $evaluatee['exam_status_meta'] ?? ['label' => 'نامشخص'];
            $statusLabel = (string) ($statusMeta['label'] ?? 'نامشخص');

            $participationsAll = $participationsByEvaluatee[$evaluateeId] ?? [];

            foreach ($participationsAll as $participation) {
                $participationId = (int) ($participation['id'] ?? 0);
                if ($participationId <= 0) {
                    continue;
                }

                $evaluationId = (int) ($participation['evaluation_id'] ?? 0);
                if ($evaluationIdFilter !== null && $evaluationId !== $evaluationIdFilter) {
                    continue;
                }

                if ($participationIdFilter !== null && $participationId !== $participationIdFilter) {
                    continue;
                }

                $exportData = $this->buildParticipationExportRows($organizationId, $participation, $questionCache, $answerOptionCache);
                $answerRows = $exportData['rows'];
                $mbtiType = $exportData['mbti_type'];
                $dominantTrait = $exportData['dominant_trait'];

                $mbtiDisplay = $mbtiType !== '' ? UtilityHelper::englishToPersian($mbtiType) : '';
                $dominantDisplay = $dominantTrait !== '' ? UtilityHelper::englishToPersian($dominantTrait) : '';

                $completedAt = $participation['completed_at'] ?? $participation['participated_at'] ?? null;
                $completedDisplay = '-';
                if (!empty($completedAt)) {
                    try {
                        $dt = new DateTime($completedAt, new DateTimeZone('Asia/Tehran'));
                        $completedDisplay = UtilityHelper::englishToPersian($dt->format('Y/m/d H:i'));
                    } catch (Exception $exception) {
                        $completedDisplay = UtilityHelper::englishToPersian($completedAt);
                    }
                }

                $questionTypeLabel = (string) ($participation['question_type'] ?? '');
                $toolName = (string) ($participation['tool_name'] ?? '');
                $evaluationTitle = (string) ($participation['evaluation_title'] ?? '');

                $evaluationKey = $evaluationId > 0 ? 'evaluation_' . $evaluationId : 'participation_' . $participationId;

                if (!isset($rowsByEvaluation[$evaluationKey])) {
                    $rowsByEvaluation[$evaluationKey] = [
                        'evaluation_id' => $evaluationId,
                        'participation_id' => $participationId,
                        'evaluation_title' => $evaluationTitle !== '' ? $evaluationTitle : 'ارزیابی بدون عنوان',
                        'rows' => [],
                    ];
                }

                $targetRows = &$rowsByEvaluation[$evaluationKey]['rows'];

                if (empty($answerRows)) {
                    $targetRows[] = [
                        UtilityHelper::englishToPersian((string) $evaluateeId),
                        $fullName,
                        $username,
                        UtilityHelper::englishToPersian($evaluationCode),
                        $statusLabel,
                        $evaluationTitle,
                        $toolName,
                        UtilityHelper::englishToPersian((string) $participationId),
                        $completedDisplay,
                        $questionTypeLabel,
                        $mbtiDisplay,
                        $dominantDisplay,
                        '-',
                        '-',
                        '-',
                        '-',
                        '-',
                        '-',
                        '-',
                        '-',
                        '-',
                        '-',
                        '-',
                        '-',
                        '-',
                    ];
                } else {
                    foreach ($answerRows as $answerRow) {
                        $questionIndexDisplay = UtilityHelper::englishToPersian((string) ($answerRow['question_index'] ?? ''));
                        $questionType = (string) ($answerRow['question_type_label'] ?? 'سوال');
                        $questionTitle = (string) ($answerRow['question_title'] ?? '');
                        $questionText = (string) ($answerRow['question_text'] ?? '');
                        $questionDescription = (string) ($answerRow['question_description'] ?? '');
                        $answerText = (string) ($answerRow['answer_text'] ?? '');
                        $answerCode = (string) ($answerRow['answer_code'] ?? '');

                        $numericScore = $answerRow['numeric_score'];
                        $numericScoreDisplay = $numericScore !== '' && $numericScore !== null
                            ? UtilityHelper::englishToPersian((string) (is_numeric($numericScore) ? number_format((float) $numericScore, 2) : $numericScore))
                            : '';

                        $characterScore = (string) ($answerRow['character_score'] ?? '');
                        $characterScoreDisplay = $characterScore !== '' ? UtilityHelper::englishToPersian($characterScore) : '';

                        $isCorrect = $answerRow['is_correct'];
                        $answerStatus = '-';
                        if ($isCorrect === true || $isCorrect === 1) {
                            $answerStatus = 'صحیح';
                        } elseif ($isCorrect === false || $isCorrect === 0) {
                            $answerStatus = 'نادرست';
                        }

                        $discBest = (string) ($answerRow['disc_best'] ?? '');
                        $discLeast = (string) ($answerRow['disc_least'] ?? '');

                        $additionalDetails = (string) ($answerRow['additional_details'] ?? '');

                        $targetRows[] = [
                            UtilityHelper::englishToPersian((string) $evaluateeId),
                            $fullName,
                            $username,
                            UtilityHelper::englishToPersian($evaluationCode),
                            $statusLabel,
                            $evaluationTitle,
                            $toolName,
                            UtilityHelper::englishToPersian((string) $participationId),
                            $completedDisplay,
                            $questionTypeLabel,
                            $mbtiDisplay,
                            $dominantDisplay,
                            $questionIndexDisplay,
                            $questionType,
                            $questionTitle,
                            $questionText,
                            $questionDescription,
                            $answerText,
                            UtilityHelper::englishToPersian($answerCode),
                            $numericScoreDisplay,
                            $characterScoreDisplay,
                            $answerStatus,
                            $discBest !== '' ? UtilityHelper::englishToPersian($discBest) : '',
                            $discLeast !== '' ? UtilityHelper::englishToPersian($discLeast) : '',
                            $additionalDetails,
                        ];
                    }
                }

                unset($targetRows);
            }
        }

        if (empty($rowsByEvaluation)) {
            ResponseHelper::flashInfo('هیچ آزمون تکمیل‌شده‌ای مطابق فیلترهای انتخاب‌شده یافت نشد.');
            UtilityHelper::redirect($redirectBaseUrl);
        }

        if (!class_exists('ZipArchive')) {
            ResponseHelper::flashError('امکان ایجاد فایل ZIP بر روی سرور وجود ندارد. لطفاً با پشتیبانی تماس بگیرید.');
            UtilityHelper::redirect($redirectBaseUrl);
        }

        $headers = [
            'شناسه ارزیابی‌شونده',
            'نام ارزیابی‌شونده',
            'نام کاربری',
            'کد ارزیابی',
            'وضعیت کلی آزمون',
            'عنوان ارزیابی',
            'ابزار ارزیابی',
            'شناسه شرکت در آزمون',
            'تاریخ تکمیل آزمون',
            'نوع سوالات ابزار',
            'تیپ شخصیتی MBTI',
            'تیپ غالب',
            'شماره سوال',
            'نوع سوال',
            'عنوان سوال',
            'متن سوال',
            'توضیحات سوال',
            'پاسخ انتخاب‌شده',
            'کد پاسخ',
            'امتیاز عددی',
            'امتیاز کاراکتری',
            'وضعیت پاسخ',
            'DISC BEST',
            'DISC LEAST',
            'جزئیات پاسخ',
        ];

        $zipTempPath = tempnam(sys_get_temp_dir(), 'org-exam-export-');
        $zipFilePath = $zipTempPath . '.zip';
        rename($zipTempPath, $zipFilePath);

        $zip = new ZipArchive();
        if ($zip->open($zipFilePath, ZipArchive::CREATE | ZipArchive::OVERWRITE) !== true) {
            @unlink($zipFilePath);
            ResponseHelper::flashError('ایجاد فایل خروجی امکان‌پذیر نبود.');
            UtilityHelper::redirect($redirectBaseUrl);
        }

        foreach ($rowsByEvaluation as $bundle) {
            $evaluationId = (int) ($bundle['evaluation_id'] ?? 0);
            $participationId = (int) ($bundle['participation_id'] ?? 0);
            $title = (string) ($bundle['evaluation_title'] ?? 'exam');

            $fileName = $this->generateExportFilename($title, $evaluationId > 0 ? $evaluationId : $participationId);

            $xlsxContents = $this->createExamExportXlsx($headers, $bundle['rows']);
            if ($xlsxContents === '') {
                continue;
            }

            $zip->addFromString($fileName, $xlsxContents);
        }

        $zip->close();

        if (!file_exists($zipFilePath)) {
            ResponseHelper::flashError('امکان ایجاد فایل خروجی وجود ندارد.');
            UtilityHelper::redirect($redirectBaseUrl);
        }

        $downloadFilename = 'organization-exam-details-' . date('Ymd-His') . '.zip';

        header('Content-Type: application/zip');
        header('Content-Disposition: attachment; filename="' . $downloadFilename . '"');
        header('Content-Length: ' . filesize($zipFilePath));
        header('Pragma: no-cache');
        header('Expires: 0');

        readfile($zipFilePath);
        @unlink($zipFilePath);
        exit;
    }

    private function buildParticipationExportRows(int $organizationId, array $participation, array &$questionCache, array &$answerOptionCache): array
    {
        $participationId = (int) ($participation['id'] ?? 0);
        $toolId = (int) ($participation['tool_id'] ?? 0);

        if ($participationId <= 0 || $toolId <= 0) {
            return [
                'rows' => [],
                'mbti_type' => '',
                'dominant_trait' => '',
            ];
        }

        if (!isset($questionCache[$toolId])) {
            $questionCache[$toolId] = $this->loadToolQuestions($organizationId, $toolId);
        }

        if (!isset($answerOptionCache[$toolId])) {
            $answerOptionCache[$toolId] = $this->loadToolAnswerOptions($organizationId, $toolId);
        }

        $questionMap = $questionCache[$toolId] ?? [];
        $answerOptions = $answerOptionCache[$toolId] ?? [];

        try {
            $answerRows = DatabaseHelper::fetchAll(
                'SELECT *
                 FROM organization_evaluation_exam_answers
                 WHERE participation_id = :participation_id
                   AND organization_id = :organization_id
                 ORDER BY question_id ASC, id ASC',
                [
                    'participation_id' => $participationId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $answerRows = [];
        }

        $toolMeta = [
            'question_type' => $participation['question_type'] ?? '',
            'calculation_formula' => $participation['calculation_formula'] ?? '',
        ];

        $summaryStats = $this->buildParticipationSummaryStats($answerRows, $questionMap, $answerOptions, $toolMeta);
        $questionEntries = $this->buildParticipationQuestionEntries($answerRows, $questionMap, $answerOptions, $toolMeta);

        $characterSummary = $summaryStats['character_summary'] ?? [];
        $mbtiType = '';
        $dominantTrait = '';

        foreach ($characterSummary as $item) {
            $label = mb_strtolower((string) ($item['label'] ?? ''), 'UTF-8');
            $value = (string) ($item['value'] ?? '');

            if ($value === '') {
                continue;
            }

            if (strpos($label, 'mbti') !== false) {
                $mbtiType = $value;
            } elseif (strpos($label, 'غالب') !== false || strpos($label, 'dominant') !== false) {
                $dominantTrait = $value;
            }
        }

        $rows = [];
        $questionIndex = 1;

        foreach ($questionEntries as $entry) {
            $questionTypeLabel = !empty($entry['is_description_only']) ? 'توضیحی' : 'سوال';
            $answers = $entry['answers'] ?? [];

            if (empty($answers)) {
                $rows[] = [
                    'question_index' => $questionIndex,
                    'question_type_label' => $questionTypeLabel,
                    'question_title' => $entry['title'] ?? '',
                    'question_text' => $entry['text'] ?? '',
                    'question_description' => $entry['description'] ?? '',
                    'answer_text' => '',
                    'answer_code' => '',
                    'numeric_score' => '',
                    'character_score' => '',
                    'is_correct' => null,
                    'disc_best' => '',
                    'disc_least' => '',
                    'additional_details' => '',
                ];
            } else {
                foreach ($answers as $answer) {
                    $rows[] = [
                        'question_index' => $questionIndex,
                        'question_type_label' => $questionTypeLabel,
                        'question_title' => $entry['title'] ?? '',
                        'question_text' => $entry['text'] ?? '',
                        'question_description' => $entry['description'] ?? '',
                        'answer_text' => $answer['answer_text'] ?? '',
                        'answer_code' => $answer['answer_code'] ?? '',
                        'numeric_score' => $answer['numeric_score'] ?? '',
                        'character_score' => $answer['character_score'] ?? '',
                        'is_correct' => $answer['is_correct'] ?? null,
                        'disc_best' => $answer['disc_best']['code'] ?? '',
                        'disc_least' => $answer['disc_least']['code'] ?? '',
                        'additional_details' => $this->stringifyAnswerPayload($answer['raw_payload'] ?? null),
                    ];
                }
            }

            $questionIndex++;
        }

        return [
            'rows' => $rows,
            'mbti_type' => $mbtiType,
            'dominant_trait' => $dominantTrait,
        ];
    }

    private function stringifyAnswerPayload($payload): string
    {
        if ($payload === null || $payload === '') {
            return '';
        }

        if (is_string($payload)) {
            $decoded = json_decode($payload, true);
            if (json_last_error() === JSON_ERROR_NONE) {
                return $this->stringifyAnswerPayload($decoded);
            }

            return UtilityHelper::englishToPersian($payload);
        }

        if (is_scalar($payload)) {
            return UtilityHelper::englishToPersian((string) $payload);
        }

        if (is_array($payload)) {
            $parts = [];
            foreach ($payload as $key => $value) {
                $label = is_int($key)
                    ? UtilityHelper::englishToPersian((string) ($key + 1))
                    : UtilityHelper::englishToPersian((string) $key);

                $valueStr = $this->stringifyAnswerPayload($value);
                if ($valueStr !== '') {
                    $parts[] = $label . ': ' . $valueStr;
                } else {
                    $parts[] = $label;
                }
            }

            return implode(' | ', $parts);
        }

        return '';
    }

    private function generateExportFilename(string $evaluationTitle, int $evaluationId): string
    {
        $normalized = trim($evaluationTitle);
        if ($normalized === '') {
            $normalized = 'exam';
        }

        $normalized = preg_replace('/[\r\n\t]+/u', ' ', $normalized);
        $normalized = preg_replace('/\s+/u', '-', $normalized);
        $normalized = preg_replace('/[^A-Za-z0-9\-آ-یـ]+/u', '', $normalized);

        if ($normalized === '') {
            $normalized = 'exam';
        }

        if ($evaluationId > 0) {
            $normalized .= '-' . $evaluationId;
        }

        return $normalized . '.xlsx';
    }

    private function createExamExportXlsx(array $headers, array $rows): string
    {
        $worksheetXml = $this->buildXlsxWorksheetXml($headers, $rows);
        if ($worksheetXml === '') {
            return '';
        }

        $sheetName = 'Report';
        $timestamp = gmdate('Y-m-d\TH:i:s\Z');

        $workbookXml = $this->buildXlsxWorkbookXml($sheetName);
        $workbookRelsXml = $this->buildXlsxWorkbookRelsXml();
        $contentTypesXml = $this->buildXlsxContentTypesXml();
        $rootRelsXml = $this->buildXlsxRootRelsXml();
        $stylesXml = $this->buildXlsxStylesXml();
        $coreXml = $this->buildXlsxCorePropsXml($timestamp);
        $appXml = $this->buildXlsxAppPropsXml();

        $tempFile = tempnam(sys_get_temp_dir(), 'org-xlsx-');
        if ($tempFile === false) {
            return '';
        }

        $xlsxPath = $tempFile . '.xlsx';
        if (!@rename($tempFile, $xlsxPath)) {
            @unlink($tempFile);
            return '';
        }

        $package = new ZipArchive();
        if ($package->open($xlsxPath, ZipArchive::CREATE | ZipArchive::OVERWRITE) !== true) {
            @unlink($xlsxPath);
            return '';
        }

        $package->addFromString('[Content_Types].xml', $contentTypesXml);
        $package->addFromString('_rels/.rels', $rootRelsXml);
        $package->addFromString('docProps/core.xml', $coreXml);
        $package->addFromString('docProps/app.xml', $appXml);
        $package->addFromString('xl/workbook.xml', $workbookXml);
        $package->addFromString('xl/_rels/workbook.xml.rels', $workbookRelsXml);
        $package->addFromString('xl/styles.xml', $stylesXml);
        $package->addFromString('xl/worksheets/sheet1.xml', $worksheetXml);

        $package->close();

        $contents = @file_get_contents($xlsxPath);
        @unlink($xlsxPath);

        return $contents === false ? '' : $contents;
    }

    private function buildXlsxWorksheetXml(array $headers, array $rows): string
    {
        $allRows = array_merge([$headers], $rows);
        if (empty($allRows)) {
            $allRows = [[]];
        }

        $normalizedRows = [];
        $maxColumns = 0;
        foreach ($allRows as $row) {
            if (!is_array($row)) {
                $row = [$row];
            }

            $values = array_values($row);
            $normalizedRows[] = $values;
            $maxColumns = max($maxColumns, count($values));
        }

        if ($maxColumns === 0) {
            $maxColumns = 1;
        }

        $rowCount = count($normalizedRows);
        if ($rowCount === 0) {
            $rowCount = 1;
        }

        $lastColumnLetter = $this->convertColumnIndexToLetter($maxColumns - 1);
        $dimension = 'A1:' . $lastColumnLetter . $rowCount;

        $xml = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>';
        $xml .= '<worksheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">';
        $xml .= '<dimension ref="' . $dimension . '"/>';
        $xml .= '<sheetViews><sheetView workbookViewId="0"/></sheetViews>';
        $xml .= '<sheetData>';

        foreach ($normalizedRows as $rowIndex => $rowValues) {
            $excelRow = $rowIndex + 1;
            $xml .= '<row r="' . $excelRow . '">';

            for ($colIndex = 0; $colIndex < $maxColumns; $colIndex++) {
                $cellRef = $this->convertColumnIndexToLetter($colIndex) . $excelRow;
                $value = $rowValues[$colIndex] ?? '';
                if ($value === null) {
                    $value = '';
                }

                $value = (string) $value;

                if ($value === '') {
                    $xml .= '<c r="' . $cellRef . '"/>';
                    continue;
                }

                $escapedValue = $this->escapeXlsxValue($value);
                $xml .= '<c r="' . $cellRef . '" t="inlineStr"><is><t xml:space="preserve">' . $escapedValue . '</t></is></c>';
            }

            $xml .= '</row>';
        }

        $xml .= '</sheetData>';
        $xml .= '<pageMargins left="0.7" right="0.7" top="0.75" bottom="0.75" header="0.3" footer="0.3"/>';
        $xml .= '</worksheet>';

        return $xml;
    }

    private function buildXlsxWorkbookXml(string $sheetName): string
    {
        $sheetName = $this->sanitizeXlsxSheetName($sheetName);
        $escapedSheetName = htmlspecialchars($sheetName, ENT_QUOTES | ENT_XML1, 'UTF-8');

        return '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'
            . '<workbook xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships">'
            . '<sheets><sheet name="' . $escapedSheetName . '" sheetId="1" r:id="rId1"/></sheets>'
            . '</workbook>';
    }

    private function buildXlsxWorkbookRelsXml(): string
    {
        return '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'
            . '<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">'
            . '<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" Target="worksheets/sheet1.xml"/>'
            . '<Relationship Id="rId2" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles" Target="styles.xml"/>'
            . '</Relationships>';
    }

    private function buildXlsxContentTypesXml(): string
    {
        return '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'
            . '<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">'
            . '<Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/>'
            . '<Default Extension="xml" ContentType="application/xml"/>'
            . '<Override PartName="/xl/workbook.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml"/>'
            . '<Override PartName="/xl/worksheets/sheet1.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml"/>'
            . '<Override PartName="/xl/styles.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml"/>'
            . '<Override PartName="/docProps/core.xml" ContentType="application/vnd.openxmlformats-package.core-properties+xml"/>'
            . '<Override PartName="/docProps/app.xml" ContentType="application/vnd.openxmlformats-officedocument.extended-properties+xml"/>'
            . '</Types>';
    }

    private function buildXlsxRootRelsXml(): string
    {
        return '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'
            . '<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">'
            . '<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="xl/workbook.xml"/>'
            . '<Relationship Id="rId2" Type="http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties" Target="docProps/core.xml"/>'
            . '<Relationship Id="rId3" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties" Target="docProps/app.xml"/>'
            . '</Relationships>';
    }

    private function buildXlsxStylesXml(): string
    {
        return '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'
            . '<styleSheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">'
            . '<fonts count="1"><font><name val="Calibri"/><family val="2"/><sz val="11"/></font></fonts>'
            . '<fills count="1"><fill><patternFill patternType="none"/></fill></fills>'
            . '<borders count="1"><border><left/><right/><top/><bottom/><diagonal/></border></borders>'
            . '<cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs>'
            . '<cellXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0" xfId="0"/></cellXfs>'
            . '<cellStyles count="1"><cellStyle name="Normal" xfId="0" builtinId="0"/></cellStyles>'
            . '</styleSheet>';
    }

    private function buildXlsxCorePropsXml(string $timestamp): string
    {
        $creator = 'Organization Export';

        return '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'
            . '<cp:coreProperties xmlns:cp="http://schemas.openxmlformats.org/package/2006/metadata/core-properties" '
            . 'xmlns:dc="http://purl.org/dc/elements/1.1/" '
            . 'xmlns:dcterms="http://purl.org/dc/terms/" '
            . 'xmlns:dcmitype="http://purl.org/dc/dcmitype/" '
            . 'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">'
            . '<dc:creator>' . htmlspecialchars($creator, ENT_QUOTES | ENT_XML1, 'UTF-8') . '</dc:creator>'
            . '<cp:lastModifiedBy>' . htmlspecialchars($creator, ENT_QUOTES | ENT_XML1, 'UTF-8') . '</cp:lastModifiedBy>'
            . '<dcterms:created xsi:type="dcterms:W3CDTF">' . $timestamp . '</dcterms:created>'
            . '<dcterms:modified xsi:type="dcterms:W3CDTF">' . $timestamp . '</dcterms:modified>'
            . '</cp:coreProperties>';
    }

    private function buildXlsxAppPropsXml(): string
    {
        return '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'
            . '<Properties xmlns="http://schemas.openxmlformats.org/officeDocument/2006/extended-properties" '
            . 'xmlns:vt="http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes">'
            . '<Application>Organization Export</Application>'
            . '</Properties>';
    }

    private function sanitizeXlsxSheetName(string $name): string
    {
        $invalid = ['\\', '/', '?', '*', '[', ']', ':'];
        $sanitized = str_replace($invalid, ' ', $name);
        $sanitized = trim($sanitized);

        if ($sanitized === '') {
            $sanitized = 'Report';
        }

        if (function_exists('mb_substr')) {
            if (mb_strlen($sanitized, 'UTF-8') > 31) {
                $sanitized = mb_substr($sanitized, 0, 31, 'UTF-8');
            }
        } else {
            if (strlen($sanitized) > 31) {
                $sanitized = substr($sanitized, 0, 31);
            }
        }

        return $sanitized;
    }

    private function convertColumnIndexToLetter(int $index): string
    {
        $index = max(0, $index);
        $letters = '';
        $index++;

        while ($index > 0) {
            $remainder = ($index - 1) % 26;
            $letters = chr(65 + $remainder) . $letters;
            $index = (int) floor(($index - 1) / 26);
        }

        return $letters;
    }

    private function escapeXlsxValue(string $value): string
    {
        $value = str_replace(["\r\n", "\r"], "\n", $value);
        return htmlspecialchars($value, ENT_QUOTES | ENT_XML1, 'UTF-8');
    }

    public function organizationExcelReportDetail(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationUsersTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();

        $organization = $sessionData['organization'] ?? [];
        $user = $sessionData['user'] ?? [];

        $organizationId = (int) ($organization['id'] ?? 0);

        $evaluateeIdInput = UtilityHelper::persianToEnglish(trim((string) ($_GET['evaluatee_id'] ?? '0')));
        $evaluateeId = (int) $evaluateeIdInput;

        $redirectUrl = UtilityHelper::baseUrl('organizations/reports/excel');

        if ($evaluateeId <= 0 || $organizationId <= 0) {
            ResponseHelper::flashError('شناسه ارزیابی‌شونده نامعتبر است.');
            UtilityHelper::redirect($redirectUrl);
        }

        try {
            $evaluateeRow = DatabaseHelper::fetchOne(
                'SELECT id, first_name, last_name, username, evaluation_code
                 FROM organization_users
                 WHERE id = :id AND organization_id = :organization_id
                 LIMIT 1',
                [
                    'id' => $evaluateeId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $evaluateeRow = null;
        }

        if (!$evaluateeRow) {
            ResponseHelper::flashError('ارزیابی‌شونده یافت نشد یا به این سازمان تعلق ندارد.');
            UtilityHelper::redirect($redirectUrl);
        }

        $fullName = trim((string) ($evaluateeRow['first_name'] ?? '') . ' ' . (string) ($evaluateeRow['last_name'] ?? ''));
        if ($fullName === '') {
            $fullName = trim((string) ($evaluateeRow['username'] ?? ''));
        }
        if ($fullName === '') {
            $fullName = 'ارزیابی‌شونده #' . UtilityHelper::englishToPersian((string) $evaluateeId);
        }

        $title = 'جزئیات آزمون‌های تکمیل‌شده';

        $completedParticipations = [];
        try {
            $completedParticipations = DatabaseHelper::fetchAll(
                'SELECT p.id,
                        p.evaluation_id,
                        p.tool_id,
                        p.tool_name,
                        p.tool_code,
                        p.completed_at,
                        p.created_at,
                        e.title AS evaluation_title,
                        e.evaluation_date,
                        t.name AS tool_title
                 FROM organization_evaluation_exam_participations p
                 LEFT JOIN organization_evaluations e ON e.id = p.evaluation_id
                 LEFT JOIN organization_evaluation_tools t ON t.id = p.tool_id
                 WHERE p.organization_id = :organization_id
                   AND p.evaluatee_id = :evaluatee_id
                   AND p.is_completed = 1
                 ORDER BY (p.completed_at IS NULL) ASC, p.completed_at DESC, p.id DESC',
                [
                    'organization_id' => $organizationId,
                    'evaluatee_id' => $evaluateeId,
                ]
            );
        } catch (Exception $exception) {
            $completedParticipations = [];
        }

        $rows = [];
        $retakeExamUrl = UtilityHelper::baseUrl('organizations/reports/excel/detail/retake');
        foreach ($completedParticipations as $index => $participation) {
            $participationId = (int) ($participation['id'] ?? 0);
            $evaluationId = (int) ($participation['evaluation_id'] ?? 0);
            $toolId = (int) ($participation['tool_id'] ?? 0);

            $evaluationTitle = trim((string) ($participation['evaluation_title'] ?? ''));
            if ($evaluationTitle === '') {
                $evaluationTitle = 'ارزیابی شماره ' . UtilityHelper::englishToPersian((string) $evaluationId);
            }

            $toolTitle = trim((string) ($participation['tool_name'] ?? ''));
            if ($toolTitle === '') {
                $toolTitle = trim((string) ($participation['tool_title'] ?? ''));
            }
            if ($toolTitle === '') {
                $toolTitle = 'ابزار شماره ' . UtilityHelper::englishToPersian((string) $toolId);
            }

            $registeredAt = $participation['created_at'] ?? $participation['completed_at'] ?? null;
            $completedAt = $participation['completed_at'] ?? null;

            $reportLink = $evaluationId > 0
                ? UtilityHelper::baseUrl('organizations/active-evaluations/score?evaluation_id=' . urlencode((string) $evaluationId) . '&evaluatee_id=' . urlencode((string) $evaluateeId))
                : null;

            $operationLink = ($evaluationId > 0 && $toolId > 0)
                ? UtilityHelper::baseUrl(
                    'organizations/active-evaluations/tool-score?evaluation_id=' . urlencode((string) $evaluationId)
                    . '&tool_id=' . urlencode((string) $toolId)
                    . '&evaluatee_id=' . urlencode((string) $evaluateeId)
                )
                : null;

            $rows[] = [
                'participation_id' => $participationId,
                'index' => $index + 1,
                'evaluation_id' => $evaluationId,
                'tool_id' => $toolId,
                'evaluation_title' => $evaluationTitle,
                'tool_title' => $toolTitle,
                'registered_at' => $registeredAt,
                'completed_at' => $completedAt,
                'report_link' => $reportLink,
                'operation_link' => $operationLink,
                'retake_url' => $retakeExamUrl,
            ];
        }

        $evaluateeSummary = [
            'id' => $evaluateeId,
            'name' => $fullName,
            'evaluation_code' => trim((string) ($evaluateeRow['evaluation_code'] ?? '')), 
        ];

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/reports/excel-detail.php';
    }

    public function organizationExcelReportRetakeExam(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $organization = $sessionData['organization'] ?? [];
        $organizationId = (int) ($organization['id'] ?? 0);

        $participationIdInput = UtilityHelper::persianToEnglish(trim((string) ($_POST['participation_id'] ?? '0')));
        $evaluateeIdInput = UtilityHelper::persianToEnglish(trim((string) ($_POST['evaluatee_id'] ?? '0')));

        $participationId = (int) $participationIdInput;
        $evaluateeId = (int) $evaluateeIdInput;

        $baseRedirect = UtilityHelper::baseUrl('organizations/reports/excel');
        $detailRedirect = $evaluateeId > 0
            ? UtilityHelper::baseUrl('organizations/reports/excel/detail?evaluatee_id=' . urlencode((string) $evaluateeId))
            : $baseRedirect;

        if ($organizationId <= 0 || $participationId <= 0 || $evaluateeId <= 0) {
            ResponseHelper::flashError('درخواست نامعتبر است.');
            UtilityHelper::redirect($detailRedirect);
        }

        try {
            $participation = DatabaseHelper::fetchOne(
                'SELECT id, evaluation_id, tool_id, is_completed
                 FROM organization_evaluation_exam_participations
                 WHERE id = :id
                   AND organization_id = :organization_id
                   AND evaluatee_id = :evaluatee_id
                 LIMIT 1',
                [
                    'id' => $participationId,
                    'organization_id' => $organizationId,
                    'evaluatee_id' => $evaluateeId,
                ]
            );
        } catch (Exception $exception) {
            $participation = null;
        }

        if (!$participation) {
            ResponseHelper::flashError('آزمون موردنظر یافت نشد یا به این سازمان تعلق ندارد.');
            UtilityHelper::redirect($detailRedirect);
        }

        try {
            DatabaseHelper::beginTransaction();

            DatabaseHelper::delete(
                'organization_evaluation_exam_answers',
                'participation_id = :participation_id AND organization_id = :organization_id',
                [
                    'participation_id' => $participationId,
                    'organization_id' => $organizationId,
                ]
            );

            DatabaseHelper::delete(
                'organization_evaluation_exam_participations',
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $participationId,
                    'organization_id' => $organizationId,
                ]
            );

            DatabaseHelper::commit();

            LogHelper::info(
                'organization_exam_participation_retake_reset',
                [
                    'organization_id' => $organizationId,
                    'evaluatee_id' => $evaluateeId,
                    'participation_id' => $participationId,
                    'evaluation_id' => $participation['evaluation_id'] ?? null,
                    'tool_id' => $participation['tool_id'] ?? null,
                ],
                'organization_evaluation_exam_participations',
                $participationId
            );

            ResponseHelper::flashSuccess('آزمون حذف شد و امکان شرکت مجدد فراهم شد.');
        } catch (Exception $exception) {
            DatabaseHelper::rollback();

            LogHelper::error(
                'organization_exam_participation_retake_reset_failed',
                [
                    'organization_id' => $organizationId,
                    'evaluatee_id' => $evaluateeId,
                    'participation_id' => $participationId,
                    'error' => $exception->getMessage(),
                ],
                'organization_evaluation_exam_participations',
                $participationId
            );

            ResponseHelper::flashError('بازنشانی آزمون با خطا مواجه شد. لطفاً دوباره تلاش کنید.');
        }

        UtilityHelper::redirect($detailRedirect);
    }

    public function organizationExamParticipationSummary(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolQuestionsTableExists();
        $this->ensureOrganizationEvaluationToolAnswersTableExists();
        $this->ensureOrganizationEvaluationExamParticipationsTableExists();
        $this->ensureOrganizationEvaluationExamAnswersTableExists();
    $this->ensureOrganizationEvaluationsTableExists();
    $this->ensureOrganizationUsersTableExists();

        $organization = $sessionData['organization'] ?? [];
        $organizationId = (int) ($organization['id'] ?? 0);

        $participationIdInput = UtilityHelper::persianToEnglish(trim((string) ($_GET['participation_id'] ?? ($_GET['id'] ?? '0'))));
        $participationId = (int) $participationIdInput;

        if ($organizationId <= 0 || $participationId <= 0) {
            ResponseHelper::flashError('شناسه گزارش نامعتبر است.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/reports/excel'));
        }

        $participation = $this->fetchParticipationForSummary($organizationId, $participationId);
        if (!$participation) {
            ResponseHelper::flashError('رکورد آزمون یافت نشد یا به این سازمان تعلق ندارد.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/reports/excel'));
        }

        $evaluationId = (int) ($participation['evaluation_id'] ?? 0);
        $toolId = (int) ($participation['tool_id'] ?? 0);
        $evaluateeId = (int) ($participation['evaluatee_id'] ?? 0);

        $evaluationRow = null;
        if ($evaluationId > 0) {
            try {
                $evaluationRow = DatabaseHelper::fetchOne(
                    'SELECT id, title, evaluation_date FROM organization_evaluations WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                    [
                        'id' => $evaluationId,
                        'organization_id' => $organizationId,
                    ]
                );
            } catch (Exception $exception) {
                $evaluationRow = null;
            }
        }

        $toolRow = null;
        if ($toolId > 0) {
            try {
                $toolRow = DatabaseHelper::fetchOne(
                    'SELECT id, name, code, question_type, calculation_formula FROM organization_evaluation_tools WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                    [
                        'id' => $toolId,
                        'organization_id' => $organizationId,
                    ]
                );
            } catch (Exception $exception) {
                $toolRow = null;
            }
        }

        $questionMap = $this->loadToolQuestions($organizationId, $toolId);
        $answerOptions = $this->loadToolAnswerOptions($organizationId, $toolId);

        $answerRows = [];
        try {
            $answerRows = DatabaseHelper::fetchAll(
                'SELECT *
                 FROM organization_evaluation_exam_answers
                 WHERE participation_id = :participation_id
                   AND organization_id = :organization_id
                 ORDER BY question_id ASC, id ASC',
                [
                    'participation_id' => $participationId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $answerRows = [];
        }

        $summaryStats = $this->buildParticipationSummaryStats($answerRows, $questionMap, $answerOptions, $toolRow);
        $questionEntries = $this->buildParticipationQuestionEntries($answerRows, $questionMap, $answerOptions, $toolRow);

        $downloadUrl = null;
        if (!empty($participation) && !empty($participation['is_completed'])) {
            $downloadParams = [
                'evaluatee_id' => $evaluateeId,
                'participation_id' => $participationId,
            ];

            if ($evaluationId > 0) {
                $downloadParams['evaluation_id'] = $evaluationId;
            }

            $downloadUrl = UtilityHelper::baseUrl('organizations/reports/excel/download?' . http_build_query($downloadParams));
        }

        $title = 'جزئیات پاسخ‌های آزمون';

        $breadcrumbs = [
            [
                'label' => 'گزارش اکسل',
                'url' => UtilityHelper::baseUrl('organizations/reports/excel'),
            ],
            [
                'label' => 'آزمون‌های تکمیل‌شده',
                'url' => UtilityHelper::baseUrl('organizations/reports/excel/detail?evaluatee_id=' . urlencode((string) $evaluateeId)),
            ],
            [
                'label' => 'جزئیات پاسخ‌ها',
                'url' => null,
            ],
        ];

        $participationHeader = [
            'participation' => $participation,
            'evaluation' => $evaluationRow,
            'tool' => $toolRow,
        ];

        $evaluateeSummary = $this->loadEvaluateeSummary($organizationId, $evaluateeId);

        include __DIR__ . '/../Views/organizations/reports/exam-summary.php';
    }

    private function fetchParticipationForSummary(int $organizationId, int $participationId): ?array
    {
        try {
            $row = DatabaseHelper::fetchOne(
                'SELECT p.*, u.first_name, u.last_name, u.username
                 FROM organization_evaluation_exam_participations p
                 LEFT JOIN organization_users u ON u.id = p.evaluatee_id
                WHERE p.id = :id AND p.organization_id = :organization_id
                 LIMIT 1',
                [
                    'id' => $participationId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $row = null;
        }

        if (!$row) {
            return null;
        }

        $fullName = trim((string) ($row['first_name'] ?? '') . ' ' . (string) ($row['last_name'] ?? ''));
        if ($fullName === '') {
            $fullName = trim((string) ($row['username'] ?? ''));
        }

        $row['evaluatee_name'] = $fullName !== '' ? $fullName : 'ارزیابی‌شونده #' . UtilityHelper::englishToPersian((string) ($row['evaluatee_id'] ?? 0));

        return $row;
    }

    private function loadToolQuestions(int $organizationId, int $toolId): array
    {
        if ($toolId <= 0) {
            return [];
        }

        try {
            $rows = DatabaseHelper::fetchAll(
                'SELECT id, title, question_text, description, is_description_only
                 FROM organization_evaluation_tool_questions
                 WHERE organization_id = :organization_id AND evaluation_tool_id = :tool_id
                 ORDER BY display_order ASC, id ASC',
                [
                    'organization_id' => $organizationId,
                    'tool_id' => $toolId,
                ]
            );
        } catch (Exception $exception) {
            $rows = [];
        }

        $map = [];
        foreach ($rows as $row) {
            $questionId = (int) ($row['id'] ?? 0);
            if ($questionId <= 0) {
                continue;
            }

            $map[$questionId] = [
                'id' => $questionId,
                'title' => trim((string) ($row['title'] ?? '')),
                'text' => trim((string) ($row['question_text'] ?? '')),
                'description' => trim((string) ($row['description'] ?? '')),
                'is_description_only' => (int) ($row['is_description_only'] ?? 0) === 1,
            ];
        }

        return $map;
    }

    private function loadToolAnswerOptions(int $organizationId, int $toolId): array
    {
        if ($toolId <= 0) {
            return [];
        }

        try {
            $rows = DatabaseHelper::fetchAll(
                'SELECT id, question_id, answer_code, option_text, numeric_score, character_score, is_correct
                 FROM organization_evaluation_tool_answers
                 WHERE organization_id = :organization_id AND evaluation_tool_id = :tool_id
                 ORDER BY question_id ASC, display_order ASC, id ASC',
                [
                    'organization_id' => $organizationId,
                    'tool_id' => $toolId,
                ]
            );
        } catch (Exception $exception) {
            $rows = [];
        }

        $map = [];
        foreach ($rows as $row) {
            $questionId = (int) ($row['question_id'] ?? 0);
            if ($questionId <= 0) {
                continue;
            }

            if (!isset($map[$questionId])) {
                $map[$questionId] = [];
            }

            $answerId = (int) ($row['id'] ?? 0);
            $map[$questionId][$answerId] = [
                'id' => $answerId,
                'code' => trim((string) ($row['answer_code'] ?? '')),
                'text' => trim((string) ($row['option_text'] ?? '')),
                'numeric_score' => $row['numeric_score'] !== null ? (float) $row['numeric_score'] : null,
                'character_score' => trim((string) ($row['character_score'] ?? '')),
                'is_correct' => (int) ($row['is_correct'] ?? 0) === 1,
            ];
        }

        return $map;
    }

    private function buildParticipationSummaryStats(array $answerRows, array $questionMap, array $answerOptions, ?array $toolRow): array
    {
        $questionType = $toolRow['question_type'] ?? '';
        $calculationFormula = trim((string) ($toolRow['calculation_formula'] ?? ''));

        $totalQuestions = 0;
        $answeredCount = 0;
        $correctCount = 0;
        $incorrectCount = 0;
        $characterScores = [];

        foreach ($questionMap as $questionId => $question) {
            if (!empty($question['is_description_only'])) {
                continue;
            }
            $totalQuestions++;
        }

        $isPersonalityTool = stripos($questionType, 'mbti') !== false
            || stripos($questionType, 'disc') !== false
            || stripos($calculationFormula, 'mbti') !== false
            || stripos($calculationFormula, 'disc') !== false;

        foreach ($answerRows as $row) {
            $questionId = (int) ($row['question_id'] ?? 0);
            if ($questionId <= 0) {
                continue;
            }

            $question = $questionMap[$questionId] ?? null;
            if (!$question || !empty($question['is_description_only'])) {
                continue;
            }

            $answeredCount++;

            $answerId = (int) ($row['answer_id'] ?? 0);
            if ($answerId > 0) {
                $option = $answerOptions[$questionId][$answerId] ?? null;
                if ($option) {
                    if (!empty($option['is_correct'])) {
                        $correctCount++;
                    } elseif ($option['is_correct'] !== null) {
                        $incorrectCount++;
                    }

                    if ($option['character_score'] !== '') {
                        $characterScores[] = $option['character_score'];
                    }

                    if ($option['numeric_score'] !== null && !$isPersonalityTool) {
                        $characterScores[] = (string) $option['numeric_score'];
                    }
                }
            }

            if (!empty($row['disc_best_answer_code'])) {
                $characterScores[] = 'DISC-BEST:' . $row['disc_best_answer_code'];
            }
            if (!empty($row['disc_least_answer_code'])) {
                $characterScores[] = 'DISC-LEAST:' . $row['disc_least_answer_code'];
            }
        }

        $characterScoreSummary = $this->summarizeCharacterScores($characterScores, $questionType, $calculationFormula);

        return [
            'question_type' => $questionType,
            'calculation_formula' => $calculationFormula,
            'total_questions' => $totalQuestions,
            'answered' => $answeredCount,
            'correct' => $correctCount,
            'incorrect' => $incorrectCount,
            'character_summary' => $characterScoreSummary,
        ];
    }

    private function buildParticipationQuestionEntries(array $answerRows, array $questionMap, array $answerOptions, ?array $toolRow): array
    {
        $entries = [];
        $questionType = $toolRow['question_type'] ?? '';

        foreach ($answerRows as $row) {
            $questionId = (int) ($row['question_id'] ?? 0);
            if ($questionId <= 0) {
                continue;
            }

            $question = $questionMap[$questionId] ?? null;
            if (!$question) {
                continue;
            }

            if (!isset($entries[$questionId])) {
                $entries[$questionId] = [
                    'question_id' => $questionId,
                    'title' => $question['title'] ?? ('سوال #' . UtilityHelper::englishToPersian((string) $questionId)),
                    'text' => $question['text'] ?? '',
                    'description' => $question['description'] ?? '',
                    'is_description_only' => !empty($question['is_description_only']),
                    'answers' => [],
                ];
            }

            $entries[$questionId]['answers'][] = $this->buildAnswerEntry($row, $answerOptions[$questionId] ?? [], $questionType);
        }

        return array_values($entries);
    }

    private function buildAnswerEntry(array $row, array $options, string $questionType): array
    {
        $answerId = (int) ($row['answer_id'] ?? 0);
        $option = $answerId > 0 ? ($options[$answerId] ?? null) : null;

        $entry = [
            'answer_id' => $answerId,
            'answer_code' => $option['code'] ?? ($row['answer_code'] ?? null),
            'answer_text' => $option['text'] ?? ($row['answer_text'] ?? null),
            'numeric_score' => $option['numeric_score'] ?? null,
            'character_score' => $option['character_score'] ?? null,
            'is_correct' => $option['is_correct'] ?? null,
            'raw_payload' => $row['answer_payload'] ?? null,
        ];

        if ($questionType === 'disc' || !empty($row['disc_best_answer_code']) || !empty($row['disc_least_answer_code'])) {
            $entry['disc_best'] = [
                'code' => $row['disc_best_answer_code'] ?? null,
                'text' => $row['disc_best_answer_text'] ?? null,
            ];
            $entry['disc_least'] = [
                'code' => $row['disc_least_answer_code'] ?? null,
                'text' => $row['disc_least_answer_text'] ?? null,
            ];
        }

        return $entry;
    }

    private function summarizeCharacterScores(array $scores, string $questionType, string $calculationFormula): array
    {
        $scores = array_filter($scores, static function ($value) {
            return $value !== null && $value !== '';
        });

        if (empty($scores)) {
            return [];
        }

        $summary = [];

        if (stripos($calculationFormula, 'mbti') !== false || stripos($questionType, 'mbti') !== false) {
            $counts = [];

            foreach ($scores as $score) {
                $upper = strtoupper((string) $score);
                if ($upper === '') {
                    continue;
                }

                // Treat combined types (e.g., ISTJ) as individual letter contributions
                $letters = preg_split('//u', $upper, -1, PREG_SPLIT_NO_EMPTY);
                foreach ($letters as $letter) {
                    if (preg_match('/^[EISNTFJP]$/u', $letter)) {
                        $counts[$letter] = ($counts[$letter] ?? 0) + 1;
                    }
                }
            }

            if (!empty($counts)) {
                $mbtiType = $this->deriveMbtiTypeFromCounts($counts);

                if ($mbtiType !== '') {
                    $summary[] = [
                        'label' => 'تیپ شخصیتی MBTI',
                        'value' => $mbtiType,
                        'details' => $this->formatCountsForDisplay($counts),
                    ];
                }

                arsort($counts);
                $summary[] = [
                    'label' => 'تیپ شخصیتی غالب',
                    'value' => key($counts),
                    'details' => null,
                ];
            }
        } elseif (stripos($calculationFormula, 'disc') !== false || stripos($questionType, 'disc') !== false) {
            $discStats = ['BEST' => [], 'LEAST' => []];
            foreach ($scores as $score) {
                if (stripos($score, 'DISC-BEST:') === 0) {
                    $code = substr($score, strlen('DISC-BEST:'));
                    $discStats['BEST'][$code] = ($discStats['BEST'][$code] ?? 0) + 1;
                } elseif (stripos($score, 'DISC-LEAST:') === 0) {
                    $code = substr($score, strlen('DISC-LEAST:'));
                    $discStats['LEAST'][$code] = ($discStats['LEAST'][$code] ?? 0) + 1;
                }
            }

            foreach ($discStats as $label => $counts) {
                if (empty($counts)) {
                    continue;
                }

                arsort($counts);
                $summary[] = [
                    'label' => $label === 'BEST' ? 'سبک غالب (BEST)' : 'سبک ضعیف‌تر (LEAST)',
                    'value' => key($counts),
                    'details' => $this->formatCountsForDisplay($counts),
                ];
            }
        } else {
            $numericValues = [];
            foreach ($scores as $score) {
                if (is_numeric($score)) {
                    $numericValues[] = (float) $score;
                }
            }

            if (!empty($numericValues)) {
                $average = count($numericValues) > 0 ? array_sum($numericValues) / count($numericValues) : null;
                if ($average !== null) {
                    $summary[] = [
                        'label' => 'میانگین امتیاز',
                        'value' => UtilityHelper::englishToPersian(number_format($average, 2)),
                        'details' => null,
                    ];
                }

                $summary[] = [
                    'label' => 'حداکثر امتیاز ثبت‌شده',
                    'value' => UtilityHelper::englishToPersian((string) max($numericValues)),
                    'details' => null,
                ];
            }
        }

        return $summary;
    }

    private function formatCountsForDisplay(array $counts): string
    {
        $parts = [];
        foreach ($counts as $key => $count) {
            $parts[] = strtoupper((string) $key) . ' (' . UtilityHelper::englishToPersian((string) $count) . ')';
        }

        return implode('، ', $parts);
    }

    private function deriveMbtiTypeFromCounts(array $counts): string
    {
        $axes = [
            ['E', 'I'],
            ['S', 'N'],
            ['T', 'F'],
            ['J', 'P'],
        ];

        $result = [];

        foreach ($axes as [$positive, $negative]) {
            $positiveCount = $counts[$positive] ?? 0;
            $negativeCount = $counts[$negative] ?? 0;

            if ($positiveCount === 0 && $negativeCount === 0) {
                continue;
            }

            if ($positiveCount >= $negativeCount) {
                $result[] = $positive;
            } else {
                $result[] = $negative;
            }
        }

        return !empty($result) ? implode('', $result) : '';
    }

    private function loadEvaluateeSummary(int $organizationId, int $evaluateeId): array
    {
        if ($evaluateeId <= 0) {
            return [
                'id' => 0,
                'name' => 'ارزیابی‌شونده نامشخص',
                'evaluation_code' => '',
                'department' => '',
                'job_title' => '',
                'username' => '',
            ];
        }

        try {
            $row = DatabaseHelper::fetchOne(
                'SELECT id, first_name, last_name, username, national_code, department, job_title
                 FROM organization_users
                 WHERE id = :id AND organization_id = :organization_id
                 LIMIT 1',
                [
                    'id' => $evaluateeId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $row = null;
        }

        if (!$row) {
            return [
                'id' => 0,
                'name' => 'ارزیابی‌شونده #' . UtilityHelper::englishToPersian((string) $evaluateeId),
                'evaluation_code' => '',
                'department' => '',
                'job_title' => '',
                'username' => '',
            ];
        }

        $name = trim((string) ($row['first_name'] ?? '') . ' ' . (string) ($row['last_name'] ?? ''));
        if ($name === '') {
            $name = (string) ($row['username'] ?? '');
        }

        return [
            'id' => (int) ($row['id'] ?? 0),
            'name' => $name !== '' ? $name : 'ارزیابی‌شونده #' . UtilityHelper::englishToPersian((string) $evaluateeId),
            'evaluation_code' => trim((string) ($row['national_code'] ?? '')),
            'department' => trim((string) ($row['department'] ?? '')),
            'job_title' => trim((string) ($row['job_title'] ?? '')),
            'username' => trim((string) ($row['username'] ?? '')),
        ];
    }

    public function organizationActiveEvaluationToolScore(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationSchedulesTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationMatrixVisibilityTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolCompetenciesTableExists();
        $this->ensureOrganizationEvaluationToolScoresTableExists();
        $this->ensureOrganizationUsersTableExists();
        $this->ensureOrganizationCompetencyModelsTableExists();
        $this->ensureOrganizationCompetencyModelItemsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetencyExamplesTableExists();

        $title = 'ثبت امتیاز ابزار ارزیابی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

    $evaluationIdInput = UtilityHelper::persianToEnglish(trim((string) ($_GET['evaluation_id'] ?? ($_GET['evaluation'] ?? ($_GET['id'] ?? '')))));
    $toolIdInput = UtilityHelper::persianToEnglish(trim((string) ($_GET['tool_id'] ?? ($_GET['tool'] ?? ''))));
    $evaluateeIdInput = UtilityHelper::persianToEnglish(trim((string) ($_GET['evaluatee_id'] ?? ($_GET['evaluatee'] ?? ''))));
    $scorerIdInput = UtilityHelper::persianToEnglish(trim((string) ($_GET['scorer_id'] ?? ($_GET['scorer'] ?? ''))));

        $evaluationId = (int) $evaluationIdInput;
        $toolId = (int) $toolIdInput;
    $requestedEvaluateeId = $evaluateeIdInput !== '' ? (int) $evaluateeIdInput : null;
    $requestedScorerId = $scorerIdInput !== '' ? (int) $scorerIdInput : null;

        $redirectIndex = UtilityHelper::baseUrl('organizations/active-evaluations');
        $scoreRedirect = $evaluationId > 0
            ? UtilityHelper::baseUrl('organizations/active-evaluations/score?evaluation_id=' . urlencode((string) $evaluationId))
            : $redirectIndex;

        try {
            $context = $this->buildToolScoringContext($sessionData, $evaluationId, $toolId, $requestedEvaluateeId, $requestedScorerId);
        } catch (RuntimeException $exception) {
            ResponseHelper::flashError($exception->getMessage());
            UtilityHelper::redirect($scoreRedirect);
        }

        $selectedEvaluateeId = (int) ($context['selected_evaluatee_id'] ?? 0);
        $toolScoreBaseLink = (string) ($context['tool_score_base_link'] ?? UtilityHelper::baseUrl('organizations/active-evaluations/tool-score'));

        $scoreFormAction = UtilityHelper::baseUrl('organizations/active-evaluations/tool-score');

        $dateMeta = $this->formatEvaluationPersianDate($context['evaluation']['evaluation_date'] ?? null);
        $evaluationSummary = [
            'id' => $evaluationId,
            'title' => trim((string) ($context['evaluation']['title'] ?? 'بدون عنوان')),
            'date_display' => $dateMeta['display'],
            'general_model_label' => $context['general_model_label'] ?? '',
            'specific_model_label' => $context['specific_model_label'] ?? '',
        ];

        $toolMeta = [
            'id' => $toolId,
            'name' => $context['tool']['name'] ?? ('ابزار #' . UtilityHelper::englishToPersian((string) $toolId)),
            'question_type' => $context['tool']['question_type'] ?? '',
            'order' => (int) ($context['tool_order'] ?? 0),
            'evaluators' => $context['tool_evaluators'] ?? [],
        ];

        $scorerSelection = $context['scorer_selection'] ?? [
            'options' => [],
            'selected_id' => (int) ($context['scorer_id'] ?? 0),
            'can_select' => false,
            'acting_as_own' => false,
        ];

        $scorerId = (int) ($scorerSelection['selected_id'] ?? ($context['scorer_id'] ?? 0));
        $existingScoresRows = [];
        try {
            $existingScoresRows = DatabaseHelper::fetchAll(
                'SELECT competency_id, example_id, score_value, score_note
                 FROM organization_evaluation_tool_scores
                 WHERE organization_id = :organization_id
                   AND evaluation_id = :evaluation_id
                   AND tool_id = :tool_id
                   AND evaluatee_id = :evaluatee_id
                   AND scorer_id = :scorer_id',
                [
                    'organization_id' => $context['organization_id'],
                    'evaluation_id' => $evaluationId,
                    'tool_id' => $toolId,
                    'evaluatee_id' => $selectedEvaluateeId,
                    'scorer_id' => $scorerId,
                ]
            );
        } catch (Exception $exception) {
            $existingScoresRows = [];
        }

        $existingScores = [];
        foreach ($existingScoresRows as $row) {
            $competencyId = (int) ($row['competency_id'] ?? 0);
            if ($competencyId <= 0) {
                continue;
            }

            if (!isset($existingScores[$competencyId])) {
                $existingScores[$competencyId] = [
                    'overall' => null,
                    'examples' => [],
                ];
            }

            $exampleId = (int) ($row['example_id'] ?? 0);
            $entry = [
                'score' => (float) ($row['score_value'] ?? 0),
                'note' => trim((string) ($row['score_note'] ?? '')),
            ];

            if ($exampleId > 0) {
                $existingScores[$competencyId]['examples'][$exampleId] = $entry;
            } else {
                $existingScores[$competencyId]['overall'] = $entry;
            }
        }

        $oldInput = $_SESSION['old_input'] ?? [];
        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['old_input'], $_SESSION['validation_errors']);

        $successMessage = ResponseHelper::getFlash('success');
        $errorMessage = ResponseHelper::getFlash('error');

        $pageMessages = $context['page_messages'] ?? [];

        $selectedEvaluatee = $context['selected_evaluatee'] ?? null;
        $evaluateeTabs = $context['evaluatee_tabs'] ?? [];

        $competencies = $context['competencies'] ?? [];

        $roleFlags = $context['role_flags'] ?? [];
        $roleLabel = $this->resolveOrganizationRoleLabelFromUser($user);
        $displayName = trim((string) ($user['name'] ?? ($user['username'] ?? 'کاربر سازمان')));

        $visibilityMessage = 'ثبت امتیاز ابزار بر اساس سطح دسترسی شما تنظیم شده است.';
        if (!empty($roleFlags['is_system_admin'])) {
            $visibilityMessage = 'به‌عنوان مدیر سیستم می‌توانید امتیاز همه ابزارهای فعال را ثبت کنید.';
        } elseif (!empty($roleFlags['is_manager'])) {
            $visibilityMessage = 'به‌عنوان مدیر ارزیابی می‌توانید برای تمام ارزیابی‌شوندگان امتیاز ثبت کنید.';
        } elseif (!empty($roleFlags['is_evaluator'])) {
            $visibilityMessage = 'ابزارهایی که به شما برای این ارزیابی محول شده است در دسترس هستند.';
        } elseif (!empty($roleFlags['is_evaluatee'])) {
            $visibilityMessage = 'می‌توانید امتیاز خودارزیابی را برای ابزارهای فعال ثبت کنید.';
        }

        $visibilityContext = [
            'role_label' => $roleLabel,
            'user_display' => $displayName,
            'message' => $visibilityMessage,
            'can_view_all' => !empty($roleFlags['is_system_admin']) || !empty($roleFlags['is_manager']),
            'is_evaluator' => !empty($roleFlags['is_evaluator']),
            'is_evaluatee' => !empty($roleFlags['is_evaluatee']),
        ];

        $scorerLinkParam = $scorerId > 0 ? '&scorer_id=' . urlencode((string) $scorerId) : '';

        $backLink = $scoreRedirect . ($selectedEvaluateeId > 0 ? '&evaluatee_id=' . urlencode((string) $selectedEvaluateeId) : '');
        $toolScoreLink = $toolScoreBaseLink
            . ($selectedEvaluateeId > 0 ? '&evaluatee_id=' . urlencode((string) $selectedEvaluateeId) : '')
            . $scorerLinkParam;

        $toolScoreBaseLinkForView = $toolScoreBaseLink;
        $scorerSelection = $context['scorer_selection'] ?? [
            'options' => [],
            'selected_id' => $scorerId,
            'can_select' => false,
            'acting_as_own' => false,
        ];

        include __DIR__ . '/../Views/organizations/active-evaluations/tool-score.php';
    }

    public function storeOrganizationActiveEvaluationToolScore(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationSchedulesTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationMatrixVisibilityTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolCompetenciesTableExists();
        $this->ensureOrganizationEvaluationToolScoresTableExists();
        $this->ensureOrganizationUsersTableExists();
        $this->ensureOrganizationCompetencyModelsTableExists();
        $this->ensureOrganizationCompetencyModelItemsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetencyExamplesTableExists();

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/active-evaluations'));
        }

    $evaluationIdInput = UtilityHelper::persianToEnglish(trim((string) ($_POST['evaluation_id'] ?? ($_POST['evaluation'] ?? '0'))));
    $toolIdInput = UtilityHelper::persianToEnglish(trim((string) ($_POST['tool_id'] ?? ($_POST['tool'] ?? '0'))));
    $evaluateeIdInput = UtilityHelper::persianToEnglish(trim((string) ($_POST['evaluatee_id'] ?? ($_POST['evaluatee'] ?? '0'))));
    $scorerIdInput = UtilityHelper::persianToEnglish(trim((string) ($_POST['scorer_id'] ?? ($_POST['scorer'] ?? ''))));

        $evaluationId = (int) $evaluationIdInput;
        $toolId = (int) $toolIdInput;
    $requestedEvaluateeId = $evaluateeIdInput !== '' ? (int) $evaluateeIdInput : null;
    $requestedScorerId = $scorerIdInput !== '' ? (int) $scorerIdInput : null;

        $redirectIndex = UtilityHelper::baseUrl('organizations/active-evaluations');
        $scoreRedirect = $evaluationId > 0
            ? UtilityHelper::baseUrl('organizations/active-evaluations/score?evaluation_id=' . urlencode((string) $evaluationId))
            : $redirectIndex;

        try {
            $context = $this->buildToolScoringContext($sessionData, $evaluationId, $toolId, $requestedEvaluateeId, $requestedScorerId);
        } catch (RuntimeException $exception) {
            ResponseHelper::flashError($exception->getMessage());
            UtilityHelper::redirect($scoreRedirect);
        }

        $selectedEvaluateeId = (int) ($context['selected_evaluatee_id'] ?? 0);
        $selectedScorerId = (int) ($context['scorer_id'] ?? 0);
        $toolScoreBaseLink = (string) ($context['tool_score_base_link'] ?? UtilityHelper::baseUrl('organizations/active-evaluations/tool-score'));
        $backToForm = $toolScoreBaseLink
            . ($selectedEvaluateeId > 0 ? '&evaluatee_id=' . urlencode((string) $selectedEvaluateeId) : '')
            . ($selectedScorerId > 0 ? '&scorer_id=' . urlencode((string) $selectedScorerId) : '');

        $scoresInput = isset($_POST['scores']) && is_array($_POST['scores']) ? $_POST['scores'] : [];
        $notesInput = isset($_POST['notes']) && is_array($_POST['notes']) ? $_POST['notes'] : [];

        $competencies = $context['competencies'] ?? [];
        $validationErrors = [];
        $records = [];

        foreach ($competencies as $competency) {
            $competencyId = (int) ($competency['id'] ?? 0);
            if ($competencyId <= 0) {
                continue;
            }

            $range = $competency['scoring_range'] ?? ['min' => 0, 'max' => 5];
            $minScore = isset($range['min']) ? (float) $range['min'] : 0.0;
            $maxScore = isset($range['max']) ? (float) $range['max'] : 5.0;
            $scoringType = $competency['scoring_type'] ?? '0-5';

            $competencyScores = isset($scoresInput[$competencyId]) && is_array($scoresInput[$competencyId])
                ? $scoresInput[$competencyId]
                : [];
            $competencyNotes = isset($notesInput[$competencyId]) && is_array($notesInput[$competencyId])
                ? $notesInput[$competencyId]
                : [];

            if (array_key_exists('overall', $competencyScores)) {
                $rawValue = UtilityHelper::persianToEnglish(trim((string) $competencyScores['overall']));
                $rawValue = str_replace(',', '.', $rawValue);

                if ($rawValue !== '') {
                    if (!is_numeric($rawValue)) {
                        $validationErrors[$competencyId]['overall'] = 'امتیاز وارد شده معتبر نیست.';
                    } else {
                        $scoreValue = (float) $rawValue;
                        if ($scoreValue < $minScore || $scoreValue > $maxScore) {
                            $validationErrors[$competencyId]['overall'] = sprintf(
                                'امتیاز باید بین %s و %s باشد.',
                                UtilityHelper::englishToPersian((string) $minScore),
                                UtilityHelper::englishToPersian((string) $maxScore)
                            );
                        } else {
                            $note = trim((string) ($competencyNotes['overall'] ?? ''));
                            if (mb_strlen($note) > 2000) {
                                $validationErrors[$competencyId]['overall_note'] = 'توضیح نباید بیش از ۲۰۰۰ کاراکتر باشد.';
                            } else {
                                $records[] = [
                                    'competency_id' => $competencyId,
                                    'example_id' => 0,
                                    'score_value' => $scoreValue,
                                    'score_note' => $note,
                                    'scoring_type' => $scoringType,
                                ];
                            }
                        }
                    }
                }
            }

            if (isset($competencyScores['examples']) && is_array($competencyScores['examples'])) {
                foreach ($competencyScores['examples'] as $exampleKey => $value) {
                    $exampleId = (int) $exampleKey;
                    if ($exampleId <= 0) {
                        continue;
                    }

                    $rawValue = UtilityHelper::persianToEnglish(trim((string) $value));
                    $rawValue = str_replace(',', '.', $rawValue);

                    if ($rawValue === '') {
                        continue;
                    }

                    if (!is_numeric($rawValue)) {
                        $validationErrors[$competencyId]['examples'][$exampleId] = 'امتیاز وارد شده معتبر نیست.';
                        continue;
                    }

                    $scoreValue = (float) $rawValue;
                    if ($scoreValue < $minScore || $scoreValue > $maxScore) {
                        $validationErrors[$competencyId]['examples'][$exampleId] = sprintf(
                            'امتیاز باید بین %s و %s باشد.',
                            UtilityHelper::englishToPersian((string) $minScore),
                            UtilityHelper::englishToPersian((string) $maxScore)
                        );
                        continue;
                    }

                    $note = trim((string) ($competencyNotes['examples'][$exampleId] ?? ''));
                    if (mb_strlen($note) > 2000) {
                        $validationErrors[$competencyId]['examples_notes'][$exampleId] = 'توضیح نباید بیش از ۲۰۰۰ کاراکتر باشد.';
                        continue;
                    }

                    $records[] = [
                        'competency_id' => $competencyId,
                        'example_id' => $exampleId,
                        'score_value' => $scoreValue,
                        'score_note' => $note,
                        'scoring_type' => $scoringType,
                    ];
                }
            }
        }

        if (!empty($validationErrors)) {
            $_SESSION['old_input'] = $_POST;
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($backToForm);
        }

        $scorerId = (int) ($context['scorer_id'] ?? 0);

        try {
            DatabaseHelper::beginTransaction();

            DatabaseHelper::delete(
                'organization_evaluation_tool_scores',
                'organization_id = :organization_id AND evaluation_id = :evaluation_id AND tool_id = :tool_id AND evaluatee_id = :evaluatee_id AND scorer_id = :scorer_id',
                [
                    'organization_id' => $context['organization_id'],
                    'evaluation_id' => $evaluationId,
                    'tool_id' => $toolId,
                    'evaluatee_id' => $selectedEvaluateeId,
                    'scorer_id' => $scorerId,
                ]
            );

            foreach ($records as $record) {
                DatabaseHelper::insert('organization_evaluation_tool_scores', [
                    'organization_id' => $context['organization_id'],
                    'evaluation_id' => $evaluationId,
                    'tool_id' => $toolId,
                    'evaluatee_id' => $selectedEvaluateeId,
                    'scorer_id' => $scorerId,
                    'competency_id' => $record['competency_id'],
                    'example_id' => $record['example_id'] > 0 ? $record['example_id'] : null,
                    'score_value' => $record['score_value'],
                    'score_note' => $record['score_note'] !== '' ? $record['score_note'] : null,
                    'scoring_type' => $record['scoring_type'],
                ]);
            }

            DatabaseHelper::commit();
        } catch (Exception $exception) {
            DatabaseHelper::rollback();
            $_SESSION['old_input'] = $_POST;
            ResponseHelper::flashError('در ذخیره امتیازها مشکلی رخ داد. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($backToForm);
        }

        unset($_SESSION['old_input'], $_SESSION['validation_errors']);

        ResponseHelper::flashSuccess('امتیازهای ابزار با موفقیت ثبت شد.');
        UtilityHelper::redirect($backToForm);
    }

    public function organizationEvaluationCalendarMatrix(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationSchedulesTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationMatrixVisibilityTableExists();
        $this->ensureOrganizationUsersTableExists();

        $title = 'ماتریس تقویم ارزشیابی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $filterDateParam = UtilityHelper::persianToEnglish(trim((string) ($_GET['date'] ?? '')));
        $filterDateKey = null;
        $filterDateDisplay = null;

        if ($filterDateParam !== '' && preg_match('/^\d{4}-\d{2}-\d{2}$/', $filterDateParam)) {
            $filterDateKey = $filterDateParam;
            $filterDateDisplay = UtilityHelper::englishToPersian(str_replace('-', '/', $filterDateKey));
        }

    [$evaluationTools, $toolMap, $organizationUsers, $userMap] = $this->loadEvaluationFormReferenceData($organizationId);
    $evaluationModelSuggestions = $this->loadEvaluationModelSuggestions($organizationId);

        $successMessage = flash('success');
        $errorMessage = flash('error');

        $rawEvaluations = [];
        try {
            $rawEvaluations = DatabaseHelper::fetchAll(
                'SELECT * FROM organization_evaluations WHERE organization_id = :organization_id ORDER BY (evaluation_date IS NULL) ASC, evaluation_date DESC, id DESC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $rawEvaluations = [];
        }

        $evaluationIds = array_values(array_filter(array_map(static function (array $row): int {
            return (int) ($row['id'] ?? 0);
        }, $rawEvaluations), static function (int $id): bool {
            return $id > 0;
        }));

        $assignmentsByEvaluation = [];
        if (!empty($evaluationIds)) {
            $placeholders = implode(',', array_fill(0, count($evaluationIds), '?'));
            try {
                $assignments = DatabaseHelper::fetchAll(
                    "SELECT evaluation_id, tool_id, sort_order FROM organization_evaluation_tool_assignments WHERE evaluation_id IN ({$placeholders}) ORDER BY sort_order ASC, id ASC",
                    $evaluationIds
                );

                foreach ($assignments as $assignment) {
                    $evaluationId = (int) ($assignment['evaluation_id'] ?? 0);
                    if ($evaluationId <= 0) {
                        continue;
                    }

                    if (!isset($assignmentsByEvaluation[$evaluationId])) {
                        $assignmentsByEvaluation[$evaluationId] = [];
                    }

                    $toolId = (int) ($assignment['tool_id'] ?? 0);
                    $assignmentsByEvaluation[$evaluationId][] = [
                        'tool_id' => $toolId,
                        'tool_name' => $toolMap[$toolId] ?? ('ابزار #' . UtilityHelper::englishToPersian((string) $toolId)),
                        'sort_order' => (int) ($assignment['sort_order'] ?? 0),
                    ];
                }
            } catch (Exception $exception) {
                // Ignore assignment loading issues.
            }
        }

        $modelLabelCache = [];
        $evaluations = [];
        foreach ($rawEvaluations as $evaluationRow) {
            $evaluationId = (int) ($evaluationRow['id'] ?? 0);
            if ($evaluationId <= 0) {
                continue;
            }

            $dateMeta = $this->formatEvaluationPersianDate($evaluationRow['evaluation_date'] ?? null);
            $persianDateKey = null;
            if ($dateMeta['year'] !== null && $dateMeta['month'] !== null && $dateMeta['day'] !== null) {
                $persianDateKey = sprintf('%04d-%02d-%02d', (int) $dateMeta['year'], (int) $dateMeta['month'], (int) $dateMeta['day']);
            }

            if ($filterDateKey !== null && $persianDateKey !== $filterDateKey) {
                continue;
            }

            $generalModelRaw = trim((string) ($evaluationRow['general_model'] ?? ''));
            $specificModelRaw = trim((string) ($evaluationRow['specific_model'] ?? ''));

            $generalModelLabel = $this->resolveEvaluationModelLabelForDisplay($organizationId, $generalModelRaw, $modelLabelCache);
            $specificModelLabel = $this->resolveEvaluationModelLabelForDisplay($organizationId, $specificModelRaw, $modelLabelCache);

            $evaluations[] = [
                'id' => $evaluationId,
                'title' => $evaluationRow['title'] ?? 'بدون عنوان',
                'evaluation_date' => $evaluationRow['evaluation_date'] ?? null,
                'date_display' => $dateMeta['display'],
                'date_key' => $persianDateKey,
                'calendar_link' => $this->buildCalendarLink($dateMeta['year'], $dateMeta['month']),
                'general_model_raw' => $generalModelRaw,
                'general_model' => $generalModelLabel,
                'general_model_label' => $generalModelLabel,
                'specific_model_raw' => $specificModelRaw,
                'specific_model' => $specificModelLabel,
                'specific_model_label' => $specificModelLabel,
                'evaluators' => $this->decodeUserList($evaluationRow['evaluators_json'] ?? null, $userMap),
                'evaluatees' => $this->decodeUserList($evaluationRow['evaluatees_json'] ?? null, $userMap),
                'assignments' => $assignmentsByEvaluation[$evaluationId] ?? [],
                'schedule_id' => (int) ($evaluationRow['schedule_id'] ?? 0),
            ];
        }

        $filterMeta = [
            'date_key' => $filterDateKey,
            'display' => $filterDateDisplay,
        ];

        include __DIR__ . '/../Views/organizations/evaluations/calendar/matrix.php';
    }

    public function manageOrganizationEvaluationCalendarMatrix(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationSchedulesTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationUsersTableExists();

        $user = $sessionData['user'];
        $organization = $sessionData['organization'];
        $organizationId = (int) ($organization['id'] ?? 0);

        $redirectMatrix = UtilityHelper::baseUrl('organizations/evaluation-calendar/matrix');

        $evaluationId = isset($_GET['id']) ? (int) $_GET['id'] : 0;
        if ($evaluationId <= 0) {
            ResponseHelper::flashError('شناسه ارزیابی نامعتبر است.');
            UtilityHelper::redirect($redirectMatrix);
        }

    [$evaluationTools, $toolMap, $organizationUsers, $userMap] = $this->loadEvaluationFormReferenceData($organizationId);
    $evaluationModelSuggestions = $this->loadEvaluationModelSuggestions($organizationId);

        $toolDetailsMap = [];
        foreach ($evaluationTools as $tool) {
            $toolId = (int) ($tool['id'] ?? 0);
            if ($toolId <= 0) {
                continue;
            }

            $toolDetailsMap[$toolId] = $tool;
        }

        try {
            $evaluationRow = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_evaluations WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $evaluationId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $evaluationRow = null;
        }

        if (!$evaluationRow) {
            ResponseHelper::flashError('ارزیابی مورد نظر یافت نشد یا دسترسی به آن مجاز نیست.');
            UtilityHelper::redirect($redirectMatrix);
        }

        $modelLabelCache = [];
        $generalModelRaw = trim((string) ($evaluationRow['general_model'] ?? ''));
        $specificModelRaw = trim((string) ($evaluationRow['specific_model'] ?? ''));

        $generalModelLabel = $this->resolveEvaluationModelLabelForDisplay($organizationId, $generalModelRaw, $modelLabelCache);
        $specificModelLabel = $this->resolveEvaluationModelLabelForDisplay($organizationId, $specificModelRaw, $modelLabelCache);

        $assignments = [];
        try {
            $assignments = DatabaseHelper::fetchAll(
                'SELECT tool_id, sort_order FROM organization_evaluation_tool_assignments WHERE evaluation_id = :evaluation_id ORDER BY sort_order ASC, id ASC',
                ['evaluation_id' => $evaluationId]
            );
        } catch (Exception $exception) {
            $assignments = [];
        }

        $evaluators = $this->decodeUserList($evaluationRow['evaluators_json'] ?? null, $userMap);
        $evaluatees = $this->decodeUserList($evaluationRow['evaluatees_json'] ?? null, $userMap);

        $title = 'مدیریت ماتریس ارزیابی';

        $dateMeta = $this->formatEvaluationPersianDate($evaluationRow['evaluation_date'] ?? null);
        $evaluationMeta = [
            'id' => $evaluationId,
            'title' => trim((string) ($evaluationRow['title'] ?? 'بدون عنوان')),
            'date_display' => $dateMeta['display'],
            'general_model_raw' => $generalModelRaw,
            'general_model_label' => $generalModelLabel,
            'general_model' => $generalModelLabel,
            'specific_model_raw' => $specificModelRaw,
            'specific_model_label' => $specificModelLabel,
            'specific_model' => $specificModelLabel,
            'evaluators_count' => count($evaluators),
            'evaluatees_count' => count($evaluatees),
            'calendar_link' => $this->buildCalendarLink($dateMeta['year'], $dateMeta['month']),
        ];

        $matrixRows = $this->generateEvaluationMatrixRows($assignments, $evaluators, $toolDetailsMap);

        $visibilityMap = [];
        try {
            $visibilityRows = DatabaseHelper::fetchAll(
                'SELECT tool_id, evaluator_id, evaluatee_id, is_visible FROM organization_evaluation_matrix_visibility WHERE evaluation_id = :evaluation_id',
                ['evaluation_id' => $evaluationId]
            );

            foreach ($visibilityRows as $visibilityRow) {
                $toolId = (int) ($visibilityRow['tool_id'] ?? 0);
                $evaluatorKey = (string) ((int) ($visibilityRow['evaluator_id'] ?? 0));
                $evaluateeId = (int) ($visibilityRow['evaluatee_id'] ?? 0);
                if ($toolId <= 0 || $evaluateeId <= 0) {
                    continue;
                }

                if (!isset($visibilityMap[$toolId])) {
                    $visibilityMap[$toolId] = [];
                }

                if (!isset($visibilityMap[$toolId][$evaluatorKey])) {
                    $visibilityMap[$toolId][$evaluatorKey] = [];
                }

                $visibilityMap[$toolId][$evaluatorKey][$evaluateeId] = (int) ($visibilityRow['is_visible'] ?? 1) === 1;
            }
        } catch (Exception $exception) {
            $visibilityMap = [];
        }

        if (!empty($matrixRows)) {
            foreach ($matrixRows as &$row) {
                $toolId = (int) ($row['tool_id'] ?? 0);
                $evaluatorKey = (string) ($row['evaluator_key'] ?? '0');
                $rowVisibility = [];

                foreach ($evaluatees as $evaluatee) {
                    $evaluateeId = (int) ($evaluatee['id'] ?? 0);
                    if ($evaluateeId <= 0) {
                        continue;
                    }

                    $rowVisibility[$evaluateeId] = $visibilityMap[$toolId][$evaluatorKey][$evaluateeId] ?? true;
                }

                $row['visibility'] = $rowVisibility;
            }
            unset($row);
        }

        $formAction = UtilityHelper::baseUrl('organizations/evaluation-calendar/matrix/manage');
        $evaluateeHeaders = array_map(static function (array $evaluatee): string {
            return $evaluatee['label'] ?? '';
        }, $evaluatees);

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/evaluations/calendar/matrix-manage.php';
    }

    public function updateOrganizationEvaluationCalendarMatrix(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationSchedulesTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationMatrixVisibilityTableExists();
        $this->ensureOrganizationUsersTableExists();

        $organization = $sessionData['organization'];
        $organizationId = (int) ($organization['id'] ?? 0);

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/evaluation-calendar/matrix'));
        }

        $evaluationId = isset($_POST['evaluation_id']) ? (int) $_POST['evaluation_id'] : 0;
        if ($evaluationId <= 0) {
            ResponseHelper::flashError('شناسه ارزیابی نامعتبر است.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/evaluation-calendar/matrix'));
        }

        $redirectManage = UtilityHelper::baseUrl('organizations/evaluation-calendar/matrix/manage?id=' . urlencode((string) $evaluationId));

    [$evaluationTools, $toolMap, $organizationUsers, $userMap] = $this->loadEvaluationFormReferenceData($organizationId);
    $evaluationModelSuggestions = $this->loadEvaluationModelSuggestions($organizationId);

        $toolDetailsMap = [];
        foreach ($evaluationTools as $tool) {
            $toolId = (int) ($tool['id'] ?? 0);
            if ($toolId <= 0) {
                continue;
            }

            $toolDetailsMap[$toolId] = $tool;
        }

        try {
            $evaluationRow = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_evaluations WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $evaluationId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $evaluationRow = null;
        }

        if (!$evaluationRow) {
            ResponseHelper::flashError('ارزیابی مورد نظر یافت نشد یا دسترسی به آن مجاز نیست.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/evaluation-calendar/matrix'));
        }

        $assignments = [];
        try {
            $assignments = DatabaseHelper::fetchAll(
                'SELECT tool_id, sort_order FROM organization_evaluation_tool_assignments WHERE evaluation_id = :evaluation_id ORDER BY sort_order ASC, id ASC',
                ['evaluation_id' => $evaluationId]
            );
        } catch (Exception $exception) {
            $assignments = [];
        }

        $evaluators = $this->decodeUserList($evaluationRow['evaluators_json'] ?? null, $userMap);
        $evaluatees = $this->decodeUserList($evaluationRow['evaluatees_json'] ?? null, $userMap);
        $matrixRows = $this->generateEvaluationMatrixRows($assignments, $evaluators, $toolDetailsMap);

        $evaluateeIds = array_values(array_filter(array_map(static function (array $evaluatee): int {
            return (int) ($evaluatee['id'] ?? 0);
        }, $evaluatees), static function (int $id): bool {
            return $id > 0;
        }));

        $matrixInput = $_POST['matrix'] ?? [];
        $normalizedInput = [];
        if (is_array($matrixInput)) {
            foreach ($matrixInput as $toolIdKey => $evaluatorsInput) {
                $toolId = (int) $toolIdKey;
                if ($toolId <= 0 || !is_array($evaluatorsInput)) {
                    continue;
                }

                foreach ($evaluatorsInput as $evaluatorKey => $evaluateesInput) {
                    if (!is_array($evaluateesInput)) {
                        continue;
                    }

                    $normalizedEvaluatorKey = (string) ((int) $evaluatorKey);

                    foreach ($evaluateesInput as $evaluateeKey => $value) {
                        $evaluateeId = (int) $evaluateeKey;
                        if ($evaluateeId <= 0) {
                            continue;
                        }

                        if (!isset($normalizedInput[$toolId])) {
                            $normalizedInput[$toolId] = [];
                        }
                        if (!isset($normalizedInput[$toolId][$normalizedEvaluatorKey])) {
                            $normalizedInput[$toolId][$normalizedEvaluatorKey] = [];
                        }

                        $normalizedInput[$toolId][$normalizedEvaluatorKey][$evaluateeId] = 1;
                    }
                }
            }
        }

        $records = [];
        foreach ($matrixRows as $row) {
            $toolId = (int) ($row['tool_id'] ?? 0);
            if ($toolId <= 0) {
                continue;
            }

            $evaluatorKey = (string) ($row['evaluator_key'] ?? '0');
            $evaluatorId = (int) ($row['evaluator_id'] ?? 0);

            foreach ($evaluateeIds as $evaluateeId) {
                $isVisible = isset($normalizedInput[$toolId][$evaluatorKey][$evaluateeId]) ? 1 : 0;
                $records[] = [
                    'tool_id' => $toolId,
                    'evaluator_id' => $evaluatorId,
                    'evaluatee_id' => $evaluateeId,
                    'is_visible' => $isVisible,
                ];
            }
        }

        try {
            DatabaseHelper::beginTransaction();

            DatabaseHelper::delete(
                'organization_evaluation_matrix_visibility',
                'evaluation_id = :evaluation_id',
                ['evaluation_id' => $evaluationId]
            );

            foreach ($records as $record) {
                DatabaseHelper::insert('organization_evaluation_matrix_visibility', [
                    'evaluation_id' => $evaluationId,
                    'tool_id' => $record['tool_id'],
                    'evaluator_id' => $record['evaluator_id'],
                    'evaluatee_id' => $record['evaluatee_id'],
                    'is_visible' => $record['is_visible'],
                ]);
            }

            DatabaseHelper::commit();

            ResponseHelper::flashSuccess('ماتریس ارزیابی با موفقیت ذخیره شد.');
        } catch (Exception $exception) {
            DatabaseHelper::rollback();
            ResponseHelper::flashError('در ذخیره ماتریس مشکلی رخ داد. لطفاً دوباره تلاش کنید.');
        }

        UtilityHelper::redirect($redirectManage);
    }

    public function createOrganizationEvaluationCalendar(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationSchedulesTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationUsersTableExists();

        $title = 'افزودن ارزیابی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];
        $organizationId = (int) ($organization['id'] ?? 0);

    [$evaluationTools, $toolMap, $organizationUsers, $userMap] = $this->loadEvaluationFormReferenceData($organizationId);
    $evaluationModelSuggestions = $this->loadEvaluationModelSuggestions($organizationId);

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $formAction = UtilityHelper::baseUrl('organizations/evaluation-calendar');
        $isEdit = false;

        $evaluation = [
            'id' => null,
            'title' => '',
            'evaluation_date' => '',
            'general_model' => '',
            'specific_model' => '',
            'evaluators' => [],
            'evaluatees' => [],
            'tools' => [],
            'schedule_id' => null,
        ];

        $evaluationDateLocked = false;
        $lockedDateDisplay = null;
    $lockedEvaluationDateRaw = null;

        $prefillDateParam = UtilityHelper::persianToEnglish(trim((string) ($_GET['date'] ?? '')));
        $sessionLockedDate = $_SESSION['evaluation_date_lock_value'] ?? null;
        unset($_SESSION['evaluation_date_lock_value']);

        $lockedDateSource = null;
        if ($prefillDateParam !== '' && preg_match('/^\d{4}-\d{2}-\d{2}$/', $prefillDateParam)) {
            $lockedDateSource = $prefillDateParam;
        } elseif (is_string($sessionLockedDate) && trim($sessionLockedDate) !== '') {
            $sessionLockedDate = UtilityHelper::persianToEnglish(trim($sessionLockedDate));
            if (preg_match('/^\d{4}[-\/]\d{2}[-\/]\d{2}$/', $sessionLockedDate)) {
                $lockedDateSource = str_replace('/', '-', $sessionLockedDate);
            }
        }

        if ($lockedDateSource !== null) {
            $evaluation['evaluation_date'] = $lockedDateSource;
            $evaluationDateLocked = true;
            $lockedDateDisplay = UtilityHelper::englishToPersian(str_replace('-', '/', $lockedDateSource));
            $lockedEvaluationDateRaw = $lockedDateSource;
        }

        $modelLabelCache = [];

        $generalModelRaw = trim((string) ($evaluation['general_model'] ?? ''));
        $generalModelMeta = $this->resolveCompetencyModelByLabel($organizationId, $generalModelRaw);
        if ($generalModelMeta && ($generalModelMeta['id'] ?? 0) > 0) {
            $evaluation['general_model'] = (string) $generalModelMeta['id'];
            $evaluation['general_model_label'] = trim((string) ($generalModelMeta['title'] ?? $generalModelRaw));
        } else {
            $evaluation['general_model'] = $generalModelRaw;
            $evaluation['general_model_label'] = $this->resolveEvaluationModelLabelForDisplay($organizationId, $generalModelRaw, $modelLabelCache);
        }

        $specificModelRaw = trim((string) ($evaluation['specific_model'] ?? ''));
        $specificModelMeta = $this->resolveCompetencyModelByLabel($organizationId, $specificModelRaw);
        if ($specificModelMeta && ($specificModelMeta['id'] ?? 0) > 0) {
            $evaluation['specific_model'] = (string) $specificModelMeta['id'];
            $evaluation['specific_model_label'] = trim((string) ($specificModelMeta['title'] ?? $specificModelRaw));
        } else {
            $evaluation['specific_model'] = $specificModelRaw;
            $evaluation['specific_model_label'] = $this->resolveEvaluationModelLabelForDisplay($organizationId, $specificModelRaw, $modelLabelCache);
        }

        include __DIR__ . '/../Views/organizations/evaluations/calendar/form.php';
    }

    public function editOrganizationEvaluationCalendar(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationSchedulesTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationUsersTableExists();

        $title = 'ویرایش ارزیابی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];
        $organizationId = (int) ($organization['id'] ?? 0);

        $evaluationId = isset($_GET['id']) ? (int) $_GET['id'] : 0;
        $redirectMatrix = UtilityHelper::baseUrl('organizations/evaluation-calendar/matrix');

        if ($evaluationId <= 0) {
            ResponseHelper::flashError('شناسه ارزیابی نامعتبر است.');
            UtilityHelper::redirect($redirectMatrix);
        }

        [$evaluationTools, $toolMap, $organizationUsers, $userMap] = $this->loadEvaluationFormReferenceData($organizationId);
        $evaluationModelSuggestions = $this->loadEvaluationModelSuggestions($organizationId);

        try {
            $evaluationRow = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_evaluations WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $evaluationId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $evaluationRow = null;
        }

        if (!$evaluationRow) {
            ResponseHelper::flashError('ارزیابی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectMatrix);
        }

        $assignments = [];
        try {
            $assignments = DatabaseHelper::fetchAll(
                'SELECT tool_id, sort_order FROM organization_evaluation_tool_assignments WHERE evaluation_id = :evaluation_id ORDER BY sort_order ASC, id ASC',
                ['evaluation_id' => $evaluationId]
            );
        } catch (Exception $exception) {
            $assignments = [];
        }

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $evaluatorsDecoded = json_decode($evaluationRow['evaluators_json'] ?? '[]', true);
        if (!is_array($evaluatorsDecoded)) {
            $evaluatorsDecoded = [];
        }

        $evaluateesDecoded = json_decode($evaluationRow['evaluatees_json'] ?? '[]', true);
        if (!is_array($evaluateesDecoded)) {
            $evaluateesDecoded = [];
        }

        $toolsForForm = [];
        foreach ($assignments as $assignment) {
            $toolId = (int) ($assignment['tool_id'] ?? 0);
            if ($toolId <= 0) {
                continue;
            }

            $toolsForForm[$toolId] = [
                'order' => (string) ($assignment['sort_order'] ?? ''),
            ];
        }

        $evaluation = [
            'id' => $evaluationId,
            'title' => $evaluationRow['title'] ?? '',
            'evaluation_date' => $evaluationRow['evaluation_date'] ?? '',
            'general_model' => $evaluationRow['general_model'] ?? '',
            'specific_model' => $evaluationRow['specific_model'] ?? '',
            'evaluators' => array_values(array_filter(array_map(static function ($value): int {
                return (int) $value;
            }, $evaluatorsDecoded), static function (int $id): bool {
                return $id > 0;
            })),
            'evaluatees' => array_values(array_filter(array_map(static function ($value): int {
                return (int) $value;
            }, $evaluateesDecoded), static function (int $id): bool {
                return $id > 0;
            })),
            'tools' => $toolsForForm,
            'schedule_id' => (int) ($evaluationRow['schedule_id'] ?? 0),
        ];

    $formAction = UtilityHelper::baseUrl('organizations/evaluation-calendar/update');
    $isEdit = true;

        $modelLabelCache = [];

        $generalModelRaw = trim((string) ($evaluation['general_model'] ?? ''));
        $generalModelMeta = $this->resolveCompetencyModelByLabel($organizationId, $generalModelRaw);
        if ($generalModelMeta && ($generalModelMeta['id'] ?? 0) > 0) {
            $evaluation['general_model'] = (string) $generalModelMeta['id'];
            $evaluation['general_model_label'] = trim((string) ($generalModelMeta['title'] ?? $generalModelRaw));
        } else {
            $evaluation['general_model'] = $generalModelRaw;
            $evaluation['general_model_label'] = $this->resolveEvaluationModelLabelForDisplay($organizationId, $generalModelRaw, $modelLabelCache);
        }

        $specificModelRaw = trim((string) ($evaluation['specific_model'] ?? ''));
        $specificModelMeta = $this->resolveCompetencyModelByLabel($organizationId, $specificModelRaw);
        if ($specificModelMeta && ($specificModelMeta['id'] ?? 0) > 0) {
            $evaluation['specific_model'] = (string) $specificModelMeta['id'];
            $evaluation['specific_model_label'] = trim((string) ($specificModelMeta['title'] ?? $specificModelRaw));
        } else {
            $evaluation['specific_model'] = $specificModelRaw;
            $evaluation['specific_model_label'] = $this->resolveEvaluationModelLabelForDisplay($organizationId, $specificModelRaw, $modelLabelCache);
        }

    include __DIR__ . '/../Views/organizations/evaluations/calendar/form.php';
    }

    public function storeOrganizationEvaluationCalendar(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationSchedulesTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationUsersTableExists();

        $redirectCreate = UtilityHelper::baseUrl('organizations/evaluation-calendar/create');
        $redirectMatrix = UtilityHelper::baseUrl('organizations/evaluation-calendar/matrix');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        [$evaluationTools, $toolMap, $organizationUsers, $userMap] = $this->loadEvaluationFormReferenceData($organizationId);

        $generalModelSelect = trim((string) ($_POST['general_model'] ?? ''));
        $specificModelSelect = trim((string) ($_POST['specific_model'] ?? ''));
        $specificModelCustom = trim((string) ($_POST['specific_model_custom'] ?? ''));

        $modelLabelCache = [];

        $generalModelSelection = $this->resolveEvaluationModelValue($generalModelSelect, '');
        $generalModelMeta = $generalModelSelection !== ''
            ? $this->resolveCompetencyModelByLabel($organizationId, $generalModelSelection)
            : null;
        if ($generalModelMeta && ($generalModelMeta['id'] ?? 0) > 0) {
            $generalModelValue = (string) $generalModelMeta['id'];
            $generalModelLabel = trim((string) ($generalModelMeta['title'] ?? $generalModelSelection));
        } else {
            $generalModelValue = $generalModelSelection;
            $generalModelLabel = $generalModelSelection !== ''
                ? $this->resolveEvaluationModelLabelForDisplay($organizationId, $generalModelSelection, $modelLabelCache)
                : '';
        }

        $specificModelSelection = $this->resolveEvaluationModelValue($specificModelSelect, $specificModelCustom);
        $specificModelMeta = $specificModelSelection !== ''
            ? $this->resolveCompetencyModelByLabel($organizationId, $specificModelSelection)
            : null;
        if ($specificModelMeta && ($specificModelMeta['id'] ?? 0) > 0) {
            $specificModelValue = (string) $specificModelMeta['id'];
            $specificModelLabel = trim((string) ($specificModelMeta['title'] ?? $specificModelSelection));
        } else {
            $specificModelValue = $specificModelSelection;
            $specificModelLabel = $specificModelSelection !== ''
                ? $this->resolveEvaluationModelLabelForDisplay($organizationId, $specificModelSelection, $modelLabelCache)
                : '';
        }

        $input = [
            'title' => trim((string) ($_POST['title'] ?? '')),
            'evaluation_date' => trim((string) ($_POST['evaluation_date'] ?? '')),
            'general_model' => $generalModelValue,
            'general_model_label' => $generalModelLabel,
            'specific_model' => $specificModelValue,
            'specific_model_label' => $specificModelLabel,
            'specific_model_select' => $specificModelSelect,
            'specific_model_custom' => $specificModelCustom,
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($input['title'] === '') {
            $validationErrors['title'] = 'عنوان ارزیابی الزامی است.';
        }

        $normalizedDate = null;
        if ($input['evaluation_date'] !== '') {
            $normalizedDate = $this->normalizeEvaluationDateInput($input['evaluation_date']);
            if ($normalizedDate === null) {
                $validationErrors['evaluation_date'] = 'تاریخ وارد شده نامعتبر است.';
            }
        }

        $evaluators = $this->sanitizeUserIds($_POST['evaluators'] ?? [], $userMap);
        if (empty($evaluators)) {
            $validationErrors['evaluators'] = 'انتخاب ارزیاب‌ها الزامی است.';
        }

        $evaluatees = $this->sanitizeUserIds($_POST['evaluatees'] ?? [], $userMap);
        if (empty($evaluatees)) {
            $validationErrors['evaluatees'] = 'انتخاب ارزیاب‌شونده‌ها الزامی است.';
        }

        $_SESSION['old_input']['evaluators'] = $evaluators;
        $_SESSION['old_input']['evaluatees'] = $evaluatees;

        $toolsRaw = $_POST['tools'] ?? [];
        $_SESSION['old_input']['tools'] = $this->normalizeToolsOldInput($toolsRaw);

        [$toolOrders, $toolErrors] = $this->sanitizeToolOrders($toolsRaw, $toolMap);
        if (!empty($toolErrors)) {
            $validationErrors = array_merge($validationErrors, $toolErrors);
        }

        $lockedEvaluationDate = isset($_POST['locked_evaluation_date']) ? trim((string) $_POST['locked_evaluation_date']) : '';
        if ($lockedEvaluationDate !== '') {
            $_SESSION['evaluation_date_lock_value'] = $lockedEvaluationDate;
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            DatabaseHelper::beginTransaction();

            $scheduleId = null;
            if ($normalizedDate !== null) {
                $scheduleId = $this->upsertEvaluationSchedule($organizationId, $input['title'], $normalizedDate, $userIdentifier, null);
            }

            $evaluationId = (int) DatabaseHelper::insert('organization_evaluations', [
                'organization_id' => $organizationId,
                'title' => $input['title'],
                'evaluation_date' => $normalizedDate,
                'general_model' => $input['general_model'] !== '' ? $input['general_model'] : null,
                'specific_model' => $input['specific_model'] !== '' ? $input['specific_model'] : null,
                'evaluators_json' => json_encode(array_values($evaluators), JSON_UNESCAPED_UNICODE),
                'evaluatees_json' => json_encode(array_values($evaluatees), JSON_UNESCAPED_UNICODE),
                'schedule_id' => $scheduleId,
                'created_by' => $userIdentifier,
            ]);

            foreach ($toolOrders as $toolId => $sortOrder) {
                DatabaseHelper::insert('organization_evaluation_tool_assignments', [
                    'evaluation_id' => $evaluationId,
                    'tool_id' => $toolId,
                    'sort_order' => $sortOrder,
                ]);
            }

            DatabaseHelper::commit();

            unset($_SESSION['old_input'], $_SESSION['validation_errors'], $_SESSION['evaluation_date_lock_value']);

            ResponseHelper::flashSuccess('ارزیابی جدید با موفقیت ثبت شد.');
            UtilityHelper::redirect($redirectMatrix);
        } catch (Exception $exception) {
            DatabaseHelper::rollback();
            ResponseHelper::flashError('در ذخیره ارزیابی خطایی رخ داد.');
            UtilityHelper::redirect($redirectCreate);
        }
    }

    public function updateOrganizationEvaluationCalendar(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationSchedulesTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationUsersTableExists();

        $evaluationId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        $redirectMatrix = UtilityHelper::baseUrl('organizations/evaluation-calendar/matrix');
        $redirectEdit = UtilityHelper::baseUrl('organizations/evaluation-calendar/edit?id=' . $evaluationId);

        if ($evaluationId <= 0) {
            ResponseHelper::flashError('شناسه ارزیابی نامعتبر است.');
            UtilityHelper::redirect($redirectMatrix);
        }

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        [$evaluationTools, $toolMap, $organizationUsers, $userMap] = $this->loadEvaluationFormReferenceData($organizationId);

        try {
            $evaluationRow = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_evaluations WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $evaluationId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $evaluationRow = null;
        }

        if (!$evaluationRow) {
            ResponseHelper::flashError('ارزیابی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectMatrix);
        }

        $generalModelSelect = trim((string) ($_POST['general_model'] ?? ''));
        $specificModelSelect = trim((string) ($_POST['specific_model'] ?? ''));
        $specificModelCustom = trim((string) ($_POST['specific_model_custom'] ?? ''));

        $modelLabelCache = [];

        $generalModelSelection = $this->resolveEvaluationModelValue($generalModelSelect, '');
        $generalModelMeta = $generalModelSelection !== ''
            ? $this->resolveCompetencyModelByLabel($organizationId, $generalModelSelection)
            : null;
        if ($generalModelMeta && ($generalModelMeta['id'] ?? 0) > 0) {
            $generalModelValue = (string) $generalModelMeta['id'];
            $generalModelLabel = trim((string) ($generalModelMeta['title'] ?? $generalModelSelection));
        } else {
            $generalModelValue = $generalModelSelection;
            $generalModelLabel = $generalModelSelection !== ''
                ? $this->resolveEvaluationModelLabelForDisplay($organizationId, $generalModelSelection, $modelLabelCache)
                : '';
        }

        $specificModelSelection = $this->resolveEvaluationModelValue($specificModelSelect, $specificModelCustom);
        $specificModelMeta = $specificModelSelection !== ''
            ? $this->resolveCompetencyModelByLabel($organizationId, $specificModelSelection)
            : null;
        if ($specificModelMeta && ($specificModelMeta['id'] ?? 0) > 0) {
            $specificModelValue = (string) $specificModelMeta['id'];
            $specificModelLabel = trim((string) ($specificModelMeta['title'] ?? $specificModelSelection));
        } else {
            $specificModelValue = $specificModelSelection;
            $specificModelLabel = $specificModelSelection !== ''
                ? $this->resolveEvaluationModelLabelForDisplay($organizationId, $specificModelSelection, $modelLabelCache)
                : '';
        }

        $input = [
            'title' => trim((string) ($_POST['title'] ?? '')),
            'evaluation_date' => trim((string) ($_POST['evaluation_date'] ?? '')),
            'general_model' => $generalModelValue,
            'general_model_label' => $generalModelLabel,
            'specific_model' => $specificModelValue,
            'specific_model_label' => $specificModelLabel,
            'specific_model_select' => $specificModelSelect,
            'specific_model_custom' => $specificModelCustom,
        ];

        $_SESSION['old_input'] = $input;
        $_SESSION['old_input']['id'] = $evaluationId;

        $validationErrors = [];

        if ($input['title'] === '') {
            $validationErrors['title'] = 'عنوان ارزیابی الزامی است.';
        }

        $normalizedDate = null;
        if ($input['evaluation_date'] !== '') {
            $normalizedDate = $this->normalizeEvaluationDateInput($input['evaluation_date']);
            if ($normalizedDate === null) {
                $validationErrors['evaluation_date'] = 'تاریخ وارد شده نامعتبر است.';
            }
        }

        $evaluators = $this->sanitizeUserIds($_POST['evaluators'] ?? [], $userMap);
        if (empty($evaluators)) {
            $validationErrors['evaluators'] = 'انتخاب ارزیاب‌ها الزامی است.';
        }

        $evaluatees = $this->sanitizeUserIds($_POST['evaluatees'] ?? [], $userMap);
        if (empty($evaluatees)) {
            $validationErrors['evaluatees'] = 'انتخاب ارزیاب‌شونده‌ها الزامی است.';
        }

        $_SESSION['old_input']['evaluators'] = $evaluators;
        $_SESSION['old_input']['evaluatees'] = $evaluatees;

        $toolsRaw = $_POST['tools'] ?? [];
        $_SESSION['old_input']['tools'] = $this->normalizeToolsOldInput($toolsRaw);

        [$toolOrders, $toolErrors] = $this->sanitizeToolOrders($toolsRaw, $toolMap);
        if (!empty($toolErrors)) {
            $validationErrors = array_merge($validationErrors, $toolErrors);
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $existingScheduleId = (int) ($evaluationRow['schedule_id'] ?? 0);

        try {
            DatabaseHelper::beginTransaction();

            $scheduleId = $existingScheduleId;
            if ($normalizedDate !== null) {
                $scheduleId = $this->upsertEvaluationSchedule($organizationId, $input['title'], $normalizedDate, $userIdentifier, $existingScheduleId > 0 ? $existingScheduleId : null);
            } else {
                if ($existingScheduleId > 0) {
                    $this->maybeDeleteEvaluationSchedule($existingScheduleId, $organizationId);
                    $scheduleId = null;
                }
            }

            DatabaseHelper::update(
                'organization_evaluations',
                [
                    'title' => $input['title'],
                    'evaluation_date' => $normalizedDate,
                    'general_model' => $input['general_model'] !== '' ? $input['general_model'] : null,
                    'specific_model' => $input['specific_model'] !== '' ? $input['specific_model'] : null,
                    'evaluators_json' => json_encode(array_values($evaluators), JSON_UNESCAPED_UNICODE),
                    'evaluatees_json' => json_encode(array_values($evaluatees), JSON_UNESCAPED_UNICODE),
                    'schedule_id' => $scheduleId,
                    'updated_by' => $userIdentifier,
                ],
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $evaluationId,
                    'organization_id' => $organizationId,
                ]
            );

            DatabaseHelper::delete(
                'organization_evaluation_tool_assignments',
                'evaluation_id = :evaluation_id',
                ['evaluation_id' => $evaluationId]
            );

            foreach ($toolOrders as $toolId => $sortOrder) {
                DatabaseHelper::insert('organization_evaluation_tool_assignments', [
                    'evaluation_id' => $evaluationId,
                    'tool_id' => $toolId,
                    'sort_order' => $sortOrder,
                ]);
            }

            DatabaseHelper::commit();

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('ارزیابی با موفقیت به‌روزرسانی شد.');
            UtilityHelper::redirect($redirectMatrix);
        } catch (Exception $exception) {
            DatabaseHelper::rollback();
            ResponseHelper::flashError('در به‌روزرسانی ارزیابی خطایی رخ داد.');
            UtilityHelper::redirect($redirectEdit);
        }
    }

    public function deleteOrganizationEvaluationCalendar(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationSchedulesTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();

        $evaluationId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        $redirectMatrix = UtilityHelper::baseUrl('organizations/evaluation-calendar/matrix');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectMatrix);
        }

        if ($evaluationId <= 0) {
            ResponseHelper::flashError('شناسه ارزیابی نامعتبر است.');
            UtilityHelper::redirect($redirectMatrix);
        }

        $organization = $sessionData['organization'];
        $organizationId = (int) ($organization['id'] ?? 0);

        try {
            $evaluationRow = DatabaseHelper::fetchOne(
                'SELECT id, schedule_id FROM organization_evaluations WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $evaluationId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $evaluationRow = null;
        }

        if (!$evaluationRow) {
            ResponseHelper::flashError('ارزیابی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectMatrix);
        }

        $scheduleId = (int) ($evaluationRow['schedule_id'] ?? 0);

        try {
            DatabaseHelper::beginTransaction();

            DatabaseHelper::delete(
                'organization_evaluation_tool_assignments',
                'evaluation_id = :evaluation_id',
                ['evaluation_id' => $evaluationId]
            );

            DatabaseHelper::delete(
                'organization_evaluations',
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $evaluationId,
                    'organization_id' => $organizationId,
                ]
            );

            if ($scheduleId > 0) {
                $this->maybeDeleteEvaluationSchedule($scheduleId, $organizationId);
            }

            DatabaseHelper::commit();

            ResponseHelper::flashSuccess('ارزیابی با موفقیت حذف شد.');
        } catch (Exception $exception) {
            DatabaseHelper::rollback();
            ResponseHelper::flashError('در حذف ارزیابی مشکلی رخ داد.');
        }

        UtilityHelper::redirect($redirectMatrix);
    }

    public function organizationEvaluationTools(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationToolsTableExists();

        $title = 'ابزارهای ارزیابی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $evaluationTools = [];
        try {
            $evaluationTools = DatabaseHelper::fetchAll(
                'SELECT * FROM organization_evaluation_tools WHERE organization_id = :organization_id ORDER BY created_at DESC, id DESC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی ابزارهای ارزیابی مشکلی رخ داد.');
        }

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/evaluations/tools/index.php';
    }

    public function createOrganizationEvaluationTool(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationToolsTableExists();

        $title = 'ایجاد ابزار ارزیابی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/evaluations/tools/create.php';
    }

    public function storeOrganizationEvaluationTool(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationToolsTableExists();

        $redirectCreate = UtilityHelper::baseUrl('organizations/evaluation-tools/create');
        $redirectIndex = UtilityHelper::baseUrl('organizations/evaluation-tools');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $durationRaw = UtilityHelper::persianToEnglish(trim((string) ($_POST['duration_minutes'] ?? '')));

        $input = [
            'code' => trim((string) ($_POST['code'] ?? '')),
            'name' => trim((string) ($_POST['name'] ?? '')),
            'question_type' => trim((string) ($_POST['question_type'] ?? '')),
            'guide' => trim((string) ($_POST['guide'] ?? '')),
            'description' => trim((string) ($_POST['description'] ?? '')),
            'duration_minutes' => $durationRaw,
            'is_optional' => isset($_POST['is_optional']) ? '1' : '0',
            'calculation_formula' => trim((string) ($_POST['calculation_formula'] ?? '')),
            'is_exam' => isset($_POST['is_exam']) ? '1' : '0',
            'is_result_only' => isset($_POST['is_result_only']) ? '1' : '0',
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($input['code'] === '') {
            $validationErrors['code'] = 'کد الزامی است.';
        }

        if ($input['name'] === '') {
            $validationErrors['name'] = 'نام الزامی است.';
        }

        if ($input['question_type'] === '') {
            $validationErrors['question_type'] = 'نوع سوالات الزامی است.';
        }

        $durationValue = null;
        if ($durationRaw !== '') {
            if (!preg_match('/^\d+$/', $durationRaw)) {
                $validationErrors['duration_minutes'] = 'مدت زمان باید یک عدد معتبر باشد.';
            } else {
                $durationValue = (int) $durationRaw;
            }
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        if ($organizationId <= 0) {
            ResponseHelper::flashError('دسترسی به سازمان معتبر نیست.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $exists = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_evaluation_tools WHERE organization_id = :organization_id AND code = :code LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'code' => $input['code'],
                ]
            );

            if ($exists) {
                $_SESSION['validation_errors'] = ['code' => 'این کد قبلاً برای ابزار دیگری ثبت شده است.'];
                ResponseHelper::flashError('کد ابزار تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectCreate);
            }

            DatabaseHelper::insert(
                'organization_evaluation_tools',
                [
                    'organization_id' => $organizationId,
                    'code' => $input['code'],
                    'name' => $input['name'],
                    'question_type' => $input['question_type'],
                    'guide' => $input['guide'] !== '' ? $input['guide'] : null,
                    'description' => $input['description'] !== '' ? $input['description'] : null,
                    'duration_minutes' => $durationValue,
                    'is_optional' => (int) $input['is_optional'],
                    'calculation_formula' => $input['calculation_formula'] !== '' ? $input['calculation_formula'] : null,
                    'is_exam' => (int) $input['is_exam'],
                    'is_result_only' => (int) $input['is_result_only'],
                    'questions_count' => 0,
                    'created_by' => $userIdentifier,
                    'updated_by' => $userIdentifier,
                ]
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('ابزار ارزیابی با موفقیت ایجاد شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در ذخیره ابزار ارزیابی مشکلی رخ داد.');
            UtilityHelper::redirect($redirectCreate);
        }
    }

    public function editOrganizationEvaluationTool(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationToolsTableExists();

        $title = 'ویرایش ابزار ارزیابی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $toolId = isset($_GET['id']) ? (int) $_GET['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/evaluation-tools');

        if ($toolId <= 0) {
            ResponseHelper::flashError('شناسه ابزار معتبر نیست.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $evaluationTool = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_evaluation_tools WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $toolId,
                    'organization_id' => (int) ($organization['id'] ?? 0),
                ]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی اطلاعات ابزار ارزیابی مشکلی رخ داد.');
            UtilityHelper::redirect($redirectIndex);
        }

        if (!$evaluationTool) {
            ResponseHelper::flashError('ابزار ارزیابی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/evaluations/tools/edit.php';
    }

    public function updateOrganizationEvaluationTool(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationToolsTableExists();
    $this->ensureOrganizationEvaluationToolQuestionsTableExists();
    $this->ensureOrganizationEvaluationToolAnswersTableExists();

        $redirectIndex = UtilityHelper::baseUrl('organizations/evaluation-tools');

        $toolId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        $redirectEdit = UtilityHelper::baseUrl('organizations/evaluation-tools/edit?id=' . $toolId);

        if ($toolId <= 0) {
            ResponseHelper::flashError('شناسه ابزار معتبر نیست.');
            UtilityHelper::redirect($redirectIndex);
        }

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $durationRaw = UtilityHelper::persianToEnglish(trim((string) ($_POST['duration_minutes'] ?? '')));

        $input = [
            'code' => trim((string) ($_POST['code'] ?? '')),
            'name' => trim((string) ($_POST['name'] ?? '')),
            'question_type' => trim((string) ($_POST['question_type'] ?? '')),
            'guide' => trim((string) ($_POST['guide'] ?? '')),
            'description' => trim((string) ($_POST['description'] ?? '')),
            'duration_minutes' => $durationRaw,
            'is_optional' => isset($_POST['is_optional']) ? '1' : '0',
            'calculation_formula' => trim((string) ($_POST['calculation_formula'] ?? '')),
            'is_exam' => isset($_POST['is_exam']) ? '1' : '0',
            'is_result_only' => isset($_POST['is_result_only']) ? '1' : '0',
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($input['code'] === '') {
            $validationErrors['code'] = 'کد الزامی است.';
        }

        if ($input['name'] === '') {
            $validationErrors['name'] = 'نام الزامی است.';
        }

        if ($input['question_type'] === '') {
            $validationErrors['question_type'] = 'نوع سوالات الزامی است.';
        }

        $durationValue = null;
        if ($durationRaw !== '') {
            if (!preg_match('/^\d+$/', $durationRaw)) {
                $validationErrors['duration_minutes'] = 'مدت زمان باید یک عدد معتبر باشد.';
            } else {
                $durationValue = (int) $durationRaw;
            }
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        if ($organizationId <= 0) {
            ResponseHelper::flashError('امکان به‌روزرسانی ابزار ارزیابی وجود ندارد.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $existing = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_evaluation_tools WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $toolId,
                    'organization_id' => $organizationId,
                ]
            );

            if (!$existing) {
                ResponseHelper::flashError('ابزار ارزیابی مورد نظر یافت نشد.');
                UtilityHelper::redirect($redirectIndex);
            }

            $duplicate = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_evaluation_tools WHERE organization_id = :organization_id AND code = :code AND id <> :id LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'code' => $input['code'],
                    'id' => $toolId,
                ]
            );

            if ($duplicate) {
                $_SESSION['validation_errors'] = ['code' => 'این کد قبلاً برای ابزار دیگری ثبت شده است.'];
                ResponseHelper::flashError('کد ابزار تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectEdit);
            }

            DatabaseHelper::update(
                'organization_evaluation_tools',
                [
                    'code' => $input['code'],
                    'name' => $input['name'],
                    'question_type' => $input['question_type'],
                    'guide' => $input['guide'] !== '' ? $input['guide'] : null,
                    'description' => $input['description'] !== '' ? $input['description'] : null,
                    'duration_minutes' => $durationValue,
                    'is_optional' => (int) $input['is_optional'],
                    'calculation_formula' => $input['calculation_formula'] !== '' ? $input['calculation_formula'] : null,
                    'is_exam' => (int) $input['is_exam'],
                    'is_result_only' => (int) $input['is_result_only'],
                    'updated_by' => $userIdentifier,
                ],
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $toolId,
                    'organization_id' => $organizationId,
                ]
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('ابزار ارزیابی با موفقیت به‌روزرسانی شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در به‌روزرسانی ابزار ارزیابی مشکلی رخ داد.');
            UtilityHelper::redirect($redirectEdit);
        }
    }

    public function deleteOrganizationEvaluationTool(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationToolsTableExists();

        $redirectIndex = UtilityHelper::baseUrl('organizations/evaluation-tools');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $toolId = isset($_POST['id']) ? (int) $_POST['id'] : 0;

        if ($toolId <= 0) {
            ResponseHelper::flashError('شناسه ابزار معتبر نیست.');
            UtilityHelper::redirect($redirectIndex);
        }

        $organization = $sessionData['organization'];
        $organizationId = (int) ($organization['id'] ?? 0);

        if ($organizationId <= 0) {
            ResponseHelper::flashError('دسترسی به سازمان معتبر نیست.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            DatabaseHelper::delete(
                'organization_evaluation_tool_answers',
                'organization_id = :organization_id AND evaluation_tool_id = :tool_id',
                [
                    'organization_id' => $organizationId,
                    'tool_id' => $toolId,
                ]
            );

            DatabaseHelper::delete(
                'organization_evaluation_tool_questions',
                'organization_id = :organization_id AND evaluation_tool_id = :tool_id',
                [
                    'organization_id' => $organizationId,
                    'tool_id' => $toolId,
                ]
            );

            $deleted = DatabaseHelper::delete(
                'organization_evaluation_tools',
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $toolId,
                    'organization_id' => $organizationId,
                ]
            );

            if ($deleted) {
                ResponseHelper::flashSuccess('ابزار ارزیابی با موفقیت حذف شد.');
            } else {
                ResponseHelper::flashError('ابزار ارزیابی مورد نظر یافت نشد.');
            }
        } catch (Exception $exception) {
            ResponseHelper::flashError('در حذف ابزار ارزیابی مشکلی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function updateOrganizationRoleAccessMatrix(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationRolesTableExists();
        $this->ensureOrganizationRolePermissionsTableExists();

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? 'system');

        $redirectIndex = UtilityHelper::baseUrl('organizations/role-access-matrix');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        if ($organizationId <= 0) {
            ResponseHelper::flashError('دسترسی به سازمان معتبر نیست.');
            UtilityHelper::redirect($redirectIndex);
        }

        $roleDefinitions = $this->getDefaultMatrixRoleNames();
        $this->ensureOrganizationDefaultRoles($organizationId, $userIdentifier, $roleDefinitions);

        $permissionDefinitions = $this->getRoleAccessMatrixDefinitions();

        $roles = [];
        try {
            $roles = DatabaseHelper::fetchAll(
                'SELECT id, name FROM organization_roles WHERE organization_id = :organization_id ORDER BY id ASC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $roles = [];
        }

        $this->ensureRolePermissionRecords($organizationId, $roles, $permissionDefinitions);

        $submittedPermissions = $_POST['permissions'] ?? [];

        try {
            foreach ($permissionDefinitions as $definition) {
                $permissionKey = (string) ($definition['key'] ?? '');
                if ($permissionKey === '') {
                    continue;
                }

                foreach ($roles as $role) {
                    $roleId = (int) ($role['id'] ?? 0);
                    if ($roleId <= 0) {
                        continue;
                    }

                    $isAllowed = isset($submittedPermissions[$permissionKey][$roleId]) ? 1 : 0;

                    DatabaseHelper::query(
                        'INSERT INTO organization_role_permissions (organization_id, permission_key, organization_role_id, is_allowed)
                         VALUES (:organization_id, :permission_key, :role_id, :is_allowed)
                         ON DUPLICATE KEY UPDATE is_allowed = VALUES(is_allowed)',
                        [
                            'organization_id' => $organizationId,
                            'permission_key' => $permissionKey,
                            'role_id' => $roleId,
                            'is_allowed' => $isAllowed,
                        ]
                    );
                }
            }

            ResponseHelper::flashSuccess('ماتریس نقش دسترسی با موفقیت به‌روزرسانی شد.');
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام به‌روزرسانی ماتریس نقش خطایی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function organizationServiceLocations(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationServiceLocationsTableExists();

        $title = 'مدیریت محل خدمت';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationServiceLocations = [];
        try {
            $organizationServiceLocations = DatabaseHelper::fetchAll(
                'SELECT * FROM organization_service_locations WHERE organization_id = :organization_id ORDER BY created_at DESC',
                ['organization_id' => (int) ($organization['id'] ?? 0)]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی محل‌های خدمت مشکلی رخ داد.');
        }

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/locations/index.php';
    }

    public function createOrganizationServiceLocation(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationServiceLocationsTableExists();

        $title = 'ایجاد محل خدمت';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/locations/create.php';
    }

    public function storeOrganizationServiceLocation(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationServiceLocationsTableExists();

        $redirectCreate = UtilityHelper::baseUrl('organizations/service-locations/create');
        $redirectIndex = UtilityHelper::baseUrl('organizations/service-locations');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $input = [
            'code' => trim((string) ($_POST['code'] ?? '')),
            'name' => trim((string) ($_POST['name'] ?? '')),
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($input['code'] === '') {
            $validationErrors['code'] = 'کد الزامی است.';
        }

        if ($input['name'] === '') {
            $validationErrors['name'] = 'نام الزامی است.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان ثبت محل خدمت در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $exists = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_service_locations WHERE organization_id = :organization_id AND code = :code LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'code' => $input['code'],
                ]
            );

            if ($exists) {
                $_SESSION['validation_errors'] = ['code' => 'این کد قبلاً ثبت شده است.'];
                ResponseHelper::flashError('کد تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectCreate);
            }

            DatabaseHelper::insert('organization_service_locations', [
                'code' => $input['code'],
                'name' => $input['name'],
                'organization_id' => $organizationId,
                'user_id' => $userIdentifier,
            ]);

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('محل خدمت با موفقیت ایجاد شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام ذخیره محل خدمت خطایی رخ داد.');
            UtilityHelper::redirect($redirectCreate);
        }
    }

    public function editOrganizationServiceLocation(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationServiceLocationsTableExists();

        $title = 'ویرایش محل خدمت';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $locationId = isset($_GET['id']) ? (int) $_GET['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/service-locations');

        if ($locationId <= 0) {
            ResponseHelper::flashError('شناسه محل خدمت نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $organizationServiceLocation = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_service_locations WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $locationId,
                    'organization_id' => (int) ($organization['id'] ?? 0),
                ]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی اطلاعات محل خدمت مشکلی رخ داد.');
            UtilityHelper::redirect($redirectIndex);
        }

        if (!$organizationServiceLocation) {
            ResponseHelper::flashError('محل خدمت مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');
        $successMessage = flash('success');

        include __DIR__ . '/../Views/organizations/locations/edit.php';
    }

    public function updateOrganizationServiceLocation(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationServiceLocationsTableExists();

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        $locationId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/service-locations');
        $redirectEdit = UtilityHelper::baseUrl('organizations/service-locations/edit?id=' . $locationId);

        if ($locationId <= 0) {
            ResponseHelper::flashError('شناسه محل خدمت نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $input = [
            'code' => trim((string) ($_POST['code'] ?? '')),
            'name' => trim((string) ($_POST['name'] ?? '')),
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($input['code'] === '') {
            $validationErrors['code'] = 'کد الزامی است.';
        }

        if ($input['name'] === '') {
            $validationErrors['name'] = 'نام الزامی است.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان به‌روزرسانی محل خدمت در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $exists = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_service_locations WHERE organization_id = :organization_id AND code = :code AND id <> :id LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'code' => $input['code'],
                    'id' => $locationId,
                ]
            );

            if ($exists) {
                $_SESSION['validation_errors'] = ['code' => 'این کد قبلاً ثبت شده است.'];
                ResponseHelper::flashError('کد تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectEdit);
            }

            DatabaseHelper::update(
                'organization_service_locations',
                [
                    'code' => $input['code'],
                    'name' => $input['name'],
                    'user_id' => $userIdentifier,
                ],
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $locationId,
                    'organization_id' => $organizationId,
                ]
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('محل خدمت با موفقیت به‌روزرسانی شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در به‌روزرسانی محل خدمت خطایی رخ داد.');
            UtilityHelper::redirect($redirectEdit);
        }
    }

    public function deleteOrganizationServiceLocation(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationServiceLocationsTableExists();

        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $redirectIndex = UtilityHelper::baseUrl('organizations/service-locations');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $locationId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        if ($locationId <= 0) {
            ResponseHelper::flashError('شناسه محل خدمت نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $deleted = DatabaseHelper::delete(
                'organization_service_locations',
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $locationId,
                    'organization_id' => $organizationId,
                ]
            );

            if ($deleted > 0) {
                ResponseHelper::flashSuccess('محل خدمت با موفقیت حذف شد.');
            } else {
                ResponseHelper::flashError('محل خدمت مورد نظر یافت نشد یا قبلاً حذف شده است.');
            }
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام حذف محل خدمت خطایی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function organizationExecutiveUnits(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationExecutiveUnitsTableExists();

        $title = 'دستگاه‌های اجرایی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $successMessage = flash('success');
        $errorMessage = flash('error');

        $organizationExecutiveUnits = [];
        try {
            $organizationExecutiveUnits = DatabaseHelper::fetchAll(
                'SELECT id, name FROM organization_executive_units WHERE organization_id = :organization_id ORDER BY id DESC',
                ['organization_id' => (int) ($organization['id'] ?? 0)]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی دستگاه‌های اجرایی مشکلی رخ داد.');
        }

        include __DIR__ . '/../Views/organizations/executive-units/index.php';
    }

    public function createOrganizationExecutiveUnit(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationExecutiveUnitsTableExists();

        $title = 'ایجاد دستگاه اجرایی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/executive-units/create.php';
    }

    public function storeOrganizationExecutiveUnit(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationExecutiveUnitsTableExists();

        $redirectCreate = UtilityHelper::baseUrl('organizations/executive-units/create');
        $redirectIndex = UtilityHelper::baseUrl('organizations/executive-units');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $input = [
            'name' => trim((string) ($_POST['name'] ?? '')),
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($input['name'] === '') {
            $validationErrors['name'] = 'نام دستگاه اجرایی الزامی است.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان ثبت دستگاه اجرایی در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $exists = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_executive_units WHERE organization_id = :organization_id AND name = :name LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'name' => $input['name'],
                ]
            );

            if ($exists) {
                $_SESSION['validation_errors'] = ['name' => 'این نام قبلاً ثبت شده است.'];
                ResponseHelper::flashError('نام دستگاه اجرایی تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectCreate);
            }

            DatabaseHelper::insert('organization_executive_units', [
                'name' => $input['name'],
                'organization_id' => $organizationId,
                'user_id' => $userIdentifier,
            ]);

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('دستگاه اجرایی با موفقیت ایجاد شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام ذخیره دستگاه اجرایی خطایی رخ داد.');
            UtilityHelper::redirect($redirectCreate);
        }
    }

    public function editOrganizationExecutiveUnit(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationExecutiveUnitsTableExists();

        $title = 'ویرایش دستگاه اجرایی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $executiveUnitId = isset($_GET['id']) ? (int) $_GET['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/executive-units');

        if ($executiveUnitId <= 0) {
            ResponseHelper::flashError('شناسه دستگاه اجرایی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $executiveUnit = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_executive_units WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $executiveUnitId,
                    'organization_id' => (int) ($organization['id'] ?? 0),
                ]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی اطلاعات دستگاه اجرایی مشکلی رخ داد.');
            UtilityHelper::redirect($redirectIndex);
        }

        if (!$executiveUnit) {
            ResponseHelper::flashError('دستگاه اجرایی مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');
        $successMessage = flash('success');

        include __DIR__ . '/../Views/organizations/executive-units/edit.php';
    }

    public function updateOrganizationExecutiveUnit(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationExecutiveUnitsTableExists();

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        $executiveUnitId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/executive-units');
        $redirectEdit = UtilityHelper::baseUrl('organizations/executive-units/edit?id=' . $executiveUnitId);

        if ($executiveUnitId <= 0) {
            ResponseHelper::flashError('شناسه دستگاه اجرایی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $input = [
            'name' => trim((string) ($_POST['name'] ?? '')),
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($input['name'] === '') {
            $validationErrors['name'] = 'نام دستگاه اجرایی الزامی است.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان به‌روزرسانی دستگاه اجرایی در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $exists = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_executive_units WHERE organization_id = :organization_id AND name = :name AND id <> :id LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'name' => $input['name'],
                    'id' => $executiveUnitId,
                ]
            );

            if ($exists) {
                $_SESSION['validation_errors'] = ['name' => 'این نام قبلاً ثبت شده است.'];
                ResponseHelper::flashError('نام دستگاه اجرایی تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectEdit);
            }

            DatabaseHelper::update(
                'organization_executive_units',
                [
                    'name' => $input['name'],
                    'user_id' => $userIdentifier,
                ],
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $executiveUnitId,
                    'organization_id' => $organizationId,
                ]
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('دستگاه اجرایی با موفقیت به‌روزرسانی شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در به‌روزرسانی دستگاه اجرایی خطایی رخ داد.');
            UtilityHelper::redirect($redirectEdit);
        }
    }

    public function deleteOrganizationExecutiveUnit(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationExecutiveUnitsTableExists();

        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $redirectIndex = UtilityHelper::baseUrl('organizations/executive-units');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $executiveUnitId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        if ($executiveUnitId <= 0) {
            ResponseHelper::flashError('شناسه دستگاه اجرایی نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $deleted = DatabaseHelper::delete(
                'organization_executive_units',
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $executiveUnitId,
                    'organization_id' => $organizationId,
                ]
            );

            if ($deleted > 0) {
                ResponseHelper::flashSuccess('دستگاه اجرایی با موفقیت حذف شد.');
            } else {
                ResponseHelper::flashError('دستگاه اجرایی مورد نظر یافت نشد یا قبلاً حذف شده است.');
            }
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام حذف دستگاه اجرایی خطایی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function organizationUsers(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationUsersTableExists();

        $title = 'کاربران سازمان';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $successMessage = flash('success');
        $errorMessage = flash('error');

        $search = trim($_GET['search'] ?? '');

        $query = 'SELECT * FROM organization_users WHERE organization_id = :organization_id';
        $params = ['organization_id' => (int) ($organization['id'] ?? 0)];

        if ($search !== '') {
            $query .= ' AND (first_name LIKE :search OR last_name LIKE :search OR evaluation_code LIKE :search)';
            $params['search'] = '%' . $search . '%';
        }

        $query .= ' ORDER BY created_at DESC';

        $organizationUsers = [];
        $fallbackNotice = null;

        try {
            $organizationUsers = DatabaseHelper::fetchAll($query, $params);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی کاربران سازمان مشکلی رخ داد.');
        }

        if (empty($organizationUsers)) {
            $fallbackQuery = 'SELECT 
                    u.id,
                    u.organization_id,
                    u.id AS user_id,
                    u.first_name,
                    u.last_name,
                    NULL AS gender,
                    NULL AS evaluation_code,
                    0 AS is_system_admin,
                    0 AS is_manager,
                    0 AS is_evaluee,
                    0 AS is_evaluator,
                    CASE WHEN u.status = "active" THEN 1 ELSE 0 END AS is_active,
                    o.name AS organization_name,
                    NULL AS province,
                    NULL AS city,
                    u.created_at,
                    u.updated_at,
                    NULL AS username,
                    NULL AS password_hash,
                    u.national_code,
                    NULL AS personnel_code,
                    u.email,
                    NULL AS executive_devices,
                    NULL AS expiration_date,
                    NULL AS report_date,
                    0 AS show_report_date_instead_of_calendar,
                    NULL AS service_location,
                    NULL AS organization_post
                FROM users u
                LEFT JOIN organizations o ON o.id = u.organization_id
                WHERE u.organization_id = :organization_id';

            $fallbackParams = $params;

            if ($search !== '') {
                $fallbackQuery .= ' AND (u.first_name LIKE :search OR u.last_name LIKE :search OR u.email LIKE :search)';
            }

            $fallbackQuery .= ' ORDER BY u.created_at DESC';

            try {
                $fallbackUsers = DatabaseHelper::fetchAll($fallbackQuery, $fallbackParams);

                if (!empty($fallbackUsers)) {
                    $organizationUsers = $this->normalizeOrganizationUsersRecords($fallbackUsers);
                    $fallbackNotice = 'اطلاعات نمایش داده شده از جدول کاربران سیستم بازیابی شده است.';
                }
            } catch (Exception $exception) {
                // silent fallback failure
            }
        } else {
            $organizationUsers = $this->normalizeOrganizationUsersRecords($organizationUsers);
        }

        include __DIR__ . '/../Views/organizations/users/index.php';
    }

    public function createReportSetting(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureReportSettingsTableExists();

        $title = 'ایجاد گزارش جدید';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        include __DIR__ . '/../Views/organizations/report-settings/create.php';
    }

    public function editReportSetting(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureReportSettingsTableExists();

        $title = 'ویرایش گزارش';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $reportSettingId = isset($_GET['id']) ? (int) $_GET['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/report-settings');

        if ($reportSettingId <= 0) {
            ResponseHelper::flashError('شناسه گزارش نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $reportSetting = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_report_settings WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $reportSettingId,
                    'organization_id' => (int) ($organization['id'] ?? 0),
                ]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی اطلاعات گزارش مشکلی رخ داد.');
            UtilityHelper::redirect($redirectIndex);
        }

        if (!$reportSetting) {
            ResponseHelper::flashError('گزارش مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/report-settings/edit.php';
    }

    public function viewReportSetting(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureReportSettingsTableExists();

        $title = 'جزئیات گزارش';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $reportSettingId = isset($_GET['id']) ? (int) $_GET['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/report-settings');

        if ($reportSettingId <= 0) {
            ResponseHelper::flashError('شناسه گزارش نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $reportSetting = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_report_settings WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $reportSettingId,
                    'organization_id' => (int) ($organization['id'] ?? 0),
                ]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی اطلاعات گزارش مشکلی رخ داد.');
            UtilityHelper::redirect($redirectIndex);
        }

        if (!$reportSetting) {
            ResponseHelper::flashError('گزارش مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        include __DIR__ . '/../Views/organizations/report-settings/view.php';
    }

    public function createOrganizationUser(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationUsersTableExists();
        $this->ensureOrganizationExecutiveUnitsTableExists();
        $this->ensureOrganizationServiceLocationsTableExists();
        $this->ensureOrganizationPostsTableExists();

        $title = 'ایجاد کاربر سازمانی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $executiveUnits = [];
        $serviceLocations = [];
        $organizationPosts = [];

        if ($organizationId > 0) {
            try {
                $executiveUnits = DatabaseHelper::fetchAll(
                    'SELECT id, name FROM organization_executive_units WHERE organization_id = :organization_id ORDER BY name ASC',
                    ['organization_id' => $organizationId]
                );
            } catch (Exception $exception) {
                $executiveUnits = [];
            }

            try {
                $serviceLocations = DatabaseHelper::fetchAll(
                    'SELECT id, name, code FROM organization_service_locations WHERE organization_id = :organization_id ORDER BY name ASC',
                    ['organization_id' => $organizationId]
                );
            } catch (Exception $exception) {
                $serviceLocations = [];
            }

            try {
                $organizationPosts = DatabaseHelper::fetchAll(
                    'SELECT id, name FROM organization_posts WHERE organization_id = :organization_id ORDER BY name ASC',
                    ['organization_id' => $organizationId]
                );
            } catch (Exception $exception) {
                $organizationPosts = [];
            }
        }

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $iranProvinces = $this->getIranProvincesWithCities();

        include __DIR__ . '/../Views/organizations/users/create.php';
    }

    public function uploadOrganizationUsersForm(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationUsersTableExists();

        $title = 'بارگذاری کاربران از اکسل';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $importErrors = $_SESSION['import_errors'] ?? [];
        unset($_SESSION['import_errors']);

        $successMessage = flash('success');
        $errorMessage = flash('error');

        include __DIR__ . '/../Views/organizations/users/upload-excel.php';
    }

    public function downloadOrganizationUsersSample(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        $this->ensureOrganizationUsersTableExists();

        try {
            $tempFile = $this->generateOrganizationUsersSampleXlsx();
        } catch (Exception $exception) {
            ResponseHelper::flashError('امکان تولید فایل نمونه وجود ندارد.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/users/import'));
        }

        if (!is_file($tempFile)) {
            ResponseHelper::flashError('فایل نمونه در دسترس نیست.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/users/import'));
        }

        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment; filename="organization-users-sample.xlsx"');
        header('Content-Length: ' . filesize($tempFile));
        header('Pragma: no-cache');
        header('Expires: 0');

        readfile($tempFile);
        @unlink($tempFile);
        exit;
    }

    public function editOrganizationUser(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationUsersTableExists();

        $title = 'ویرایش کاربر سازمانی';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $userId = isset($_GET['id']) ? (int) $_GET['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/users');

        if ($userId <= 0) {
            ResponseHelper::flashError('شناسه کاربر نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $organizationUser = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_users WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $userId,
                    'organization_id' => (int) ($organization['id'] ?? 0),
                ]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی اطلاعات کاربر مشکلی رخ داد.');
            UtilityHelper::redirect($redirectIndex);
        }

        if (!$organizationUser) {
            ResponseHelper::flashError('کاربر مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $validationErrors = $_SESSION['validation_errors'] ?? [];
        unset($_SESSION['validation_errors']);

        $organizationId = (int) ($organization['id'] ?? 0);

        $this->ensureOrganizationExecutiveUnitsTableExists();
        $this->ensureOrganizationServiceLocationsTableExists();
        $this->ensureOrganizationPostsTableExists();

        $executiveUnits = [];
        $serviceLocations = [];
        $organizationPosts = [];

        if ($organizationId > 0) {
            try {
                $executiveUnits = DatabaseHelper::fetchAll(
                    'SELECT id, name FROM organization_executive_units WHERE organization_id = :organization_id ORDER BY name ASC',
                    ['organization_id' => $organizationId]
                );
            } catch (Exception $exception) {
                $executiveUnits = [];
            }

            try {
                $serviceLocations = DatabaseHelper::fetchAll(
                    'SELECT id, name, code FROM organization_service_locations WHERE organization_id = :organization_id ORDER BY name ASC',
                    ['organization_id' => $organizationId]
                );
            } catch (Exception $exception) {
                $serviceLocations = [];
            }

            try {
                $organizationPosts = DatabaseHelper::fetchAll(
                    'SELECT id, name FROM organization_posts WHERE organization_id = :organization_id ORDER BY name ASC',
                    ['organization_id' => $organizationId]
                );
            } catch (Exception $exception) {
                $organizationPosts = [];
            }
        }

        $iranProvinces = $this->getIranProvincesWithCities();

        include __DIR__ . '/../Views/organizations/users/edit.php';
    }

    public function storeReportSetting(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureReportSettingsTableExists();

        $redirectCreate = UtilityHelper::baseUrl('organizations/report-settings/create');
        $redirectIndex = UtilityHelper::baseUrl('organizations/report-settings');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $input = [
            'identifier' => trim((string)($_POST['identifier'] ?? '')),
            'code' => trim((string)($_POST['code'] ?? '')),
            'name' => trim((string)($_POST['name'] ?? '')),
            'report_name' => trim((string)($_POST['report_name'] ?? '')),
            'report_for' => trim((string)($_POST['report_for'] ?? '')),
            'level' => trim((string)($_POST['level'] ?? '')),
            'report_intro' => trim((string)($_POST['report_intro'] ?? '')),
            'evaluation_process' => trim((string)($_POST['evaluation_process'] ?? '')),
            'model_definition' => trim((string)($_POST['model_definition'] ?? '')),
            'competency_intro' => trim((string)($_POST['competency_intro'] ?? '')),
            'regulation' => trim((string)($_POST['regulation'] ?? '')),
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($input['identifier'] === '') {
            $validationErrors['identifier'] = 'شناسه الزامی است.';
        }
        if ($input['code'] === '') {
            $validationErrors['code'] = 'کد الزامی است.';
        }
        if ($input['name'] === '') {
            $validationErrors['name'] = 'نام الزامی است.';
        }
        if ($input['report_name'] === '') {
            $validationErrors['report_name'] = 'نام گزارش الزامی است.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان ثبت گزارش در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $exists = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_report_settings WHERE organization_id = :organization_id AND identifier = :identifier LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'identifier' => $input['identifier'],
                ]
            );

            if ($exists) {
                $_SESSION['validation_errors'] = ['identifier' => 'این شناسه قبلاً ثبت شده است.'];
                ResponseHelper::flashError('شناسه تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectCreate);
            }

            DatabaseHelper::insert('organization_report_settings', [
                'identifier' => $input['identifier'],
                'code' => $input['code'],
                'name' => $input['name'],
                'report_name' => $input['report_name'],
                'report_for' => $input['report_for'] !== '' ? $input['report_for'] : null,
                'level' => $input['level'] !== '' ? $input['level'] : null,
                'report_intro' => $input['report_intro'] !== '' ? $input['report_intro'] : null,
                'evaluation_process' => $input['evaluation_process'] !== '' ? $input['evaluation_process'] : null,
                'model_definition' => $input['model_definition'] !== '' ? $input['model_definition'] : null,
                'competency_intro' => $input['competency_intro'] !== '' ? $input['competency_intro'] : null,
                'regulation' => $input['regulation'] !== '' ? $input['regulation'] : null,
                'organization_id' => $organizationId,
                'user_id' => $userIdentifier,
            ]);

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('گزارش جدید با موفقیت ثبت شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام ذخیره گزارش خطایی رخ داد.');
            UtilityHelper::redirect($redirectCreate);
        }
    }

    public function updateReportSetting(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureReportSettingsTableExists();

        $organization = $sessionData['organization'];
        $user = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $userIdentifier = (string) ($user['id'] ?? '');

        $reportSettingId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        $redirectIndex = UtilityHelper::baseUrl('organizations/report-settings');
        $redirectEdit = UtilityHelper::baseUrl('organizations/report-settings/edit?id=' . $reportSettingId);

        if ($reportSettingId <= 0) {
            ResponseHelper::flashError('شناسه گزارش نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $input = [
            'identifier' => trim((string) ($_POST['identifier'] ?? '')),
            'code' => trim((string) ($_POST['code'] ?? '')),
            'name' => trim((string) ($_POST['name'] ?? '')),
            'report_name' => trim((string) ($_POST['report_name'] ?? '')),
            'report_for' => trim((string) ($_POST['report_for'] ?? '')),
            'level' => trim((string) ($_POST['level'] ?? '')),
            'report_intro' => trim((string) ($_POST['report_intro'] ?? '')),
            'evaluation_process' => trim((string) ($_POST['evaluation_process'] ?? '')),
            'model_definition' => trim((string) ($_POST['model_definition'] ?? '')),
            'competency_intro' => trim((string) ($_POST['competency_intro'] ?? '')),
            'regulation' => trim((string) ($_POST['regulation'] ?? '')),
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($input['identifier'] === '') {
            $validationErrors['identifier'] = 'شناسه الزامی است.';
        }
        if ($input['code'] === '') {
            $validationErrors['code'] = 'کد الزامی است.';
        }
        if ($input['name'] === '') {
            $validationErrors['name'] = 'نام الزامی است.';
        }
        if ($input['report_name'] === '') {
            $validationErrors['report_name'] = 'نام گزارش الزامی است.';
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        if ($organizationId <= 0 || $userIdentifier === '') {
            ResponseHelper::flashError('امکان به‌روزرسانی گزارش در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectEdit);
        }

        try {
            $reportSetting = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_report_settings WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $reportSettingId,
                    'organization_id' => $organizationId,
                ]
            );

            if (!$reportSetting) {
                ResponseHelper::flashError('گزارش مورد نظر یافت نشد.');
                UtilityHelper::redirect($redirectIndex);
            }

            $duplicate = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_report_settings WHERE organization_id = :organization_id AND identifier = :identifier AND id <> :id LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'identifier' => $input['identifier'],
                    'id' => $reportSettingId,
                ]
            );

            if ($duplicate) {
                $_SESSION['validation_errors'] = ['identifier' => 'این شناسه قبلاً ثبت شده است.'];
                ResponseHelper::flashError('شناسه تکراری است. لطفاً مقدار دیگری وارد کنید.');
                UtilityHelper::redirect($redirectEdit);
            }

            $updateData = [
                'identifier' => $input['identifier'],
                'code' => $input['code'],
                'name' => $input['name'],
                'report_name' => $input['report_name'],
                'report_for' => $input['report_for'] !== '' ? $input['report_for'] : null,
                'level' => $input['level'] !== '' ? $input['level'] : null,
                'report_intro' => $input['report_intro'] !== '' ? $input['report_intro'] : null,
                'evaluation_process' => $input['evaluation_process'] !== '' ? $input['evaluation_process'] : null,
                'model_definition' => $input['model_definition'] !== '' ? $input['model_definition'] : null,
                'competency_intro' => $input['competency_intro'] !== '' ? $input['competency_intro'] : null,
                'regulation' => $input['regulation'] !== '' ? $input['regulation'] : null,
                'user_id' => $userIdentifier,
            ];

            DatabaseHelper::update(
                'organization_report_settings',
                $updateData,
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $reportSettingId,
                    'organization_id' => $organizationId,
                ]
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('گزارش با موفقیت به‌روزرسانی شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام به‌روزرسانی گزارش خطایی رخ داد.');
            UtilityHelper::redirect($redirectEdit);
        }
    }

    public function deleteReportSetting(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureReportSettingsTableExists();

        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $redirectIndex = UtilityHelper::baseUrl('organizations/report-settings');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $reportSettingId = isset($_POST['id']) ? (int) $_POST['id'] : 0;
        if ($reportSettingId <= 0) {
            ResponseHelper::flashError('شناسه گزارش نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $deleted = DatabaseHelper::delete(
                'organization_report_settings',
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $reportSettingId,
                    'organization_id' => $organizationId,
                ]
            );

            if ($deleted > 0) {
                ResponseHelper::flashSuccess('گزارش با موفقیت حذف شد.');
            } else {
                ResponseHelper::flashError('گزارش مورد نظر یافت نشد یا قبلاً حذف شده است.');
            }
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام حذف گزارش خطایی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    public function storeOrganizationUser(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationUsersTableExists();

        $redirectCreate = UtilityHelper::baseUrl('organizations/users/create');
        $redirectIndex = UtilityHelper::baseUrl('organizations/users');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $input = [
            'username' => trim((string)($_POST['username'] ?? '')),
            'password' => (string)($_POST['password'] ?? ''),
            'first_name' => trim((string)($_POST['first_name'] ?? '')),
            'last_name' => trim((string)($_POST['last_name'] ?? '')),
            'gender' => trim((string)($_POST['gender'] ?? '')),
            'evaluation_code' => trim((string)($_POST['evaluation_code'] ?? '')),
            'national_code' => trim((string)($_POST['national_code'] ?? '')),
            'personnel_code' => trim((string)($_POST['personnel_code'] ?? '')),
            'email' => trim((string)($_POST['email'] ?? '')),
            'executive_devices' => trim((string)($_POST['executive_devices'] ?? '')),
            'province' => trim((string)($_POST['province'] ?? '')),
            'city' => trim((string)($_POST['city'] ?? '')),
            'expiration_date' => trim((string)($_POST['expiration_date'] ?? '')),
            'report_date' => trim((string)($_POST['report_date'] ?? '')),
            'service_location' => trim((string)($_POST['service_location'] ?? '')),
            'organization_post' => trim((string)($_POST['organization_post'] ?? '')),
            'show_report_date_instead_of_calendar' => isset($_POST['show_report_date_instead_of_calendar']) ? '1' : '0',
            'is_system_admin' => isset($_POST['is_system_admin']) ? '1' : '0',
            'is_manager' => isset($_POST['is_manager']) ? '1' : '0',
            'is_evaluee' => isset($_POST['is_evaluee']) ? '1' : '0',
            'is_evaluator' => isset($_POST['is_evaluator']) ? '1' : '0',
            'is_active' => isset($_POST['is_active']) ? '1' : '0',
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($input['username'] === '') {
            $validationErrors['username'] = 'نام کاربری الزامی است.';
        }

        if ($input['password'] === '') {
            $validationErrors['password'] = 'رمز عبور الزامی است.';
        } elseif (mb_strlen($input['password']) < 6) {
            $validationErrors['password'] = 'رمز عبور باید حداقل ۶ کاراکتر باشد.';
        }

        if ($input['first_name'] === '') {
            $validationErrors['first_name'] = 'نام الزامی است.';
        }

        if ($input['last_name'] === '') {
            $validationErrors['last_name'] = 'نام خانوادگی الزامی است.';
        }

        if ($input['evaluation_code'] === '') {
            $validationErrors['evaluation_code'] = 'کد ارزیابی الزامی است.';
        }

        if ($input['national_code'] === '') {
            $validationErrors['national_code'] = 'کد ملی الزامی است.';
        }

        if ($input['personnel_code'] === '') {
            $validationErrors['personnel_code'] = 'کد پرسنلی الزامی است.';
        }

        if ($input['email'] !== '' && !filter_var($input['email'], FILTER_VALIDATE_EMAIL)) {
            $validationErrors['email'] = 'فرمت ایمیل صحیح نیست.';
        }

        if ($input['gender'] !== '') {
            $allowedGenders = ['male', 'female', 'other'];
            $lowerGender = mb_strtolower($input['gender']);
            if (!in_array($lowerGender, $allowedGenders, true)) {
                $validationErrors['gender'] = 'جنسیت انتخاب شده معتبر نیست.';
            } else {
                $input['gender'] = $lowerGender;
            }
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectCreate);
        }

        $organization = $sessionData['organization'];
        $currentUser = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $currentUserId = (string) ($currentUser['id'] ?? '');

        if ($organizationId <= 0 || $currentUserId === '') {
            ResponseHelper::flashError('امکان ثبت کاربر در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectCreate);
        }

        try {
            $existingUser = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_users WHERE organization_id = :organization_id AND username = :username LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'username' => $input['username'],
                ]
            );

            if ($existingUser) {
                $_SESSION['validation_errors'] = ['username' => 'نام کاربری وارد شده تکراری است.'];
                ResponseHelper::flashError('این نام کاربری قبلاً ثبت شده است.');
                UtilityHelper::redirect($redirectCreate);
            }

            $passwordHash = password_hash($input['password'], PASSWORD_BCRYPT);

            DatabaseHelper::insert('organization_users', [
                'organization_id' => $organizationId,
                'user_id' => $currentUserId,
                'organization_name' => $organization['name'] ?? null,
                'username' => $input['username'],
                'password_hash' => $passwordHash,
                'first_name' => $input['first_name'],
                'last_name' => $input['last_name'],
                'gender' => $input['gender'] !== '' ? $input['gender'] : null,
                'evaluation_code' => $input['evaluation_code'],
                'national_code' => $input['national_code'],
                'personnel_code' => $input['personnel_code'],
                'email' => $input['email'] !== '' ? $input['email'] : null,
                'executive_devices' => $input['executive_devices'] !== '' ? $input['executive_devices'] : null,
                'province' => $input['province'] !== '' ? $input['province'] : null,
                'city' => $input['city'] !== '' ? $input['city'] : null,
                'expiration_date' => $input['expiration_date'] !== '' ? $input['expiration_date'] : null,
                'report_date' => $input['report_date'] !== '' ? $input['report_date'] : null,
                'service_location' => $input['service_location'] !== '' ? $input['service_location'] : null,
                'organization_post' => $input['organization_post'] !== '' ? $input['organization_post'] : null,
                'show_report_date_instead_of_calendar' => (int) $input['show_report_date_instead_of_calendar'],
                'is_system_admin' => (int) $input['is_system_admin'],
                'is_manager' => (int) $input['is_manager'],
                'is_evaluee' => (int) $input['is_evaluee'],
                'is_evaluator' => (int) $input['is_evaluator'],
                'is_active' => (int) $input['is_active'],
            ]);

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('کاربر جدید با موفقیت ثبت شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام ذخیره اطلاعات خطایی رخ داد.');
            UtilityHelper::redirect($redirectCreate);
        }
    }

    public function importOrganizationUsers(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationUsersTableExists();

        $redirectForm = UtilityHelper::baseUrl('organizations/users/import');
        $redirectIndex = UtilityHelper::baseUrl('organizations/users');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است.');
            UtilityHelper::redirect($redirectForm);
        }

        if (!isset($_FILES['users_file']) || !is_uploaded_file($_FILES['users_file']['tmp_name'])) {
            ResponseHelper::flashError('لطفاً فایل اکسل کاربران را انتخاب کنید.');
            UtilityHelper::redirect($redirectForm);
        }

        $uploadedFile = $_FILES['users_file'];

        if ((int) ($uploadedFile['error'] ?? UPLOAD_ERR_OK) !== UPLOAD_ERR_OK) {
            ResponseHelper::flashError('بارگذاری فایل با خطا مواجه شد. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectForm);
        }

        $extension = strtolower(pathinfo((string) ($uploadedFile['name'] ?? ''), PATHINFO_EXTENSION));
        if ($extension !== 'xlsx') {
            ResponseHelper::flashError('فرمت فایل معتبر نیست. تنها فایل‌های xlsx پشتیبانی می‌شوند.');
            UtilityHelper::redirect($redirectForm);
        }

        if (!class_exists('ZipArchive')) {
            ResponseHelper::flashError('ماژول ZipArchive در سرور فعال نیست.');
            UtilityHelper::redirect($redirectForm);
        }

        $organization = $sessionData['organization'];
        $currentUser = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $currentUserId = (string) ($currentUser['id'] ?? '');

        if ($organizationId <= 0 || $currentUserId === '') {
            ResponseHelper::flashError('امکان ثبت کاربران در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectForm);
        }

        $importErrors = [];
        $importedCount = 0;
        $skippedCount = 0;

        try {
            $rows = $this->parseOrganizationUsersXlsx($uploadedFile['tmp_name']);
        } catch (Exception $exception) {
            ResponseHelper::flashError($exception->getMessage());
            UtilityHelper::redirect($redirectForm);
        }

        if (empty($rows)) {
            ResponseHelper::flashError('فایل ارسالی فاقد داده قابل پردازش است.');
            UtilityHelper::redirect($redirectForm);
        }

        $existingUsers = DatabaseHelper::fetchAll(
            'SELECT username FROM organization_users WHERE organization_id = :organization_id',
            ['organization_id' => $organizationId]
        );

        $existingUsernames = [];
        foreach ($existingUsers as $existingUser) {
            $existingUsernames[mb_strtolower((string) ($existingUser['username'] ?? ''))] = true;
        }

        $processedUsernames = [];

        foreach ($rows as $index => $row) {
            $rowNumber = $index + 2; // considering header row

            $username = trim($row['username'] ?? '');
            $password = (string) ($row['password'] ?? '');
            $firstName = trim($row['first_name'] ?? '');
            $lastName = trim($row['last_name'] ?? '');
            $evaluationCode = trim($row['evaluation_code'] ?? '');
            $nationalCode = trim($row['national_code'] ?? '');
            $province = trim($row['province'] ?? '');
            $city = trim($row['city'] ?? '');
            $personnelCode = trim($row['personnel_code'] ?? '');

            $requiredFields = [
                'نام کاربری' => $username,
                'رمز' => $password,
                'نام' => $firstName,
                'نام خانوادگی' => $lastName,
                'کد ارزیابی' => $evaluationCode,
                'کد ملی' => $nationalCode,
                'کد پرسنلی' => $personnelCode,
            ];

            $missingFields = [];
            foreach ($requiredFields as $label => $value) {
                if ($value === '') {
                    $missingFields[] = $label;
                }
            }

            if (!empty($missingFields)) {
                $importErrors[] = sprintf('سطر %s: مقدار فیلدهای %s الزامی است.', $rowNumber, implode('، ', $missingFields));
                $skippedCount++;
                continue;
            }

            $normalizedUsername = mb_strtolower($username);

            if (isset($existingUsernames[$normalizedUsername]) || isset($processedUsernames[$normalizedUsername])) {
                $importErrors[] = sprintf('سطر %s: نام کاربری "%s" تکراری است.', $rowNumber, htmlspecialchars($username, ENT_QUOTES, 'UTF-8'));
                $skippedCount++;
                continue;
            }

            $processedUsernames[$normalizedUsername] = true;

            try {
                DatabaseHelper::insert('organization_users', [
                    'organization_id' => $organizationId,
                    'user_id' => $currentUserId,
                    'organization_name' => $organization['name'] ?? null,
                    'username' => $username,
                    'password_hash' => password_hash($password, PASSWORD_BCRYPT),
                    'first_name' => $firstName,
                    'last_name' => $lastName,
                    'gender' => null,
                    'evaluation_code' => $evaluationCode,
                    'national_code' => $nationalCode,
                    'personnel_code' => $personnelCode,
                    'email' => null,
                    'executive_devices' => null,
                    'province' => $province !== '' ? $province : null,
                    'city' => $city !== '' ? $city : null,
                    'expiration_date' => null,
                    'report_date' => null,
                    'service_location' => null,
                    'organization_post' => null,
                    'show_report_date_instead_of_calendar' => 0,
                    'is_system_admin' => 0,
                    'is_manager' => 0,
                    'is_evaluee' => 0,
                    'is_evaluator' => 0,
                    'is_active' => 1,
                ]);

                $existingUsernames[$normalizedUsername] = true;
                $importedCount++;
            } catch (Exception $exception) {
                $importErrors[] = sprintf('سطر %s: ثبت کاربر با خطا روبه‌رو شد.', $rowNumber);
                $skippedCount++;
            }
        }

        if (!empty($importErrors)) {
            $_SESSION['import_errors'] = $importErrors;
        }

        if ($importedCount > 0) {
            ResponseHelper::flashSuccess(sprintf('تعداد %s کاربر با موفقیت ثبت شد.', UtilityHelper::englishToPersian((string) $importedCount)));
            UtilityHelper::redirect($redirectIndex);
        }

        if ($skippedCount > 0 && empty($importedCount)) {
            ResponseHelper::flashError('تمامی ردیف‌ها به دلیل خطا یا تکراری بودن نادیده گرفته شدند.');
        } else {
            ResponseHelper::flashError('فایل ارسال شده حاوی داده معتبری نبود.');
        }

        UtilityHelper::redirect($redirectForm);
    }

    public function updateOrganizationUser(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationUsersTableExists();

        $token = $_POST['_token'] ?? '';
        $userId = isset($_POST['user_id']) ? (int) $_POST['user_id'] : 0;

        $redirectIndex = UtilityHelper::baseUrl('organizations/users');
        $redirectEdit = UtilityHelper::baseUrl('organizations/users/edit?id=' . urlencode((string) $userId));

        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        if ($userId <= 0) {
            ResponseHelper::flashError('شناسه کاربر نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $organization = $sessionData['organization'];
        $currentUser = $sessionData['user'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $currentUserId = (string) ($currentUser['id'] ?? '');

        if ($organizationId <= 0 || $currentUserId === '') {
            ResponseHelper::flashError('امکان بروزرسانی کاربر در حال حاضر وجود ندارد.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $organizationUser = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_users WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $userId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بازیابی اطلاعات کاربر مشکلی رخ داد.');
            UtilityHelper::redirect($redirectIndex);
        }

        if (!$organizationUser) {
            ResponseHelper::flashError('کاربر مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        $input = [
            'username' => trim((string) ($_POST['username'] ?? '')),
            'password' => (string) ($_POST['password'] ?? ''),
            'first_name' => trim((string) ($_POST['first_name'] ?? '')),
            'last_name' => trim((string) ($_POST['last_name'] ?? '')),
            'gender' => trim((string) ($_POST['gender'] ?? '')),
            'evaluation_code' => trim((string) ($_POST['evaluation_code'] ?? '')),
            'national_code' => trim((string) ($_POST['national_code'] ?? '')),
            'personnel_code' => trim((string) ($_POST['personnel_code'] ?? '')),
            'email' => trim((string) ($_POST['email'] ?? '')),
            'executive_devices' => trim((string) ($_POST['executive_devices'] ?? '')),
            'province' => trim((string) ($_POST['province'] ?? '')),
            'city' => trim((string) ($_POST['city'] ?? '')),
            'expiration_date' => trim((string) ($_POST['expiration_date'] ?? '')),
            'report_date' => trim((string) ($_POST['report_date'] ?? '')),
            'service_location' => trim((string) ($_POST['service_location'] ?? '')),
            'organization_post' => trim((string) ($_POST['organization_post'] ?? '')),
            'show_report_date_instead_of_calendar' => isset($_POST['show_report_date_instead_of_calendar']) ? '1' : '0',
            'is_system_admin' => isset($_POST['is_system_admin']) ? '1' : '0',
            'is_manager' => isset($_POST['is_manager']) ? '1' : '0',
            'is_evaluee' => isset($_POST['is_evaluee']) ? '1' : '0',
            'is_evaluator' => isset($_POST['is_evaluator']) ? '1' : '0',
            'is_active' => isset($_POST['is_active']) ? '1' : '0',
        ];

        $_SESSION['old_input'] = $input;

        $validationErrors = [];

        if ($input['username'] === '') {
            $validationErrors['username'] = 'نام کاربری الزامی است.';
        }

        if ($input['password'] !== '' && mb_strlen($input['password']) < 6) {
            $validationErrors['password'] = 'رمز عبور باید حداقل ۶ کاراکتر باشد.';
        }

        if ($input['first_name'] === '') {
            $validationErrors['first_name'] = 'نام الزامی است.';
        }

        if ($input['last_name'] === '') {
            $validationErrors['last_name'] = 'نام خانوادگی الزامی است.';
        }

        if ($input['evaluation_code'] === '') {
            $validationErrors['evaluation_code'] = 'کد ارزیابی الزامی است.';
        }

        if ($input['national_code'] === '') {
            $validationErrors['national_code'] = 'کد ملی الزامی است.';
        }

        if ($input['personnel_code'] === '') {
            $validationErrors['personnel_code'] = 'کد پرسنلی الزامی است.';
        }

        if ($input['email'] !== '' && !filter_var($input['email'], FILTER_VALIDATE_EMAIL)) {
            $validationErrors['email'] = 'فرمت ایمیل صحیح نیست.';
        }

        if ($input['gender'] !== '') {
            $allowedGenders = ['male', 'female', 'other'];
            $lowerGender = mb_strtolower($input['gender']);
            if (!in_array($lowerGender, $allowedGenders, true)) {
                $validationErrors['gender'] = 'جنسیت انتخاب شده معتبر نیست.';
            } else {
                $input['gender'] = $lowerGender;
            }
        }

        if ($input['username'] !== '' && $input['username'] !== ($organizationUser['username'] ?? '')) {
            try {
                $existingUser = DatabaseHelper::fetchOne(
                    'SELECT id FROM organization_users WHERE organization_id = :organization_id AND username = :username AND id != :id LIMIT 1',
                    [
                        'organization_id' => $organizationId,
                        'username' => $input['username'],
                        'id' => $userId,
                    ]
                );

                if ($existingUser) {
                    $validationErrors['username'] = 'این نام کاربری قبلاً ثبت شده است.';
                }
            } catch (Exception $exception) {
                ResponseHelper::flashError('امکان بررسی یکتایی نام کاربری وجود ندارد.');
                UtilityHelper::redirect($redirectEdit);
            }
        }

        if (!empty($validationErrors)) {
            $_SESSION['validation_errors'] = $validationErrors;
            ResponseHelper::flashError('لطفاً خطاهای فرم را بررسی کنید.');
            UtilityHelper::redirect($redirectEdit);
        }

        $updateData = [
            'username' => $input['username'],
            'first_name' => $input['first_name'],
            'last_name' => $input['last_name'],
            'gender' => $input['gender'] !== '' ? $input['gender'] : null,
            'evaluation_code' => $input['evaluation_code'],
            'national_code' => $input['national_code'],
            'personnel_code' => $input['personnel_code'],
            'email' => $input['email'] !== '' ? $input['email'] : null,
            'executive_devices' => $input['executive_devices'] !== '' ? $input['executive_devices'] : null,
            'province' => $input['province'] !== '' ? $input['province'] : null,
            'city' => $input['city'] !== '' ? $input['city'] : null,
            'expiration_date' => $input['expiration_date'] !== '' ? $input['expiration_date'] : null,
            'report_date' => $input['report_date'] !== '' ? $input['report_date'] : null,
            'service_location' => $input['service_location'] !== '' ? $input['service_location'] : null,
            'organization_post' => $input['organization_post'] !== '' ? $input['organization_post'] : null,
            'show_report_date_instead_of_calendar' => (int) $input['show_report_date_instead_of_calendar'],
            'is_system_admin' => (int) $input['is_system_admin'],
            'is_manager' => (int) $input['is_manager'],
            'is_evaluee' => (int) $input['is_evaluee'],
            'is_evaluator' => (int) $input['is_evaluator'],
            'is_active' => (int) $input['is_active'],
            'organization_name' => $organization['name'] ?? null,
            'user_id' => $currentUserId,
        ];

        if ($input['password'] !== '') {
            $updateData['password_hash'] = password_hash($input['password'], PASSWORD_BCRYPT);
        }

        try {
            DatabaseHelper::update(
                'organization_users',
                $updateData,
                'id = :id AND organization_id = :organization_id',
                ['id' => $userId, 'organization_id' => $organizationId]
            );

            unset($_SESSION['old_input'], $_SESSION['validation_errors']);

            ResponseHelper::flashSuccess('اطلاعات کاربر با موفقیت بروزرسانی شد.');
            UtilityHelper::redirect($redirectIndex);
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام بروزرسانی اطلاعات خطایی رخ داد.');
            UtilityHelper::redirect($redirectEdit);
        }
    }

    public function deleteOrganizationUser(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationUsersTableExists();

        $redirectIndex = UtilityHelper::baseUrl('organizations/users');

        $token = $_POST['_token'] ?? '';
        if (!AuthHelper::verifyCsrfToken($token)) {
            ResponseHelper::flashError('توکن امنیتی نامعتبر است. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectIndex);
        }

        $userId = isset($_POST['user_id']) ? (int) $_POST['user_id'] : 0;

        if ($userId <= 0) {
            ResponseHelper::flashError('شناسه کاربر نامعتبر است.');
            UtilityHelper::redirect($redirectIndex);
        }

        $organization = $sessionData['organization'];
        $organizationId = (int) ($organization['id'] ?? 0);

        try {
            $organizationUser = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_users WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $userId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            ResponseHelper::flashError('در بررسی کاربر مشکلی رخ داد.');
            UtilityHelper::redirect($redirectIndex);
        }

        if (!$organizationUser) {
            ResponseHelper::flashError('کاربر مورد نظر یافت نشد.');
            UtilityHelper::redirect($redirectIndex);
        }

        try {
            $deletedRows = DatabaseHelper::delete(
                'organization_users',
                'id = :id AND organization_id = :organization_id',
                ['id' => $userId, 'organization_id' => $organizationId]
            );

            if ($deletedRows > 0) {
                ResponseHelper::flashSuccess('کاربر مورد نظر حذف شد.');
            } else {
                ResponseHelper::flashError('حذف کاربر انجام نشد.');
            }
        } catch (Exception $exception) {
            ResponseHelper::flashError('در هنگام حذف کاربر خطایی رخ داد.');
        }

        UtilityHelper::redirect($redirectIndex);
    }

    private function parseOrganizationUsersXlsx(string $filePath): array
    {
        $zip = new ZipArchive();

        if ($zip->open($filePath) !== true) {
            throw new Exception('امکان خواندن فایل اکسل وجود ندارد.');
        }

        $sharedStringsXml = $zip->getFromName('xl/sharedStrings.xml');
        $sharedStrings = [];

        if ($sharedStringsXml !== false) {
            $shared = simplexml_load_string($sharedStringsXml);
            if ($shared !== false) {
                foreach ($shared->si as $si) {
                    $texts = [];
                    if (isset($si->t)) {
                        $texts[] = (string) $si->t;
                    }
                    if (isset($si->r)) {
                        foreach ($si->r as $run) {
                            if (isset($run->t)) {
                                $texts[] = (string) $run->t;
                            }
                        }
                    }
                    $sharedStrings[] = implode('', $texts);
                }
            }
        }

        $sheetXml = $zip->getFromName('xl/worksheets/sheet1.xml');
        if ($sheetXml === false) {
            $zip->close();
            throw new Exception('شیت اول در فایل اکسل یافت نشد.');
        }

        $sheet = simplexml_load_string($sheetXml);
        if ($sheet === false) {
            $zip->close();
            throw new Exception('خواندن داده‌های شیت امکان‌پذیر نبود.');
        }

        $rows = [];
        if (isset($sheet->sheetData) && isset($sheet->sheetData->row)) {
            foreach ($sheet->sheetData->row as $row) {
                $rowData = [];
                foreach ($row->c as $cell) {
                    $cellRef = (string) $cell['r'];
                    if ($cellRef === '') {
                        continue;
                    }
                    $columnLetters = preg_replace('/\d+/u', '', $cellRef);
                    $columnIndex = $this->columnLetterToIndex($columnLetters);
                    $cellValue = $this->extractCellValue($cell, $sharedStrings);
                    $rowData[$columnIndex] = $cellValue;
                }

                if (!empty($rowData)) {
                    ksort($rowData);
                    $rows[] = array_values($rowData);
                }
            }
        }

        $zip->close();

        if (empty($rows)) {
            return [];
        }

        $headerRow = array_map(static function ($value) {
            return trim((string) $value);
        }, $rows[0]);

        $columnMap = $this->mapOrganizationUsersColumns($headerRow);

        $requiredFields = ['username', 'password', 'first_name', 'last_name', 'evaluation_code', 'national_code', 'personnel_code'];
        foreach ($requiredFields as $requiredField) {
            if (!array_key_exists($requiredField, $columnMap)) {
                throw new Exception('ستون‌های مورد نیاز در فایل نمونه موجود نیستند. لطفاً از فایل نمونه ارائه شده استفاده کنید.');
            }
        }

        $records = [];
        for ($i = 1, $count = count($rows); $i < $count; $i++) {
            $rowValues = $rows[$i];
            $record = [];
            $hasValue = false;

            foreach ($columnMap as $field => $index) {
                $value = $rowValues[$index] ?? '';
                $value = is_string($value) ? trim($value) : trim((string) $value);
                if ($value !== '') {
                    $hasValue = true;
                }
                $record[$field] = $value;
            }

            if ($hasValue) {
                $records[] = $record;
            }
        }

        return $records;
    }

    private function columnLetterToIndex(string $letters): int
    {
        $letters = strtoupper($letters);
        $length = strlen($letters);
        $index = 0;

        for ($i = 0; $i < $length; $i++) {
            $index *= 26;
            $index += ord($letters[$i]) - ord('A') + 1;
        }

        return max(0, $index - 1);
    }

    private function extractCellValue(SimpleXMLElement $cell, array $sharedStrings): string
    {
        $type = (string) $cell['t'];

        if ($type === 's') {
            $sharedIndex = (int) ($cell->v ?? -1);
            return $sharedStrings[$sharedIndex] ?? '';
        }

        if ($type === 'inlineStr' && isset($cell->is->t)) {
            return (string) $cell->is->t;
        }

        if (isset($cell->v)) {
            return (string) $cell->v;
        }

        return '';
    }

    private function mapOrganizationUsersColumns(array $headers): array
    {
        $normalizedHeaders = [];
        foreach ($headers as $index => $header) {
            $normalizedHeaders[$index] = $this->normalizeHeader($header);
        }

        $headerMap = [
            'username' => ['نامکاربری', 'username', 'user'],
            'password' => ['رمز', 'رمزعبور', 'password', 'pass'],
            'first_name' => ['نام', 'firstname'],
            'last_name' => ['نامخانوادگی', 'lastname'],
            'evaluation_code' => ['کدارزیابی', 'evaluationcode'],
            'national_code' => ['کدملی', 'کدملی', 'nationalcode'],
            'province' => ['استان', 'province'],
            'city' => ['شهر', 'city'],
            'personnel_code' => ['کدپرسنلی', 'personnelcode'],
        ];

        $columnMap = [];

        foreach ($normalizedHeaders as $index => $normalizedHeader) {
            foreach ($headerMap as $field => $candidates) {
                if (in_array($normalizedHeader, $candidates, true)) {
                    $columnMap[$field] = $index;
                    break;
                }
            }
        }

        return $columnMap;
    }

    private function normalizeHeader(string $header): string
    {
        $header = trim($header);
        $header = str_replace([
            ' ',
            "\u{200C}", // zero width non-joiner
            "\u{200F}", // right-to-left mark
            "\u{202A}", "\u{202B}", "\u{202C}", "\u{202D}", "\u{202E}", // embedding marks
            "\u{FEFF}", // BOM
            '‌', // Persian ZWNJ
            '﻿' // BOM
        ], '', $header);
        return mb_strtolower($header);
    }

    private function generateOrganizationUsersSampleXlsx(): string
    {
        $tempFile = tempnam(sys_get_temp_dir(), 'org_users_sample_');
        if ($tempFile === false) {
            throw new Exception('امکان ایجاد فایل موقت وجود ندارد.');
        }

        $zip = new ZipArchive();
        if ($zip->open($tempFile, ZipArchive::OVERWRITE) !== true) {
            throw new Exception('امکان ایجاد فایل نمونه اکسل وجود ندارد.');
        }

        $this->addZipFile($zip, '[Content_Types].xml', <<<XML
<?xml version="1.0" encoding="UTF-8"?>
<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">
    <Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/>
    <Default Extension="xml" ContentType="application/xml"/>
    <Override PartName="/xl/workbook.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml"/>
    <Override PartName="/xl/worksheets/sheet1.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml"/>
    <Override PartName="/xl/sharedStrings.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml"/>
    <Override PartName="/xl/styles.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml"/>
</Types>
XML
        );

        $this->addZipFile($zip, '_rels/.rels', <<<XML
<?xml version="1.0" encoding="UTF-8"?>
<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
    <Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="xl/workbook.xml"/>
</Relationships>
XML
        );

        $this->addZipFile($zip, 'xl/_rels/workbook.xml.rels', <<<XML
<?xml version="1.0" encoding="UTF-8"?>
<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
    <Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" Target="worksheets/sheet1.xml"/>
    <Relationship Id="rId2" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings" Target="sharedStrings.xml"/>
    <Relationship Id="rId3" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles" Target="styles.xml"/>
</Relationships>
XML
        );

        $this->addZipFile($zip, 'xl/workbook.xml', <<<XML
<?xml version="1.0" encoding="UTF-8"?>
<workbook xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main"
 xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships">
    <sheets>
        <sheet name="Users" sheetId="1" r:id="rId1"/>
    </sheets>
</workbook>
XML
        );

        $sharedStrings = [
            'نام کاربری', 'رمز', 'نام', 'نام خانوادگی', 'کد ارزیابی', 'کدملی', 'استان', 'شهر', 'کد پرسنلی',
            'user.sample', 'Password123', 'علی', 'رضایی', 'EVA-123', '0012345678', 'تهران', 'تهران', 'PRS-789'
        ];

        $sharedStringsXml = '<?xml version="1.0" encoding="UTF-8"?>'
            . '<sst xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" '
            . 'count="' . count($sharedStrings) . '" uniqueCount="' . count($sharedStrings) . '">';
        foreach ($sharedStrings as $value) {
            $safeValue = htmlspecialchars($value, ENT_QUOTES | ENT_XML1, 'UTF-8');
            $sharedStringsXml .= '<si><t>' . $safeValue . '</t></si>';
        }
        $sharedStringsXml .= '</sst>';

        $this->addZipFile($zip, 'xl/sharedStrings.xml', $sharedStringsXml);

        $sheetXml = <<<XML
<?xml version="1.0" encoding="UTF-8"?>
<worksheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main"
 xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships">
    <sheetData>
        <row r="1">
            <c r="A1" t="s"><v>0</v></c>
            <c r="B1" t="s"><v>1</v></c>
            <c r="C1" t="s"><v>2</v></c>
            <c r="D1" t="s"><v>3</v></c>
            <c r="E1" t="s"><v>4</v></c>
            <c r="F1" t="s"><v>5</v></c>
            <c r="G1" t="s"><v>6</v></c>
            <c r="H1" t="s"><v>7</v></c>
            <c r="I1" t="s"><v>8</v></c>
        </row>
        <row r="2">
            <c r="A2" t="s"><v>9</v></c>
            <c r="B2" t="s"><v>10</v></c>
            <c r="C2" t="s"><v>11</v></c>
            <c r="D2" t="s"><v>12</v></c>
            <c r="E2" t="s"><v>13</v></c>
            <c r="F2" t="s"><v>14</v></c>
            <c r="G2" t="s"><v>15</v></c>
            <c r="H2" t="s"><v>16</v></c>
            <c r="I2" t="s"><v>17</v></c>
        </row>
    </sheetData>
</worksheet>
XML;

        $this->addZipFile($zip, 'xl/worksheets/sheet1.xml', $sheetXml);

        $this->addZipFile($zip, 'xl/styles.xml', <<<XML
<?xml version="1.0" encoding="UTF-8"?>
<styleSheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">
    <fonts count="1"><font><sz val="11"/><color theme="1"/><name val="Calibri"/><family val="2"/></font></fonts>
    <fills count="1"><fill><patternFill patternType="none"/></fill></fills>
    <borders count="1"><border/></borders>
    <cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs>
    <cellXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0" xfId="0"/></cellXfs>
    <cellStyles count="1"><cellStyle name="Normal" xfId="0" builtinId="0"/></cellStyles>
</styleSheet>
XML
        );

        $zip->close();

        return $tempFile;
    }

    private function addZipFile(ZipArchive $zip, string $path, string $contents): void
    {
        $zip->addFromString($path, $contents);
    }

    private function resolveScoringRange(?string $scoringType): array
    {
        $normalized = $this->normalizeScoringType($scoringType);

        switch ($normalized) {
            case '0-10':
                return ['min' => 0, 'max' => 10, 'step' => 1];
            case '0-100':
                return ['min' => 0, 'max' => 100, 'step' => 10];
            case '0-5':
            default:
                return ['min' => 0, 'max' => 5, 'step' => 1];
        }
    }

    private function normalizeScoringType(?string $value): string
    {
        $raw = UtilityHelper::persianToEnglish(trim((string) $value));

        if ($raw === '') {
            return '0-5';
        }

        $raw = str_replace(['–', '—'], '-', $raw);
        $raw = str_ireplace(['تا', 'to'], '-', $raw);

        preg_match_all('/\d+/', $raw, $matches);
        $numbers = array_map('intval', $matches[0] ?? []);

        if (empty($numbers)) {
            return '0-5';
        }

        if (count($numbers) >= 2) {
            $minCandidate = $numbers[0];
            $maxCandidate = $numbers[1];

            if ($minCandidate > $maxCandidate) {
                [$minCandidate, $maxCandidate] = [$maxCandidate, $minCandidate];
            }
        } else {
            $minCandidate = 0;
            $maxCandidate = $numbers[0];
        }

        if ($minCandidate !== 0) {
            $maxCandidate = max($minCandidate, $maxCandidate);
            $minCandidate = 0;
        }

        if (!in_array($maxCandidate, [5, 10, 100], true)) {
            if ($maxCandidate <= 5) {
                $maxCandidate = 5;
            } elseif ($maxCandidate <= 10) {
                $maxCandidate = 10;
            } elseif ($maxCandidate <= 100) {
                $maxCandidate = 100;
            } else {
                $maxCandidate = 5;
            }
        }

        return '0-' . $maxCandidate;
    }

    private function translateScoringTypeLabel(string $scoringType): string
    {
        $normalized = $this->normalizeScoringType($scoringType);
        $map = $this->getCompetencyModelScoringTypes();

        if (isset($map[$normalized])) {
            return $map[$normalized];
        }

        [$min, $max] = array_map('intval', explode('-', $normalized . '-'));
        return sprintf(
            'امتیاز دهی %s تا %s',
            UtilityHelper::englishToPersian((string) $min),
            UtilityHelper::englishToPersian((string) $max)
        );
    }

    private function getCompetencyModelScoringTypes(): array
    {
        return [
            '0-5' => sprintf('امتیاز دهی %s تا %s', UtilityHelper::englishToPersian('0'), UtilityHelper::englishToPersian('5')),
            '0-10' => sprintf('امتیاز دهی %s تا %s', UtilityHelper::englishToPersian('0'), UtilityHelper::englishToPersian('10')),
            '0-100' => sprintf('امتیاز دهی %s تا %s', UtilityHelper::englishToPersian('0'), UtilityHelper::englishToPersian('100')),
        ];
    }

    private function getCompetencyModelReportLevels(): array
    {
        return [
            'ارشد' => 'ارشد',
            'پایه' => 'پایه',
            'عملیاتی' => 'عملیاتی',
            'کارشناسان' => 'کارشناسان',
            'میانی' => 'میانی',
        ];
    }

    private function getExistingCompetencyFeatureTypes(int $organizationId): array
    {
        if ($organizationId <= 0) {
            return [];
        }

        try {
            $rows = DatabaseHelper::fetchAll(
                'SELECT DISTINCT type FROM organization_competency_features WHERE organization_id = :organization_id AND type IS NOT NULL AND type <> "" ORDER BY type ASC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            return [];
        }

        if (empty($rows)) {
            return [];
        }

        $types = [];
        foreach ($rows as $row) {
            $type = preg_replace('/\s+/u', ' ', trim((string) ($row['type'] ?? '')));
            if ($type === '') {
                continue;
            }

            $types[$type] = $type;
        }

        return array_values($types);
    }

    private function fetchOrganizationCompetenciesForModels(int $organizationId): array
    {
        if ($organizationId <= 0) {
            return [];
        }

        try {
            $rows = DatabaseHelper::fetchAll(
                'SELECT oc.id, oc.code, oc.title, ocd.name AS dimension_name
                 FROM organization_competencies oc
                 LEFT JOIN organization_competency_dimensions ocd
                    ON ocd.id = oc.competency_dimension_id AND ocd.organization_id = oc.organization_id
                 WHERE oc.organization_id = :organization_id
                 ORDER BY oc.title ASC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            return [];
        }

        if (empty($rows)) {
            return [];
        }

        $competencies = [];
        foreach ($rows as $row) {
            $id = (int) ($row['id'] ?? 0);
            if ($id <= 0) {
                continue;
            }

            $competencies[] = [
                'id' => $id,
                'code' => trim((string) ($row['code'] ?? '')),
                'title' => trim((string) ($row['title'] ?? '')),
                'dimension_name' => trim((string) ($row['dimension_name'] ?? '')),
            ];
        }

        return $competencies;
    }

    private function normalizeCompetencyIdArray($input): array
    {
        if (!is_array($input)) {
            return [];
        }

        $normalized = [];
        foreach ($input as $value) {
            $id = (int) UtilityHelper::persianToEnglish(trim((string) $value));
            if ($id <= 0) {
                continue;
            }

            $normalized[$id] = $id;
        }

        return array_values($normalized);
    }

    private function filterValidCompetencyIds(array $candidateIds, int $organizationId): array
    {
        $candidateIds = array_values(array_unique(array_filter(array_map('intval', $candidateIds), static function ($id) {
            return $id > 0;
        })));

        if ($organizationId <= 0 || empty($candidateIds)) {
            return [];
        }

        $placeholders = implode(',', array_fill(0, count($candidateIds), '?'));
        $params = array_merge([$organizationId], $candidateIds);

        try {
            $rows = DatabaseHelper::fetchAll(
                'SELECT id FROM organization_competencies WHERE organization_id = ? AND id IN (' . $placeholders . ')',
                $params
            );
        } catch (Exception $exception) {
            return [];
        }

        if (empty($rows)) {
            return [];
        }

        $validIds = array_map(static function ($row) {
            return (int) ($row['id'] ?? 0);
        }, $rows);

        return array_values(array_intersect($candidateIds, $validIds));
    }

    private function getSelectedCompetencyIdsForModel(int $organizationId, int $modelId): array
    {
        if ($organizationId <= 0 || $modelId <= 0) {
            return [];
        }

        try {
            $rows = DatabaseHelper::fetchAll(
                'SELECT competency_id FROM organization_competency_model_items WHERE organization_id = :organization_id AND model_id = :model_id',
                [
                    'organization_id' => $organizationId,
                    'model_id' => $modelId,
                ]
            );
        } catch (Exception $exception) {
            return [];
        }

        if (empty($rows)) {
            return [];
        }

        $ids = [];
        foreach ($rows as $row) {
            $id = (int) ($row['competency_id'] ?? 0);
            if ($id <= 0) {
                continue;
            }

            $ids[$id] = $id;
        }

        return array_values($ids);
    }

    private function getCompetencyModelCompetencyCounts(array $modelIds, int $organizationId): array
    {
        $modelIds = array_values(array_unique(array_filter(array_map('intval', $modelIds), static function ($id) {
            return $id > 0;
        })));

        if ($organizationId <= 0 || empty($modelIds)) {
            return [];
        }

        $placeholders = implode(',', array_fill(0, count($modelIds), '?'));
        $params = array_merge([$organizationId], $modelIds);

        try {
            $rows = DatabaseHelper::fetchAll(
                'SELECT model_id, COUNT(*) AS total
                 FROM organization_competency_model_items
                 WHERE organization_id = ? AND model_id IN (' . $placeholders . ')
                 GROUP BY model_id',
                $params
            );
        } catch (Exception $exception) {
            return [];
        }

        if (empty($rows)) {
            return [];
        }

        $counts = [];
        foreach ($rows as $row) {
            $counts[(int) ($row['model_id'] ?? 0)] = (int) ($row['total'] ?? 0);
        }

        return $counts;
    }

    private function ensureOrganizationDiscPersonalityTypesTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_disc_personality_types (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    scope VARCHAR(50) NOT NULL,
    disc_type_code VARCHAR(5) NOT NULL,
    disc_type_label VARCHAR(191) NOT NULL,
    short_description TEXT NOT NULL,
    general_tendencies TEXT NOT NULL,
    work_preferences TEXT NOT NULL,
    effectiveness_requirements TEXT NOT NULL,
    companion_requirements TEXT NOT NULL,
    behavior_overview LONGTEXT NOT NULL,
    created_by VARCHAR(191) NULL,
    updated_by VARCHAR(191) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_disc_type_scope (organization_id, scope, disc_type_code),
    INDEX idx_disc_scope (organization_id, scope)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Fail silently; future operations will reveal issues.
        }

        $this->ensureOrganizationDiscPersonalityTypesColumn('organization_id', 'BIGINT UNSIGNED NOT NULL');
        $this->ensureOrganizationDiscPersonalityTypesColumn('scope', 'VARCHAR(50) NOT NULL');
        $this->ensureOrganizationDiscPersonalityTypesColumn('disc_type_code', 'VARCHAR(5) NOT NULL');
        $this->ensureOrganizationDiscPersonalityTypesColumn('disc_type_label', 'VARCHAR(191) NOT NULL');
        $this->ensureOrganizationDiscPersonalityTypesColumn('short_description', 'TEXT NOT NULL');
        $this->ensureOrganizationDiscPersonalityTypesColumn('general_tendencies', 'TEXT NOT NULL');
        $this->ensureOrganizationDiscPersonalityTypesColumn('work_preferences', 'TEXT NOT NULL');
        $this->ensureOrganizationDiscPersonalityTypesColumn('effectiveness_requirements', 'TEXT NOT NULL');
        $this->ensureOrganizationDiscPersonalityTypesColumn('companion_requirements', 'TEXT NOT NULL');
        $this->ensureOrganizationDiscPersonalityTypesColumn('behavior_overview', 'LONGTEXT NOT NULL');
        $this->ensureOrganizationDiscPersonalityTypesColumn('created_by', 'VARCHAR(191) NULL');
        $this->ensureOrganizationDiscPersonalityTypesColumn('updated_by', 'VARCHAR(191) NULL');
        $this->ensureOrganizationDiscPersonalityTypesColumn('created_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP');
        $this->ensureOrganizationDiscPersonalityTypesColumn('updated_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP');

        $this->ensureOrganizationDiscPersonalityTypesIndex('idx_disc_scope', 'INDEX idx_disc_scope (organization_id, scope)');
        $this->ensureOrganizationDiscPersonalityTypesUnique('uq_disc_type_scope', 'UNIQUE KEY uq_disc_type_scope (organization_id, scope, disc_type_code)');

        $ensured = true;
    }

    private function ensureOrganizationDiscPersonalityTypesColumn(string $column, string $definition): void
    {
        try {
            $columnExists = DatabaseHelper::fetchOne(
                'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND COLUMN_NAME = :column LIMIT 1',
                ['table' => 'organization_disc_personality_types', 'column' => $column]
            );

            if (!$columnExists) {
                DatabaseHelper::query("ALTER TABLE organization_disc_personality_types ADD COLUMN {$column} {$definition}");
            }
        } catch (Exception $exception) {
            // ignore silently
        }
    }

    private function ensureOrganizationDiscPersonalityTypesIndex(string $indexName, string $definition): void
    {
        try {
            $indexExists = DatabaseHelper::fetchOne(
                'SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND INDEX_NAME = :index LIMIT 1',
                ['table' => 'organization_disc_personality_types', 'index' => $indexName]
            );

            if (!$indexExists) {
                DatabaseHelper::query("ALTER TABLE organization_disc_personality_types ADD {$definition}");
            }
        } catch (Exception $exception) {
            // ignore silently
        }
    }

    private function ensureOrganizationDiscPersonalityTypesUnique(string $uniqueName, string $definition): void
    {
        try {
            $uniqueExists = DatabaseHelper::fetchOne(
                'SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND INDEX_NAME = :index LIMIT 1',
                ['table' => 'organization_disc_personality_types', 'index' => $uniqueName]
            );

            if (!$uniqueExists) {
                DatabaseHelper::query("ALTER TABLE organization_disc_personality_types ADD {$definition}");
            }
        } catch (Exception $exception) {
            // ignore silently
        }
    }

    private function ensureOrganizationNeoTraitsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_neo_personality_traits (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    trait_code VARCHAR(50) NOT NULL,
    trait_label VARCHAR(191) NOT NULL,
    short_description TEXT NOT NULL,
    key_drivers TEXT NOT NULL,
    communication_style TEXT NOT NULL,
    development_focus TEXT NOT NULL,
    stress_signals TEXT NOT NULL,
    created_by VARCHAR(191) NULL,
    updated_by VARCHAR(191) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_org_neo_trait_code (organization_id, trait_code),
    INDEX idx_org_neo_traits_org (organization_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Ignore errors silently; follow-up operations will expose them.
        }

        $this->ensureOrganizationNeoTraitsColumn('organization_id', 'BIGINT UNSIGNED NOT NULL');
        $this->ensureOrganizationNeoTraitsColumn('trait_code', 'VARCHAR(50) NOT NULL');
        $this->ensureOrganizationNeoTraitsColumn('trait_label', 'VARCHAR(191) NOT NULL');
        $this->ensureOrganizationNeoTraitsColumn('short_description', 'TEXT NOT NULL');
        $this->ensureOrganizationNeoTraitsColumn('key_drivers', 'TEXT NOT NULL');
        $this->ensureOrganizationNeoTraitsColumn('communication_style', 'TEXT NOT NULL');
        $this->ensureOrganizationNeoTraitsColumn('development_focus', 'TEXT NOT NULL');
        $this->ensureOrganizationNeoTraitsColumn('stress_signals', 'TEXT NOT NULL');
        $this->ensureOrganizationNeoTraitsColumn('created_by', 'VARCHAR(191) NULL');
        $this->ensureOrganizationNeoTraitsColumn('updated_by', 'VARCHAR(191) NULL');
        $this->ensureOrganizationNeoTraitsColumn('created_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP');
        $this->ensureOrganizationNeoTraitsColumn('updated_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP');

        $this->ensureOrganizationNeoTraitsIndex('idx_org_neo_traits_org', 'INDEX idx_org_neo_traits_org (organization_id)');
        $this->ensureOrganizationNeoTraitsUnique('uq_org_neo_trait_code', 'UNIQUE KEY uq_org_neo_trait_code (organization_id, trait_code)');

        $ensured = true;
    }

    private function ensureOrganizationNeoTraitsColumn(string $column, string $definition): void
    {
        try {
            $columnExists = DatabaseHelper::fetchOne(
                'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND COLUMN_NAME = :column LIMIT 1',
                ['table' => 'organization_neo_personality_traits', 'column' => $column]
            );

            if (!$columnExists) {
                DatabaseHelper::query("ALTER TABLE organization_neo_personality_traits ADD COLUMN {$column} {$definition}");
            }
        } catch (Exception $exception) {
            // ignore silently
        }
    }

    private function ensureOrganizationNeoTraitsIndex(string $indexName, string $definition): void
    {
        try {
            $indexExists = DatabaseHelper::fetchOne(
                'SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND INDEX_NAME = :index LIMIT 1',
                ['table' => 'organization_neo_personality_traits', 'index' => $indexName]
            );

            if (!$indexExists) {
                DatabaseHelper::query("ALTER TABLE organization_neo_personality_traits ADD {$definition}");
            }
        } catch (Exception $exception) {
            // ignore silently
        }
    }

    private function ensureOrganizationNeoTraitsUnique(string $uniqueName, string $definition): void
    {
        try {
            $uniqueExists = DatabaseHelper::fetchOne(
                'SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND INDEX_NAME = :index LIMIT 1',
                ['table' => 'organization_neo_personality_traits', 'index' => $uniqueName]
            );

            if (!$uniqueExists) {
                DatabaseHelper::query("ALTER TABLE organization_neo_personality_traits ADD {$definition}");
            }
        } catch (Exception $exception) {
            // ignore silently
        }
    }

    private function getNeoTraitOptions(): array
    {
        return [
            'O_HIGH' => 'گشودگی بالا (Openness High)',
            'O_LOW' => 'گشودگی پایین (Openness Low)',
            'C_HIGH' => 'تعهدپذیری بالا (Conscientiousness High)',
            'C_LOW' => 'تعهدپذیری پایین (Conscientiousness Low)',
            'E_HIGH' => 'برون‌گرایی بالا (Extraversion High)',
            'E_LOW' => 'برون‌گرایی پایین (Extraversion Low)',
            'A_HIGH' => 'سازگاری بالا (Agreeableness High)',
            'A_LOW' => 'سازگاری پایین (Agreeableness Low)',
            'N_HIGH' => 'روان‌رنجوری بالا (Neuroticism High)',
            'N_LOW' => 'روان‌رنجوری پایین (Neuroticism Low)',
        ];
    }

    private function getNeoTraitLabel(string $traitCode): string
    {
        $traitCode = $this->normalizeNeoTraitCode($traitCode);

        $options = $this->getNeoTraitOptions();

        return $options[$traitCode] ?? $traitCode;
    }

    private function normalizeNeoTraitCode(string $traitCode): string
    {
        $traitCode = strtoupper(trim($traitCode));

        $options = $this->getNeoTraitOptions();

        if (isset($options[$traitCode])) {
            return $traitCode;
        }

        return '';
    }

    private function getNeoPresetSeedData(): array
    {
        return [
            [
                'trait_code' => 'O_HIGH',
                'short_description' => 'خلاق، کنجکاو و علاقه‌مند به تجربه‌های تازه با تخیل قوی.',
                'key_drivers' => 'چالش‌های جدید، فضای نوآورانه، امکان یادگیری و کشف مسیرهای متفاوت.',
                'communication_style' => 'به اشتراک‌گذاری ایده‌های نو، باز بودن نسبت به دیدگاه‌های متفاوت، استفاده از استعاره و تصویرسازی.',
                'development_focus' => 'مدیریت تمرکز و هدایت انرژی خلاق به خروجی مشخص، ایجاد ساختار برای ایده‌ها.',
                'stress_signals' => 'پراکنده‌گویی، شروع چند پروژه بدون اتمام، احساس محدود شدن در چارچوب‌های خشک.',
            ],
            [
                'trait_code' => 'O_LOW',
                'short_description' => 'واقع‌گرا، محتاط و متمایل به روش‌های آزموده و قابل پیش‌بینی.',
                'key_drivers' => 'رویه‌های روشن، اطلاعات مستند، نمونه‌های موفق پیشین.',
                'communication_style' => 'تکیه بر داده‌های دقیق، مثال‌های عینی و زبان مستقیم بدون اغراق.',
                'development_focus' => 'تقویت انعطاف‌پذیری، تجربه تدریجی ایده‌های تازه و توسعه دیدگاه چندجانبه.',
                'stress_signals' => 'مقاومت شدید در برابر تغییر، تمرکز بیش از حد بر جزئیات و نادیده گرفتن فرصت‌ها.',
            ],
            [
                'trait_code' => 'C_HIGH',
                'short_description' => 'هدفمند، منظم و حساس به کیفیت خروجی و انجام به موقع تعهدات.',
                'key_drivers' => 'برنامه شفاف، توقعات روشن، دسترسی به منابع لازم و ارزیابی عملکرد.',
                'communication_style' => 'بیان ساختاریافته، توجه به جزئیات، دنبال کردن پیگیری‌ها و وضعیت پیشرفت.',
                'development_focus' => 'پذیرش انعطاف در مواقع غیرمنتظره، واگذاری برخی مسئولیت‌ها و مدیریت تعادل کار-زندگی.',
                'stress_signals' => 'کمال‌گرایی افراطی، خشک شدن روابط، فشار بیش از حد به خود و دیگران.',
            ],
            [
                'trait_code' => 'C_LOW',
                'short_description' => 'خودجوش، ریسک‌پذیر و تمرکز بر تصویر کلی به جای پیگیری ریز جزئیات.',
                'key_drivers' => 'آزادی عمل، پروژه‌های پویا، امکان آزمون و خطای سریع.',
                'communication_style' => 'صحبت درباره نتایج کلان، استفاده از مثال‌های کلی و انرژی بالا.',
                'development_focus' => 'ایجاد سیستم‌های ساده برای پیگیری، تقویت مدیریت زمان و مسئولیت‌پذیری.',
                'stress_signals' => 'تاخیر مکرر، ناتمام ماندن کارها، غافلگیری توسط جزئیات حیاتی.',
            ],
            [
                'trait_code' => 'E_HIGH',
                'short_description' => 'اجتماعی، پرانرژی و انگیزه‌گرفته از تعامل با دیگران و دیده‌شدن.',
                'key_drivers' => 'شبکه‌سازی، فرصت‌های رهبری، محیط پرتحرک و قدردانی عمومی.',
                'communication_style' => 'بیان احساسی، داستان‌گویی و درگیر کردن جمع با سوال و مشارکت.',
                'development_focus' => 'گوش‌دادن فعال، مدیریت زمان صحبت، توجه به پیامدهای بلندمدت.',
                'stress_signals' => 'حرف زدن بیش از حد، عدم تمرکز، درخواست توجه مداوم و بی‌قراری.',
            ],
            [
                'trait_code' => 'E_LOW',
                'short_description' => 'محتاط، عمیق و متمایل به تمرکز فردی و سنجیده در روابط.',
                'key_drivers' => 'فضای آرام، امکان آماده‌سازی قبلی، حداقل حواس‌پرتی بیرونی.',
                'communication_style' => 'اختصار، تاکید بر محتوا و ارائه تحلیل‌های دقیق پس از تفکر.',
                'development_focus' => 'تقویت حضور در جمع، بیان به موقع ایده‌ها و استفاده از شبکه حمایتی.',
                'stress_signals' => 'انزوا، اجتناب از تعاملات ضروری، تحلیل بیش از حد بدون اقدام.',
            ],
            [
                'trait_code' => 'A_HIGH',
                'short_description' => 'همدل، همکاری‌محور و تمایل به ایجاد هماهنگی و روابط مثبت.',
                'key_drivers' => 'اعتماد متقابل، فضای حمایتی، فعالیت‌های تیمی و ماموریت‌های معنادار.',
                'communication_style' => 'لحن گرم، تاکید بر برنده-برنده، توجه به احساسات جمعی.',
                'development_focus' => 'ابراز قاطعانه نیازهای شخصی، تعیین مرزها و مدیریت تعارض.',
                'stress_signals' => 'پذیرفتن بیش از حد درخواست‌ها، خودسانسوری، دلخوری پنهان.',
            ],
            [
                'trait_code' => 'A_LOW',
                'short_description' => 'تحلیلی، صریح و گاهی رقابتی با تمرکز بر نتیجه و واقعیت‌ها.',
                'key_drivers' => 'اهداف شفاف، معیارهای عملکرد، فرصت مطرح کردن دیدگاه مستقل.',
                'communication_style' => 'بیان مستقیم، تاکید بر منطق و آمار، طرح سوالات چالشی.',
                'development_focus' => 'تقویت همدلی، توجه به پیامدهای انسانی تصمیمات و زبان مثبت.',
                'stress_signals' => 'انتقاد تند، بی‌صبری، کاهش همکاری و ایجاد فضای تنش.',
            ],
            [
                'trait_code' => 'N_HIGH',
                'short_description' => 'حساس، آگاه نسبت به ریسک‌ها و نگرانی‌ها با نوسان هیجانی بیشتر.',
                'key_drivers' => 'اطمینان‌بخشی، برنامه‌های کنترل ریسک، حمایت مستمر و بازخورد سازنده.',
                'communication_style' => 'طرح نگرانی‌ها، درخواست جزئیات بیشتر و نیاز به تایید.',
                'development_focus' => 'مدیریت هیجانات، تمرین تاب‌آوری و استفاده از تکنیک‌های آرام‌سازی.',
                'stress_signals' => 'نگرانی افراطی، بدبینی، عقب‌نشینی از مسئولیت‌ها و خستگی روانی.',
            ],
            [
                'trait_code' => 'N_LOW',
                'short_description' => 'با ثبات هیجانی، آرام و قادر به مدیریت شرایط دشوار بدون آشفتگی.',
                'key_drivers' => 'استقلال عمل، اعتماد سازمان، نقش‌های بحران‌ستیز و مربی‌گری.',
                'communication_style' => 'لحن اطمینان‌بخش، تمرکز بر راه‌حل و نگاه متعادل به مشکل.',
                'development_focus' => 'افزایش حساسیت نسبت به احساسات دیگران، اشتراک‌گذاری تجارب شخصی برای ایجاد صمیمیت.',
                'stress_signals' => 'کم‌اهمیت جلوه دادن احساسات دیگران، فاصله عاطفی، کمبود فوریت در مواقع بحرانی.',
            ],
        ];
    }

    private function ensureOrganizationMbtiTypesTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_mbti_types (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    type_code VARCHAR(10) NOT NULL,
    title VARCHAR(191) NOT NULL,
    summary TEXT NULL,
    cognitive_functions TEXT NULL,
    categories TEXT NULL,
    description LONGTEXT NULL,
    created_by VARCHAR(191) NULL,
    updated_by VARCHAR(191) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_org_mbti_type_code (organization_id, type_code),
    INDEX idx_org_mbti_types_org (organization_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Ignore table creation issues; subsequent queries will surface errors.
        }

        $this->ensureOrganizationMbtiTypesColumn('organization_id', 'BIGINT UNSIGNED NOT NULL');
        $this->ensureOrganizationMbtiTypesColumn('type_code', 'VARCHAR(10) NOT NULL');
        $this->ensureOrganizationMbtiTypesColumn('title', 'VARCHAR(191) NOT NULL');
        $this->ensureOrganizationMbtiTypesColumn('summary', 'TEXT NULL');
        $this->ensureOrganizationMbtiTypesColumn('cognitive_functions', 'TEXT NULL');
        $this->ensureOrganizationMbtiTypesColumn('categories', 'TEXT NULL');
        $this->ensureOrganizationMbtiTypesColumn('description', 'LONGTEXT NULL');
        $this->ensureOrganizationMbtiTypesColumn('created_by', 'VARCHAR(191) NULL');
        $this->ensureOrganizationMbtiTypesColumn('updated_by', 'VARCHAR(191) NULL');
        $this->ensureOrganizationMbtiTypesColumn('created_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP');
        $this->ensureOrganizationMbtiTypesColumn('updated_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP');

        $this->ensureOrganizationMbtiTypesIndex('idx_org_mbti_types_org', 'INDEX idx_org_mbti_types_org (organization_id)');
        $this->ensureOrganizationMbtiTypesUnique('uq_org_mbti_type_code', 'UNIQUE KEY uq_org_mbti_type_code (organization_id, type_code)');

        $ensured = true;
    }

    private function ensureOrganizationMbtiTypeFeaturesTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_mbti_type_features (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    mbti_type_id BIGINT UNSIGNED NOT NULL,
    category VARCHAR(100) NOT NULL,
    feature_text TEXT NOT NULL,
    sort_order INT NOT NULL DEFAULT 0,
    created_by VARCHAR(191) NULL,
    updated_by VARCHAR(191) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_org_mbti_features_org (organization_id),
    INDEX idx_org_mbti_features_type (mbti_type_id),
    INDEX idx_org_mbti_features_category (category)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Fail silently; subsequent operations will surface issues.
        }

        $this->ensureOrganizationMbtiTypeFeaturesColumn('organization_id', 'BIGINT UNSIGNED NOT NULL');
        $this->ensureOrganizationMbtiTypeFeaturesColumn('mbti_type_id', 'BIGINT UNSIGNED NOT NULL');
        $this->ensureOrganizationMbtiTypeFeaturesColumn('category', 'VARCHAR(100) NOT NULL');
        $this->ensureOrganizationMbtiTypeFeaturesColumn('feature_text', 'TEXT NOT NULL');
        $this->ensureOrganizationMbtiTypeFeaturesColumn('sort_order', 'INT NOT NULL DEFAULT 0');
        $this->ensureOrganizationMbtiTypeFeaturesColumn('created_by', 'VARCHAR(191) NULL');
        $this->ensureOrganizationMbtiTypeFeaturesColumn('updated_by', 'VARCHAR(191) NULL');
        $this->ensureOrganizationMbtiTypeFeaturesColumn('created_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP');
        $this->ensureOrganizationMbtiTypeFeaturesColumn('updated_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP');

        $this->ensureOrganizationMbtiTypeFeaturesIndex('idx_org_mbti_features_org', 'INDEX idx_org_mbti_features_org (organization_id)');
        $this->ensureOrganizationMbtiTypeFeaturesIndex('idx_org_mbti_features_type', 'INDEX idx_org_mbti_features_type (mbti_type_id)');
        $this->ensureOrganizationMbtiTypeFeaturesIndex('idx_org_mbti_features_category', 'INDEX idx_org_mbti_features_category (category)');

        $ensured = true;
    }

    private function ensureOrganizationMbtiTypeFeaturesColumn(string $column, string $definition): void
    {
        try {
            $columnExists = DatabaseHelper::fetchOne(
                'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND COLUMN_NAME = :column LIMIT 1',
                ['table' => 'organization_mbti_type_features', 'column' => $column]
            );

            if (!$columnExists) {
                DatabaseHelper::query("ALTER TABLE organization_mbti_type_features ADD COLUMN {$column} {$definition}");
            }
        } catch (Exception $exception) {
            // ignore silently
        }
    }

    private function ensureOrganizationMbtiTypeFeaturesIndex(string $indexName, string $definition): void
    {
        try {
            $indexExists = DatabaseHelper::fetchOne(
                'SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND INDEX_NAME = :index LIMIT 1',
                ['table' => 'organization_mbti_type_features', 'index' => $indexName]
            );

            if (!$indexExists) {
                DatabaseHelper::query("ALTER TABLE organization_mbti_type_features ADD {$definition}");
            }
        } catch (Exception $exception) {
            // ignore silently
        }
    }

    private function ensureOrganizationCompetencyModelsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_competency_models (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    code VARCHAR(191) NOT NULL,
    title VARCHAR(255) NOT NULL,
    scoring_type VARCHAR(50) NOT NULL,
    report_level VARCHAR(100) NOT NULL,
    report_setting_id BIGINT UNSIGNED NULL,
    image_path VARCHAR(255) NULL,
    created_by VARCHAR(191) NULL,
    updated_by VARCHAR(191) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_org_competency_models_code (organization_id, code),
    INDEX idx_org_competency_models_org (organization_id),
    INDEX idx_org_competency_models_report (report_setting_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Fail silently; subsequent operations will surface issues.
        }

        $this->ensureOrganizationCompetencyModelsColumn('code', 'VARCHAR(191) NOT NULL');
        $this->ensureOrganizationCompetencyModelsColumn('title', 'VARCHAR(255) NOT NULL');
        $this->ensureOrganizationCompetencyModelsColumn('scoring_type', 'VARCHAR(50) NOT NULL');
        $this->ensureOrganizationCompetencyModelsColumn('report_level', 'VARCHAR(100) NOT NULL');
        $this->ensureOrganizationCompetencyModelsColumn('report_setting_id', 'BIGINT UNSIGNED NULL');
        $this->ensureOrganizationCompetencyModelsColumn('image_path', 'VARCHAR(255) NULL');
        $this->ensureOrganizationCompetencyModelsColumn('created_by', 'VARCHAR(191) NULL');
        $this->ensureOrganizationCompetencyModelsColumn('updated_by', 'VARCHAR(191) NULL');
        $this->ensureOrganizationCompetencyModelsColumn('created_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP');
        $this->ensureOrganizationCompetencyModelsColumn('updated_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP');

        $this->ensureOrganizationCompetencyModelsIndex('idx_org_competency_models_org', 'INDEX idx_org_competency_models_org (organization_id)');
        $this->ensureOrganizationCompetencyModelsIndex('idx_org_competency_models_report', 'INDEX idx_org_competency_models_report (report_setting_id)');
        $this->ensureOrganizationCompetencyModelsUnique('uq_org_competency_models_code', 'UNIQUE KEY uq_org_competency_models_code (organization_id, code)');

        $ensured = true;
    }

    private function ensureOrganizationCompetencyModelItemsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_competency_model_items (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    model_id BIGINT UNSIGNED NOT NULL,
    competency_id BIGINT UNSIGNED NOT NULL,
    added_by VARCHAR(191) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_org_competency_model_items (organization_id, model_id, competency_id),
    INDEX idx_org_competency_model_items_org (organization_id),
    INDEX idx_org_competency_model_items_model (model_id),
    INDEX idx_org_competency_model_items_competency (competency_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Fail silently; subsequent operations will surface issues.
        }

        $this->ensureOrganizationCompetencyModelItemsColumn('model_id', 'BIGINT UNSIGNED NOT NULL');
        $this->ensureOrganizationCompetencyModelItemsColumn('competency_id', 'BIGINT UNSIGNED NOT NULL');
        $this->ensureOrganizationCompetencyModelItemsColumn('added_by', 'VARCHAR(191) NULL');
        $this->ensureOrganizationCompetencyModelItemsColumn('created_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP');
        $this->ensureOrganizationCompetencyModelItemsColumn('updated_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP');

        $this->ensureOrganizationCompetencyModelItemsIndex('idx_org_competency_model_items_org', 'INDEX idx_org_competency_model_items_org (organization_id)');
        $this->ensureOrganizationCompetencyModelItemsIndex('idx_org_competency_model_items_model', 'INDEX idx_org_competency_model_items_model (model_id)');
        $this->ensureOrganizationCompetencyModelItemsIndex('idx_org_competency_model_items_competency', 'INDEX idx_org_competency_model_items_competency (competency_id)');
        $this->ensureOrganizationCompetencyModelItemsUnique('uq_org_competency_model_items', 'UNIQUE KEY uq_org_competency_model_items (organization_id, model_id, competency_id)');

        $ensured = true;
    }

    private function ensureOrganizationPostsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_posts (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    code VARCHAR(100) NOT NULL,
    name VARCHAR(255) NOT NULL,
    user_id VARCHAR(191) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_org_posts_code (organization_id, code),
    INDEX idx_org_posts_org (organization_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Fail silently; subsequent queries will handle any errors.
        }

        $ensured = true;
    }

    private function ensureOrganizationCompetencyDimensionsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_competency_dimensions (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    name VARCHAR(191) NOT NULL,
    description TEXT NULL,
    is_public TINYINT(1) NOT NULL DEFAULT 0,
    user_id VARCHAR(191) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_org_competency_dimensions_name (organization_id, name),
    INDEX idx_org_competency_dimensions_org (organization_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Fail silently; subsequent operations will surface issues.
        }

        $ensured = true;
    }

    private function ensureOrganizationCompetenciesTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_competencies (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    competency_dimension_id BIGINT UNSIGNED NOT NULL,
    code VARCHAR(191) NOT NULL,
    title VARCHAR(255) NOT NULL,
    definition TEXT NULL,
    example_definition TEXT NULL,
    user_id VARCHAR(191) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_org_competencies_code (organization_id, code),
    INDEX idx_org_competencies_org (organization_id),
    INDEX idx_org_competencies_dimension (competency_dimension_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Fail silently; follow-up operations will surface issues.
        }

        $ensured = true;
    }

    private function ensureOrganizationCompetencyExamplesTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_competency_examples (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    competency_id BIGINT UNSIGNED NOT NULL,
    behavior_example TEXT NOT NULL,
    user_id VARCHAR(191) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_org_competency_examples_org (organization_id),
    INDEX idx_org_competency_examples_competency (competency_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Fail silently; subsequent operations will surface errors.
        }

        $ensured = true;
    }

    private function ensureOrganizationCompetencyFeaturesTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_competency_features (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    competency_id BIGINT UNSIGNED NOT NULL,
    code VARCHAR(191) NOT NULL,
    type VARCHAR(100) NOT NULL,
    description TEXT NULL,
    user_id VARCHAR(191) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_org_competency_features_code (organization_id, code),
    INDEX idx_org_competency_features_org (organization_id),
    INDEX idx_org_competency_features_competency (competency_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Fail silently; subsequent operations will surface errors.
        }

        $ensured = true;
    }

    private function ensureOrganizationRolesTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_roles (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    name VARCHAR(191) NOT NULL,
    description TEXT NULL,
    user_id VARCHAR(191) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_org_roles_name (organization_id, name),
    INDEX idx_org_roles_org (organization_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Fail silently; subsequent operations will surface issues.
        }

        $ensured = true;
    }

    private function ensureOrganizationRolePermissionsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_role_permissions (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    permission_key VARCHAR(120) NOT NULL,
    organization_role_id BIGINT UNSIGNED NOT NULL,
    is_allowed TINYINT(1) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_org_role_permission (organization_id, permission_key, organization_role_id),
    INDEX idx_org_role_permissions_org (organization_id),
    INDEX idx_org_role_permissions_role (organization_role_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // silent failure; later queries will surface the issue
        }

        $ensured = true;
    }

    private function ensureOrganizationExecutiveUnitsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_executive_units (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    name VARCHAR(255) NOT NULL,
    user_id VARCHAR(191) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_org_executive_units_name (organization_id, name),
    INDEX idx_org_executive_units_org (organization_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // silent failure; later queries will surface the issue
        }

        $ensured = true;
    }

    private function ensureOrganizationEvaluationSchedulesTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_evaluation_schedules (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    evaluation_title VARCHAR(255) NOT NULL,
    evaluation_date DATE NOT NULL,
    status VARCHAR(100) NULL,
    is_open TINYINT(1) DEFAULT 1,
    description TEXT NULL,
    created_by VARCHAR(191) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_org_eval_schedule_org_date (organization_id, evaluation_date),
    INDEX idx_org_eval_schedule_open (organization_id, is_open)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Silent failure; subsequent operations will surface issues.
        }

        $this->ensureOrganizationEvaluationSchedulesColumn('status', 'VARCHAR(100) NULL');
        $this->ensureOrganizationEvaluationSchedulesColumn('is_open', 'TINYINT(1) DEFAULT 1');
        $this->ensureOrganizationEvaluationSchedulesColumn('description', 'TEXT NULL');
        $this->ensureOrganizationEvaluationSchedulesColumn('created_by', 'VARCHAR(191) NULL');
        $this->ensureOrganizationEvaluationSchedulesIndex('idx_org_eval_schedule_org_date', 'INDEX idx_org_eval_schedule_org_date (organization_id, evaluation_date)');
        $this->ensureOrganizationEvaluationSchedulesIndex('idx_org_eval_schedule_open', 'INDEX idx_org_eval_schedule_open (organization_id, is_open)');

        $ensured = true;
    }

    private function ensureOrganizationEvaluationsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_evaluations (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    title VARCHAR(255) NOT NULL,
    evaluation_date DATE NULL,
    general_model VARCHAR(255) NULL,
    specific_model VARCHAR(255) NULL,
    evaluators_json LONGTEXT NULL,
    evaluatees_json LONGTEXT NULL,
    schedule_id BIGINT UNSIGNED NULL,
    created_by VARCHAR(191) NULL,
    updated_by VARCHAR(191) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_org_eval_matrix_org (organization_id),
    INDEX idx_org_eval_matrix_schedule (schedule_id),
    INDEX idx_org_eval_matrix_date (evaluation_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Silent failure; later queries will reveal issues.
        }

        $this->ensureOrganizationEvaluationsColumn('general_model', 'VARCHAR(255) NULL');
        $this->ensureOrganizationEvaluationsColumn('specific_model', 'VARCHAR(255) NULL');
        $this->ensureOrganizationEvaluationsColumn('evaluators_json', 'LONGTEXT NULL');
        $this->ensureOrganizationEvaluationsColumn('evaluatees_json', 'LONGTEXT NULL');
        $this->ensureOrganizationEvaluationsColumn('schedule_id', 'BIGINT UNSIGNED NULL');
        $this->ensureOrganizationEvaluationsColumn('updated_by', 'VARCHAR(191) NULL');
        $this->ensureOrganizationEvaluationsColumn('evaluation_date', 'DATE NULL');

        $this->ensureOrganizationEvaluationsIndex('idx_org_eval_matrix_org', 'INDEX idx_org_eval_matrix_org (organization_id)');
        $this->ensureOrganizationEvaluationsIndex('idx_org_eval_matrix_schedule', 'INDEX idx_org_eval_matrix_schedule (schedule_id)');
        $this->ensureOrganizationEvaluationsIndex('idx_org_eval_matrix_date', 'INDEX idx_org_eval_matrix_date (evaluation_date)');

        $ensured = true;
    }

    private function ensureOrganizationEvaluationToolScoresTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_evaluation_tool_scores (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    evaluation_id BIGINT UNSIGNED NOT NULL,
    tool_id BIGINT UNSIGNED NOT NULL,
    evaluatee_id BIGINT UNSIGNED NOT NULL,
    scorer_id BIGINT UNSIGNED NOT NULL DEFAULT 0,
    competency_id BIGINT UNSIGNED NOT NULL,
    example_id BIGINT UNSIGNED NULL,
    score_value DECIMAL(8,2) NOT NULL,
    score_note TEXT NULL,
    scoring_type VARCHAR(50) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_org_eval_tool_score (organization_id, evaluation_id, tool_id, evaluatee_id, scorer_id, competency_id, example_id),
    INDEX idx_org_eval_tool_score_lookup (organization_id, evaluation_id, tool_id, evaluatee_id, scorer_id),
    INDEX idx_org_eval_tool_score_competency (competency_id),
    INDEX idx_org_eval_tool_score_example (example_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Fail silently; subsequent operations will surface issues.
        }

        $ensured = true;
    }

    private function ensureOrganizationEvaluationFinalRecommendationsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_evaluation_final_recommendations (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    evaluation_id BIGINT UNSIGNED NOT NULL,
    evaluatee_id BIGINT UNSIGNED NOT NULL,
    recommendation_text LONGTEXT NULL,
    development_text LONGTEXT NULL,
    created_by VARCHAR(191) NULL,
    updated_by VARCHAR(191) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_org_eval_final_recommendation (organization_id, evaluation_id, evaluatee_id),
    INDEX idx_org_eval_final_lookup (organization_id, evaluation_id, evaluatee_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Silent failure; subsequent operations will surface issues.
        }

        $ensured = true;
    }

    private function ensureOrganizationEvaluationAgreedScoresTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_evaluation_agreed_scores (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    evaluation_id BIGINT UNSIGNED NOT NULL,
    evaluatee_id BIGINT UNSIGNED NOT NULL,
    competency_id BIGINT UNSIGNED NOT NULL,
    agreed_score DECIMAL(8,2) NULL,
    created_by VARCHAR(191) NULL,
    updated_by VARCHAR(191) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_org_eval_agreed_score (organization_id, evaluation_id, evaluatee_id, competency_id),
    INDEX idx_org_eval_agreed_lookup (organization_id, evaluation_id, evaluatee_id),
    INDEX idx_org_eval_agreed_competency (competency_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Silent failure; subsequent operations will surface later.
        }

        $ensured = true;
    }

    private function ensureOrganizationEvaluationToolAssignmentsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_evaluation_tool_assignments (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    evaluation_id BIGINT UNSIGNED NOT NULL,
    tool_id BIGINT UNSIGNED NOT NULL,
    sort_order INT UNSIGNED NOT NULL DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_org_eval_tool_assignment (evaluation_id, tool_id),
    INDEX idx_org_eval_tool_evaluation (evaluation_id),
    INDEX idx_org_eval_tool_tool (tool_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Silent failure; subsequent operations will surface issues.
        }

        $this->ensureOrganizationEvaluationToolAssignmentsColumn('sort_order', 'INT UNSIGNED NOT NULL DEFAULT 1');

        $ensured = true;
    }

    private function ensureOrganizationEvaluationMatrixVisibilityTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_evaluation_matrix_visibility (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    evaluation_id BIGINT UNSIGNED NOT NULL,
    tool_id BIGINT UNSIGNED NOT NULL,
    evaluator_id BIGINT UNSIGNED NOT NULL DEFAULT 0,
    evaluatee_id BIGINT UNSIGNED NOT NULL,
    is_visible TINYINT(1) NOT NULL DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_matrix_visibility (evaluation_id, tool_id, evaluator_id, evaluatee_id),
    INDEX idx_matrix_eval (evaluation_id),
    INDEX idx_matrix_tool (tool_id),
    INDEX idx_matrix_evaluator (evaluator_id),
    INDEX idx_matrix_evaluatee (evaluatee_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Silent failure; subsequent queries will surface issues if any remain.
        }

        $ensured = true;
    }

    private function ensureOrganizationEvaluationsColumn(string $column, string $definition): void
    {
        try {
            $columnExists = DatabaseHelper::fetchOne(
                'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND COLUMN_NAME = :column LIMIT 1',
                ['table' => 'organization_evaluations', 'column' => $column]
            );

            if (!$columnExists) {
                DatabaseHelper::query("ALTER TABLE organization_evaluations ADD COLUMN {$column} {$definition}");
            }
        } catch (Exception $exception) {
            // ignore
        }
    }

    private function ensureOrganizationEvaluationsIndex(string $indexName, string $definition): void
    {
        try {
            $indexExists = DatabaseHelper::fetchOne(
                'SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND INDEX_NAME = :index LIMIT 1',
                ['table' => 'organization_evaluations', 'index' => $indexName]
            );

            if (!$indexExists) {
                DatabaseHelper::query("ALTER TABLE organization_evaluations ADD {$definition}");
            }
        } catch (Exception $exception) {
            // ignore
        }
    }

    private function ensureOrganizationMbtiTypesColumn(string $column, string $definition): void
    {
        try {
            $columnExists = DatabaseHelper::fetchOne(
                'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND COLUMN_NAME = :column LIMIT 1',
                ['table' => 'organization_mbti_types', 'column' => $column]
            );

            if (!$columnExists) {
                DatabaseHelper::query("ALTER TABLE organization_mbti_types ADD COLUMN {$column} {$definition}");
            }
        } catch (Exception $exception) {
            // ignore silently
        }
    }

    private function ensureOrganizationMbtiTypesIndex(string $indexName, string $definition): void
    {
        try {
            $indexExists = DatabaseHelper::fetchOne(
                'SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND INDEX_NAME = :index LIMIT 1',
                ['table' => 'organization_mbti_types', 'index' => $indexName]
            );

            if (!$indexExists) {
                DatabaseHelper::query("ALTER TABLE organization_mbti_types ADD {$definition}");
            }
        } catch (Exception $exception) {
            // ignore silently
        }
    }

    private function ensureOrganizationMbtiTypesUnique(string $indexName, string $definition): void
    {
        $this->ensureOrganizationMbtiTypesIndex($indexName, $definition);
    }

    private function ensureOrganizationEvaluationToolAssignmentsColumn(string $column, string $definition): void
    {
        try {
            $columnExists = DatabaseHelper::fetchOne(
                'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND COLUMN_NAME = :column LIMIT 1',
                ['table' => 'organization_evaluation_tool_assignments', 'column' => $column]
            );

            if (!$columnExists) {
                DatabaseHelper::query("ALTER TABLE organization_evaluation_tool_assignments ADD COLUMN {$column} {$definition}");
            }
        } catch (Exception $exception) {
            // ignore
        }
    }

    private function ensureOrganizationCompetencyModelsColumn(string $column, string $definition): void
    {
        try {
            $columnExists = DatabaseHelper::fetchOne(
                'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND COLUMN_NAME = :column LIMIT 1',
                ['table' => 'organization_competency_models', 'column' => $column]
            );

            if (!$columnExists) {
                DatabaseHelper::query("ALTER TABLE organization_competency_models ADD COLUMN {$column} {$definition}");
            }
        } catch (Exception $exception) {
            // ignore silently
        }
    }

    private function ensureOrganizationCompetencyModelsIndex(string $indexName, string $definition): void
    {
        try {
            $indexExists = DatabaseHelper::fetchOne(
                'SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND INDEX_NAME = :index LIMIT 1',
                ['table' => 'organization_competency_models', 'index' => $indexName]
            );

            if (!$indexExists) {
                DatabaseHelper::query("ALTER TABLE organization_competency_models ADD {$definition}");
            }
        } catch (Exception $exception) {
            // ignore silently
        }
    }

    private function ensureOrganizationCompetencyModelsUnique(string $indexName, string $definition): void
    {
        $this->ensureOrganizationCompetencyModelsIndex($indexName, $definition);
    }

    private function ensureOrganizationCompetencyModelItemsColumn(string $column, string $definition): void
    {
        try {
            $columnExists = DatabaseHelper::fetchOne(
                'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND COLUMN_NAME = :column LIMIT 1',
                ['table' => 'organization_competency_model_items', 'column' => $column]
            );

            if (!$columnExists) {
                DatabaseHelper::query("ALTER TABLE organization_competency_model_items ADD COLUMN {$column} {$definition}");
            }
        } catch (Exception $exception) {
            // ignore silently
        }
    }

    private function ensureOrganizationCompetencyModelItemsIndex(string $indexName, string $definition): void
    {
        try {
            $indexExists = DatabaseHelper::fetchOne(
                'SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND INDEX_NAME = :index LIMIT 1',
                ['table' => 'organization_competency_model_items', 'index' => $indexName]
            );

            if (!$indexExists) {
                DatabaseHelper::query("ALTER TABLE organization_competency_model_items ADD {$definition}");
            }
        } catch (Exception $exception) {
            // ignore silently
        }
    }

    private function ensureOrganizationCompetencyModelItemsUnique(string $indexName, string $definition): void
    {
        $this->ensureOrganizationCompetencyModelItemsIndex($indexName, $definition);
    }

    private function getMbtiFeatureCategories(): array
    {
        return [
            'personality_traits' => [
                'label' => 'ویژگی‌های شخصیتی',
                'icon' => 'sparkles-outline',
                'description' => 'مروری بر ویژگی‌های رفتاری و شخصیتی عمومی این تیپ.',
            ],
            'relationships' => [
                'label' => 'در رابطه با دیگران',
                'icon' => 'people-outline',
                'description' => 'نحوه تعامل این تیپ با دیگران در محیط‌های مختلف.',
            ],
            'workplace' => [
                'label' => 'در محل کار',
                'icon' => 'briefcase-outline',
                'description' => 'الگوهای رفتاری، ترجیحات و شیوه‌های عمل در محیط کاری.',
            ],
            'strengths' => [
                'label' => 'نقاط قوت کاری',
                'icon' => 'trending-up-outline',
                'description' => 'توانمندی‌ها و مزیت‌های شغلی این تیپ.',
            ],
            'weaknesses' => [
                'label' => 'نقاط ضعف کاری',
                'icon' => 'warning-outline',
                'description' => 'چالش‌ها و نقاط قابل بهبود در محیط کار.',
            ],
            'development' => [
                'label' => 'پیشنهادات توسعه فردی',
                'icon' => 'bulb-outline',
                'description' => 'پیشنهادها و مسیرهای رشد و یادگیری برای این تیپ.',
            ],
        ];
    }

    private function getMbtiPresetSeedData(): array
    {
        return [
            [
                'type_code' => 'INTJ',
                'title' => 'معمار آینده‌نگر',
                'summary' => 'تحلیل‌گری راهبردی که روی آینده تمرکز می‌کند و ساختارهای تازه می‌سازد.',
                'functions' => 'Ni > Te > Fi > Se',
                'categories' => ['استراتژیست', 'تحلیلگر'],
                'description' => 'INTJ ها با نگاه سیستماتیک و تمایل به پیش‌بینی نتایج، معمولا پروژه‌ها را از مرحله ایده تا پیاده‌سازی هدایت می‌کنند.',
                'features' => [
                    ['category' => 'personality_traits', 'text' => 'ذهنی ساختارمند دارد و الگوهای پنهان را به سرعت شناسایی می‌کند.', 'sort_order' => 10],
                    ['category' => 'relationships', 'text' => 'در روابط نزدیک با صداقت و تعهد بالا ظاهر می‌شود و به فضای شخصی خود اهمیت می‌دهد.', 'sort_order' => 20],
                    ['category' => 'workplace', 'text' => 'در محیط‌های مستقل و هدف‌محور می‌درخشد و برنامه‌های بلندمدت طراحی می‌کند.', 'sort_order' => 30],
                    ['category' => 'strengths', 'text' => 'توان خلق استراتژی‌های نوآورانه و تصمیم‌گیری منطقی زیر فشار را دارد.', 'sort_order' => 40],
                    ['category' => 'weaknesses', 'text' => 'گاهی احساسات دیگران را نادیده می‌گیرد و بازخوردهای لحظه‌ای را سرد دریافت می‌کند.', 'sort_order' => 50],
                    ['category' => 'development', 'text' => 'به اشتراک‌گذاری چشم‌انداز و دعوت از تیم برای مشارکت در مراحل اولیه به رشد او کمک می‌کند.', 'sort_order' => 60],
                ],
            ],
            [
                'type_code' => 'INTP',
                'title' => 'تحلیل‌گر جستجوگر',
                'summary' => 'متفکری کنجکاو که به دنبال منطق پشت هر پدیده است.',
                'functions' => 'Ti > Ne > Si > Fe',
                'categories' => ['نوآور', 'اندیشمند'],
                'description' => 'INTP ها عاشق حل معماهای پیچیده و ساخت مدل‌های مفهومی هستند.',
                'features' => [
                    ['category' => 'personality_traits', 'text' => 'به طور طبیعی اهل سؤال پرسیدن و آزمایش فرضیه‌های تازه است.', 'sort_order' => 10],
                    ['category' => 'relationships', 'text' => 'روابط عمیق اما محدود برقرار می‌کند و از مکالمات فکری طولانی لذت می‌برد.', 'sort_order' => 20],
                    ['category' => 'workplace', 'text' => 'در پروژه‌هایی که آزادی تحلیل و آزمون فراهم است بهترین عملکرد را دارد.', 'sort_order' => 30],
                    ['category' => 'strengths', 'text' => 'در تشریح مسائل پیچیده و یافتن راه‌حل‌های خلاقانه توانمند است.', 'sort_order' => 40],
                    ['category' => 'weaknesses', 'text' => 'گاهی تصمیم‌گیری عملی را به تعویق می‌اندازد و در جزئیات غرق می‌شود.', 'sort_order' => 50],
                    ['category' => 'development', 'text' => 'تعیین مهلت برای ایده‌ها و درخواست بازخورد کاربردی تعادل بیشتری ایجاد می‌کند.', 'sort_order' => 60],
                ],
            ],
            [
                'type_code' => 'ENTJ',
                'title' => 'رهبر راهبردی',
                'summary' => 'سازمان‌دهنده‌ای پرانرژی که اهداف بلندپروازانه را دنبال می‌کند.',
                'functions' => 'Te > Ni > Se > Fi',
                'categories' => ['رهبر', 'سازمان‌دهنده'],
                'description' => 'ENTJ ها ساختار و نظم را به تیم می‌آورند و برای نتایج ملموس تلاش می‌کنند.',
                'features' => [
                    ['category' => 'personality_traits', 'text' => 'قاطع و هدف‌گراست و به سرعت اولویت‌ها را مشخص می‌کند.', 'sort_order' => 10],
                    ['category' => 'relationships', 'text' => 'در جمع نقش هدایت‌کننده می‌گیرد و از گفت‌وگوی صریح استقبال می‌کند.', 'sort_order' => 20],
                    ['category' => 'workplace', 'text' => 'ترجیح می‌دهد تیم‌های بزرگ و پروژه‌های پیچیده را مدیریت کند.', 'sort_order' => 30],
                    ['category' => 'strengths', 'text' => 'در تعیین اهداف روشن و بسیج منابع برای رسیدن به آن‌ها مهارت دارد.', 'sort_order' => 40],
                    ['category' => 'weaknesses', 'text' => 'سرعت بالای عمل او گاهی باعث می‌شود به احساسات دیگران توجه کافی نکند.', 'sort_order' => 50],
                    ['category' => 'development', 'text' => 'تمرین گوش‌دادن فعال و تفویض اختیارات با اعتماد به اعضای تیم نتیجه بهتری می‌دهد.', 'sort_order' => 60],
                ],
            ],
            [
                'type_code' => 'ENTP',
                'title' => 'مخترع فرصت‌جو',
                'summary' => 'ایده‌پردازی پرانرژی که عاشق چالش و گفت‌وگوی خلاق است.',
                'functions' => 'Ne > Ti > Fe > Si',
                'categories' => ['نوآور', 'چالشگر'],
                'description' => 'ENTP ها با نگاه فرصت‌محور و قدرت بداهه‌گویی، مسیرهای تازه می‌سازند.',
                'features' => [
                    ['category' => 'personality_traits', 'text' => 'با ذهنی سیال و کنجکاو به سرعت بین ایده‌ها جابه‌جا می‌شود.', 'sort_order' => 10],
                    ['category' => 'relationships', 'text' => 'ارتباطات پرانرژی ایجاد می‌کند و دیگران را به بحث سازنده دعوت می‌کند.', 'sort_order' => 20],
                    ['category' => 'workplace', 'text' => 'در محیط‌های پویا و پروژه‌های نوآورانه انگیزه می‌گیرد.', 'sort_order' => 30],
                    ['category' => 'strengths', 'text' => 'توانایی دیدن چندین رویکرد و تلفیق راه‌حل‌های متفاوت را دارد.', 'sort_order' => 40],
                    ['category' => 'weaknesses', 'text' => 'ممکن است تمرکز روی اجرای جزئیات را از دست بدهد و پروژه‌ها نیمه‌تمام بماند.', 'sort_order' => 50],
                    ['category' => 'development', 'text' => 'ایجاد ساختار پیگیری و همکاری با افراد جزئی‌نگر به تعادل او کمک می‌کند.', 'sort_order' => 60],
                ],
            ],
            [
                'type_code' => 'INFJ',
                'title' => 'راهنمای الهام‌بخش',
                'summary' => 'شخصیتی آرام و هدفمند که به معنا و رشد انسان‌ها اهمیت می‌دهد.',
                'functions' => 'Ni > Fe > Ti > Se',
                'categories' => ['الهام‌بخش', 'حامی'],
                'description' => 'INFJ ها با شهود قوی و همدلی بالا به افراد کمک می‌کنند پتانسیل خود را بشناسند.',
                'features' => [
                    ['category' => 'personality_traits', 'text' => 'چشم‌انداز عمیق نسبت به ارزش‌ها و الگوهای انسانی دارد.', 'sort_order' => 10],
                    ['category' => 'relationships', 'text' => 'روابط صمیمی و حمایت‌کننده می‌سازد و به نیازهای عاطفی توجه می‌کند.', 'sort_order' => 20],
                    ['category' => 'workplace', 'text' => 'در نقش‌های توسعه افراد و برنامه‌ریزی تحول فرهنگی موفق است.', 'sort_order' => 30],
                    ['category' => 'strengths', 'text' => 'توان ایجاد هم‌سویی حول یک هدف معنا محور را دارد.', 'sort_order' => 40],
                    ['category' => 'weaknesses', 'text' => 'گاهی از رویارویی مستقیم با تعارض‌ها اجتناب می‌کند.', 'sort_order' => 50],
                    ['category' => 'development', 'text' => 'بیان شفاف انتظارات و مراقبت از مرزهای شخصی او را متعادل نگه می‌دارد.', 'sort_order' => 60],
                ],
            ],
            [
                'type_code' => 'INFP',
                'title' => 'آفریننده معنادار',
                'summary' => 'آرمان‌گرایی آرام که طراحی تجربه‌های انسانی را دوست دارد.',
                'functions' => 'Fi > Ne > Si > Te',
                'categories' => ['خلاق', 'ارزش‌محور'],
                'description' => 'INFP ها ارزش‌های درونی را محور تصمیم‌گیری قرار می‌دهند و به دنبال تأثیر مثبت هستند.',
                'features' => [
                    ['category' => 'personality_traits', 'text' => 'خیال‌پرداز، حساس و وفادار به باورهای شخصی است.', 'sort_order' => 10],
                    ['category' => 'relationships', 'text' => 'ارتباطات صمیمی و صادقانه را ترجیح می‌دهد و شنونده خوبی است.', 'sort_order' => 20],
                    ['category' => 'workplace', 'text' => 'در پروژه‌های با مأموریت انسانی یا هنری انگیزه می‌گیرد.', 'sort_order' => 30],
                    ['category' => 'strengths', 'text' => 'توان خلق داستان‌ها و پیام‌های الهام‌بخش برای دیگران را دارد.', 'sort_order' => 40],
                    ['category' => 'weaknesses', 'text' => 'گاهی به دلیل ایده‌آل‌گرایی تصمیم‌گیری عملی را به تأخیر می‌اندازد.', 'sort_order' => 50],
                    ['category' => 'development', 'text' => 'تعیین اولویت و تقسیم پروژه‌ها به گام‌های کوچک‌تر او را پیش می‌برد.', 'sort_order' => 60],
                ],
            ],
            [
                'type_code' => 'ENFJ',
                'title' => 'رهبر همدل',
                'summary' => 'هماهنگ‌کننده‌ای اجتماعی که تیم‌ها را حول هدف مشترک جمع می‌کند.',
                'functions' => 'Fe > Ni > Se > Ti',
                'categories' => ['رهبر', 'حامی'],
                'description' => 'ENFJ ها با انرژی و همدلی بالا، شبکه‌های انسانی را فعال می‌کنند.',
                'features' => [
                    ['category' => 'personality_traits', 'text' => 'به سرعت با دیگران ارتباط برقرار می‌کند و انگیزه‌بخش است.', 'sort_order' => 10],
                    ['category' => 'relationships', 'text' => 'حمایت عاطفی مداوم ارائه می‌دهد و از پیشرفت اطرافیان خوشحال می‌شود.', 'sort_order' => 20],
                    ['category' => 'workplace', 'text' => 'در مدیریت تغییر و توسعه استعدادها عملکرد عالی دارد.', 'sort_order' => 30],
                    ['category' => 'strengths', 'text' => 'قدرت ایجاد فرهنگ تیمی مثبت و همسو را دارد.', 'sort_order' => 40],
                    ['category' => 'weaknesses', 'text' => 'ممکن است نیازهای شخصی خود را قربانی کند و دچار خستگی عاطفی شود.', 'sort_order' => 50],
                    ['category' => 'development', 'text' => 'تعیین حد و زمان استراحت برای حفظ انرژی حیاتی است.', 'sort_order' => 60],
                ],
            ],
            [
                'type_code' => 'ENFP',
                'title' => 'پیشرو الهام‌بخش',
                'summary' => 'ماجراجویی خلاق که فرصت‌های جدید برای رشد کشف می‌کند.',
                'functions' => 'Ne > Fi > Te > Si',
                'categories' => ['نوآور', 'ارتباط‌ساز'],
                'description' => 'ENFP ها با شور و اشتیاق خود دیگران را به حرکت در مسیرهای تازه دعوت می‌کنند.',
                'features' => [
                    ['category' => 'personality_traits', 'text' => 'سرشار از ایده و انرژی است و از تغییر استقبال می‌کند.', 'sort_order' => 10],
                    ['category' => 'relationships', 'text' => 'دوستی‌های پرنشاط می‌سازد و به ارزش‌های مشترک توجه دارد.', 'sort_order' => 20],
                    ['category' => 'workplace', 'text' => 'در پروژه‌های استارتاپی یا نقش‌های توسعه کسب‌وکار می‌درخشد.', 'sort_order' => 30],
                    ['category' => 'strengths', 'text' => 'قدرت ترغیب و روایت‌گری او تیم را به اقدام سوق می‌دهد.', 'sort_order' => 40],
                    ['category' => 'weaknesses', 'text' => 'گاهی تمرکز پایدار روی یک پروژه برایش دشوار است.', 'sort_order' => 50],
                    ['category' => 'development', 'text' => 'ایجاد سیستم پیگیری و ثبت تعهدات کمک می‌کند ایده‌ها به نتیجه برسد.', 'sort_order' => 60],
                ],
            ],
            [
                'type_code' => 'ISTJ',
                'title' => 'سرپرست مسئول',
                'summary' => 'عملگرا و منظم که روی اجرای دقیق فرآیندها تمرکز دارد.',
                'functions' => 'Si > Te > Fi > Ne',
                'categories' => ['مدیر عملیات', 'تحلیلگر'],
                'description' => 'ISTJ ها با ساختار و نظم، کیفیت و ثبات در سازمان ایجاد می‌کنند.',
                'features' => [
                    ['category' => 'personality_traits', 'text' => 'به جزئیات توجه ویژه دارد و به تعهدات پایبند است.', 'sort_order' => 10],
                    ['category' => 'relationships', 'text' => 'در ارتباطات صادق و قابل اتکا است هرچند احساساتش را دیر نشان می‌دهد.', 'sort_order' => 20],
                    ['category' => 'workplace', 'text' => 'در نقش‌های کنترل کیفیت، مالی یا امور اجرایی می‌درخشد.', 'sort_order' => 30],
                    ['category' => 'strengths', 'text' => 'در پیاده‌سازی استانداردها و حفظ ثبات عملکرد قدرتمند است.', 'sort_order' => 40],
                    ['category' => 'weaknesses', 'text' => 'ممکن است در مواجهه با تغییرات ناگهانی مقاومت نشان دهد.', 'sort_order' => 50],
                    ['category' => 'development', 'text' => 'تقویت تفکر نوآورانه و پذیرش بازخوردهای متفاوت به انعطاف او کمک می‌کند.', 'sort_order' => 60],
                ],
            ],
            [
                'type_code' => 'ISFJ',
                'title' => 'حامی دقیق',
                'summary' => 'مهربان و وظیفه‌شناس که از دیگران با دقت محافظت می‌کند.',
                'functions' => 'Si > Fe > Ti > Ne',
                'categories' => ['حامی', 'هماهنگ‌کننده'],
                'description' => 'ISFJ ها با حساسیت نسبت به نیازهای انسانی محیطی امن و پایدار می‌سازند.',
                'features' => [
                    ['category' => 'personality_traits', 'text' => 'صبور و دلسوز است و جزئیات مهم را فراموش نمی‌کند.', 'sort_order' => 10],
                    ['category' => 'relationships', 'text' => 'روابط گرم و وفادار ایجاد می‌کند و نیازهای عملی اطرافیان را تأمین می‌کند.', 'sort_order' => 20],
                    ['category' => 'workplace', 'text' => 'در خدمات مشتری، منابع انسانی یا پشتیبانی ارزش افزوده ایجاد می‌کند.', 'sort_order' => 30],
                    ['category' => 'strengths', 'text' => 'توانایی گوش‌دادن عمیق و حل مسالمت‌آمیز مسائل را دارد.', 'sort_order' => 40],
                    ['category' => 'weaknesses', 'text' => 'ممکن است کارهای اضافی را قبول کند و از گفتن "نه" اجتناب کند.', 'sort_order' => 50],
                    ['category' => 'development', 'text' => 'یادگیری اولویت‌بندی و درخواست کمک برای جلوگیری از فرسودگی لازم است.', 'sort_order' => 60],
                ],
            ],
            [
                'type_code' => 'ESTJ',
                'title' => 'مدیر نتیجه‌گرا',
                'summary' => 'سازمان‌دهنده‌ای قاطع که استانداردهای روشن تعیین می‌کند.',
                'functions' => 'Te > Si > Ne > Fi',
                'categories' => ['رهبر اجرایی', 'سازمان‌دهنده'],
                'description' => 'ESTJ ها ساختار، قوانین و پیگیری دقیق را به تیم می‌آورند.',
                'features' => [
                    ['category' => 'personality_traits', 'text' => 'در تصمیم‌گیری سریع است و از نظم لذت می‌برد.', 'sort_order' => 10],
                    ['category' => 'relationships', 'text' => 'به صداقت مستقیم اهمیت می‌دهد و انتظار دارد دیگران طبق وعده عمل کنند.', 'sort_order' => 20],
                    ['category' => 'workplace', 'text' => 'در مدیریت عملیات، پروژه و نظارت عالی عمل می‌کند.', 'sort_order' => 30],
                    ['category' => 'strengths', 'text' => 'توانایی تبدیل برنامه‌ها به نتایج و پایش مستمر دارد.', 'sort_order' => 40],
                    ['category' => 'weaknesses', 'text' => 'ممکن است انعطاف‌پذیری پایین داشته باشد و نسبت به ایده‌های متفاوت مقاومت کند.', 'sort_order' => 50],
                    ['category' => 'development', 'text' => 'شنیدن دیدگاه‌های جایگزین و پذیرش تغییرات تدریجی مفید است.', 'sort_order' => 60],
                ],
            ],
            [
                'type_code' => 'ESFJ',
                'title' => 'هماهنگ‌کننده اجتماعی',
                'summary' => 'انرژی اجتماعی و توجه به جزئیات را برای رضایت دیگران تلفیق می‌کند.',
                'functions' => 'Fe > Si > Ne > Ti',
                'categories' => ['خدمت‌رسان', 'ارتباط‌ساز'],
                'description' => 'ESFJ ها با مدیریت مراسم و پشتیبانی تیمی محیطی صمیمی ایجاد می‌کنند.',
                'features' => [
                    ['category' => 'personality_traits', 'text' => 'به سرعت نیازهای دیگران را تشخیص می‌دهد و کمک‌رسان است.', 'sort_order' => 10],
                    ['category' => 'relationships', 'text' => 'روابط گسترده و حمایتی ایجاد می‌کند و تعارض‌ها را میانجی‌گری می‌کند.', 'sort_order' => 20],
                    ['category' => 'workplace', 'text' => 'در هماهنگی رویدادها، آموزش یا خدمات اجتماعی موفق است.', 'sort_order' => 30],
                    ['category' => 'strengths', 'text' => 'قدرت ایجاد حس تعلق و حفظ نظم تیمی را دارد.', 'sort_order' => 40],
                    ['category' => 'weaknesses', 'text' => 'گاهی بیش از حد نگران نظر دیگران می‌شود و تصمیمات را به تأخیر می‌اندازد.', 'sort_order' => 50],
                    ['category' => 'development', 'text' => 'تعریف مرزهای روشن و توجه به خواسته‌های شخصی توازن ایجاد می‌کند.', 'sort_order' => 60],
                ],
            ],
            [
                'type_code' => 'ISTP',
                'title' => 'حل‌مسئله چابک',
                'summary' => 'تحلیلگر عمل‌گرا که مسائل فنی را با آرامش حل می‌کند.',
                'functions' => 'Ti > Se > Ni > Fe',
                'categories' => ['متخصص فنی', 'تحلیلگر'],
                'description' => 'ISTP ها با کنجکاوی عملی و مهارت‌های فنی بالا در شرایط بحرانی آرام می‌مانند.',
                'features' => [
                    ['category' => 'personality_traits', 'text' => 'ذهن تحلیلی و دست‌های توانمند برای آزمودن راه‌حل‌های عملی دارد.', 'sort_order' => 10],
                    ['category' => 'relationships', 'text' => 'در روابط آزادانه عمل می‌کند و به استقلال خود و دیگران احترام می‌گذارد.', 'sort_order' => 20],
                    ['category' => 'workplace', 'text' => 'در نقش‌های مهندسی، تحلیل داده یا عملیات میدانی موثر است.', 'sort_order' => 30],
                    ['category' => 'strengths', 'text' => 'در تجزیه سریع مسائل و ارائه راهکارهای بهینه شهرت دارد.', 'sort_order' => 40],
                    ['category' => 'weaknesses', 'text' => 'ممکن است نسبت به روال‌های اداری و گزارش‌دهی بی‌حوصله باشد.', 'sort_order' => 50],
                    ['category' => 'development', 'text' => 'تقویت مهارت‌های ارتباطی و برنامه‌ریزی درازمدت تعادل ایجاد می‌کند.', 'sort_order' => 60],
                ],
            ],
            [
                'type_code' => 'ISFP',
                'title' => 'هنرمند آرام',
                'summary' => 'خلاقیت لطیف و حساسیت به تجربه‌های زیبایی‌شناختی دارد.',
                'functions' => 'Fi > Se > Ni > Te',
                'categories' => ['خلاق', 'تجربه‌پرداز'],
                'description' => 'ISFP ها با درک عمیق از لحظه حال و ارزش‌های شخصی هنر و خدمات معنادار خلق می‌کنند.',
                'features' => [
                    ['category' => 'personality_traits', 'text' => 'انعطاف‌پذیر و آرام است و از بیان خلاقانه احساسات لذت می‌برد.', 'sort_order' => 10],
                    ['category' => 'relationships', 'text' => 'با مهربانی و حضور واقعی اعتماد دیگران را جلب می‌کند.', 'sort_order' => 20],
                    ['category' => 'workplace', 'text' => 'در طراحی، هنر، مراقبت‌های فردی یا گردشگری تجربه‌محور موفق است.', 'sort_order' => 30],
                    ['category' => 'strengths', 'text' => 'توان خلق تجربه‌های اصیل و انسانی را دارد.', 'sort_order' => 40],
                    ['category' => 'weaknesses', 'text' => 'ممکن است برنامه‌ریزی بلندمدت را به تعویق بیندازد و از تعارض دوری کند.', 'sort_order' => 50],
                    ['category' => 'development', 'text' => 'تعیین اهداف مشخص و پذیرش بازخورد مستقیم مسیر رشد او را روشن می‌کند.', 'sort_order' => 60],
                ],
            ],
            [
                'type_code' => 'ESTP',
                'title' => 'کارآفرین میدانی',
                'summary' => 'پرتحرک و فرصت‌محور که در لحظه تصمیم می‌گیرد.',
                'functions' => 'Se > Ti > Fe > Ni',
                'categories' => ['عملگرا', 'چالشگر'],
                'description' => 'ESTP ها با جسارت و تمرکز بر اقدام، بحران‌ها را به فرصت تبدیل می‌کنند.',
                'features' => [
                    ['category' => 'personality_traits', 'text' => 'پرانرژی و ماجراجوست و تحت فشار آرام می‌ماند.', 'sort_order' => 10],
                    ['category' => 'relationships', 'text' => 'ارتباطات سرزنده می‌سازد و دیگران را به تجربه‌های تازه دعوت می‌کند.', 'sort_order' => 20],
                    ['category' => 'workplace', 'text' => 'در فروش، مذاکره یا مدیریت عملیات میدانی نتیجه می‌دهد.', 'sort_order' => 30],
                    ['category' => 'strengths', 'text' => 'در تصمیم‌گیری سریع و حل مشکل در لحظه مهارت دارد.', 'sort_order' => 40],
                    ['category' => 'weaknesses', 'text' => 'ممکن است برنامه‌ریزی طولانی‌مدت را نادیده بگیرد یا ریسک‌های غیرضروری بپذیرد.', 'sort_order' => 50],
                    ['category' => 'development', 'text' => 'تقویت مهارت تحلیل ریسک و مستندسازی دستاوردها مسیر رشد اوست.', 'sort_order' => 60],
                ],
            ],
            [
                'type_code' => 'ESFP',
                'title' => 'مجری پرانرژی',
                'summary' => 'سرشار از هیجان و تمرکز بر تجربه‌های انسانی مثبت است.',
                'functions' => 'Se > Fi > Te > Ni',
                'categories' => ['ارتباط‌ساز', 'تفریح‌آفرین'],
                'description' => 'ESFP ها فضای کاری را شاد می‌کنند و تیم را به مشارکت فعال تشویق می‌کنند.',
                'features' => [
                    ['category' => 'personality_traits', 'text' => 'خوش‌برخورد و انعطاف‌پذیر است و توجه جمع را جلب می‌کند.', 'sort_order' => 10],
                    ['category' => 'relationships', 'text' => 'با محبت و حضور پرشور ارتباطات عاطفی عمیق شکل می‌دهد.', 'sort_order' => 20],
                    ['category' => 'workplace', 'text' => 'در بازاریابی تجربی، منابع انسانی یا سرگرمی عملکرد بالایی دارد.', 'sort_order' => 30],
                    ['category' => 'strengths', 'text' => 'در ایجاد انگیزه و انرژی‌بخشی به گروه مهارت دارد.', 'sort_order' => 40],
                    ['category' => 'weaknesses', 'text' => 'گاهی مدیریت منابع یا زمان‌بندی را جدی نمی‌گیرد.', 'sort_order' => 50],
                    ['category' => 'development', 'text' => 'تنظیم برنامه مالی و استفاده از ابزارهای برنامه‌ریزی به او کمک می‌کند.', 'sort_order' => 60],
                ],
            ],
        ];
    }

    private function getDiscTypeOptions(): array
    {
        return [
            ['code' => 'D', 'label' => 'D - تسلط'],
            ['code' => 'I', 'label' => 'I - تأثیرگذاری'],
            ['code' => 'S', 'label' => 'S - ثبات'],
            ['code' => 'C', 'label' => 'C - انضباط و دقت'],
        ];
    }

    private function getDiscSecondaryTypeOptions(): array
    {
        return [
            ['code' => 'D/I', 'label' => 'D/I'],
            ['code' => 'D/S', 'label' => 'D/S'],
            ['code' => 'D/C', 'label' => 'D/C'],
            ['code' => 'I/D', 'label' => 'I/D'],
            ['code' => 'I/S', 'label' => 'I/S'],
            ['code' => 'I/C', 'label' => 'I/C'],
            ['code' => 'S/D', 'label' => 'S/D'],
            ['code' => 'S/I', 'label' => 'S/I'],
            ['code' => 'S/C', 'label' => 'S/C'],
            ['code' => 'C/D', 'label' => 'C/D'],
            ['code' => 'C/S', 'label' => 'C/S'],
            ['code' => 'C/I', 'label' => 'C/I'],
        ];
    }

    private function getDiscTypeOptionsForScope(string $scope): array
    {
        return $scope === 'secondary'
            ? $this->getDiscSecondaryTypeOptions()
            : $this->getDiscTypeOptions();
    }

    private function getDiscPresetSeedData(): array
    {
        return [
            [
                'scope' => 'primary',
                'disc_type_code' => 'D',
                'short_description' => 'رهبر نتیجه‌گرا و جسوری که با سرعت بالا حرکت می‌کند و فشارها را به فرصت تبدیل می‌کند.',
                'general_tendencies' => "به چالش کشیدن وضعیت موجود و حرکت رو به جلو.
تصمیم‌گیری سریع بر اساس تصویر کلان و شهود شخصی.
تمایل به رقابت، کنترل و کسب دستاوردهای ملموس.",
                'work_preferences' => "محیط‌های پرشتاب، نتیجه‌محور و همراه با استقلال عمل.
دسترسی مستقیم به تصمیم‌گیران و منابع قدرت.
سنجش موفقیت بر اساس شاخص‌های عملکرد و دستاوردهای محسوس.",
                'effectiveness_requirements' => "اهداف مشخص و قابل اندازه‌گیری، خطوط زمانی شفاف و اختیار اجرا.
بازخورد مستقیم و بدون ابهام.
دسترسی به منابع لازم برای تسریع تصمیم‌ها.",
                'companion_requirements' => "هم‌تیمی‌هایی که جزئیات و کیفیت را پوشش دهند و آماده چالش‌های فکری باشند.
افرادی که بدون رنجیدن، بازخورد صریح می‌دهند و تعارض سازنده را می‌پذیرند.",
                'behavior_overview' => "تیپ D با جسارت، قاطعیت و تمرکز بر نتیجه شناخته می‌شود. این افراد تاب‌آوری بالایی در برابر فشار دارند، تصمیم‌ها را سریع می‌گیرند و دوست دارند مسیر را خودشان تعیین کنند. در مدیریت بحران جلوتر از دیگران حرکت می‌کنند و ترجیح می‌دهند به جای پرداختن به جزئیات، راه‌حل‌های کلان و استراتژیک ارائه دهند. چالش اصلی آن‌ها ایجاد تعادل میان سرعت و دقت و شنیدن دیدگاه‌های متفاوت است تا بهترین نتیجه پایدار حاصل شود.",
            ],
            [
                'scope' => 'primary',
                'disc_type_code' => 'I',
                'short_description' => 'ارتباط‌گر الهام‌بخش و خوش‌بین که با انرژی و نفوذ کلام دیگران را همراه می‌کند.',
                'general_tendencies' => "ایجاد شبکه‌ای گسترده از ارتباطات گرم و صمیمی.
نشان دادن اشتیاق، خلاقیت و امید حتی در شرایط مبهم.
ترجیح گفتگوهای گروهی نسبت به تحلیل‌های طولانی و رسمی.",
                'work_preferences' => "محیط‌های اجتماعی، پویا و مبتنی بر تعامل انسانی.
فرصت برای طرح ایده‌های نو و دریافت انرژی از تیم.
آزادی در شیوه ارائه و نمایش دستاوردها.",
                'effectiveness_requirements' => "قدردانی صریح، فضا برای خلاقیت، و بازخورد مثبت همراه با پیشنهادهای بهبود.
دسترسی به اطلاعات تازه برای روایتگری و متقاعدسازی بهتر.",
                'companion_requirements' => "افرادی که ساختار و زمان‌بندی را مدیریت کنند و در کنار آن روحیه حمایتی داشته باشند.
هم‌تیمی‌هایی که گوش شنوا داشته باشند و در تبدیل ایده به اجرا کمک کنند.",
                'behavior_overview' => "تیپ I به واسطه انرژی اجتماعی بالا و توانایی متقاعدسازی شناخته می‌شود. آن‌ها انگیزه‌بخش تیم هستند و با روایت‌های جذاب، امید و حرکت ایجاد می‌کنند. تمرکز اصلی‌شان بر تجربه انسانی و تأثیری است که بر دیگران می‌گذارند. چالش اصلی، حفظ تمرکز روی جزئیات اجرایی و مدیریت زمان است؛ بنابراین نیاز به ساختار حمایتی و همکارانی دارند که پیگیری و تکمیل کارها را تسهیل کنند.",
            ],
            [
                'scope' => 'primary',
                'disc_type_code' => 'S',
                'short_description' => 'حامی وفادار و باثباتی که فضای امن، همدل و هماهنگ برای تیم می‌سازد.',
                'general_tendencies' => "گوش‌دادن فعال و ایجاد اعتماد در روابط.
تمرکز بر حفظ هماهنگی و پیش‌بینی اثر تغییرات بر افراد.
حرکت آهسته اما پیوسته با تکیه بر تجربه و فرآیندهای پایدار.",
                'work_preferences' => "محیط‌های همکاری‌محور و قابل پیش‌بینی.
نقش‌هایی که به مراقبت از تیم، هماهنگی و پیگیری جزئیات نیاز دارند.
فرصت برای آماده‌سازی پیش از ورود به تغییرات بزرگ.",
                'effectiveness_requirements' => "اطلاعات کامل پیش از اقدام، زمان کافی برای تطبیق و حمایت صادقانه در هنگام تغییر.
قدردانی از تلاش‌های پشت صحنه و ایجاد امنیت روانی.",
                'companion_requirements' => "همکارانی که سرعت و انگیزه بیرونی را تزریق کنند و در عین حال احترام و صبر متقابل داشته باشند.
افرادی که در تصمیم‌گیری‌های سخت شفافیت ایجاد کنند و از سوأءتفاهم جلوگیری نمایند.",
                'behavior_overview' => "تیپ S ستون آرامش تیم است. آن‌ها با همدلی، مسئولیت‌پذیری و پیگیری مستمر، اجرا را به شکل قابل اتکا پیش می‌برند. رویکردشان مبتنی بر روابط عمیق و حمایت پایدار است؛ با این حال در مواجهه با تغییر ناگهانی دچار تنش می‌شوند. وقتی از ابتدا در تصمیم‌ها مشارکت داده شوند و زمان کافی برای آماده‌سازی داشته باشند، بهترین عملکرد خود را نشان می‌دهند و حس تعلق را برای کل تیم افزایش می‌دهند.",
            ],
            [
                'scope' => 'primary',
                'disc_type_code' => 'C',
                'short_description' => 'متفکر تحلیلی و دقیق که کیفیت، استاندارد و منطق را در خط مقدم قرار می‌دهد.',
                'general_tendencies' => "جمع‌آوری داده‌های دقیق و بررسی کامل قبل از تصمیم‌گیری.
پرسیدن سوالات تحلیلی و شناسایی شکاف‌های پنهان.
پرهیز از ریسک‌های بی‌پایه و تاکید بر دقت و صحت.",
                'work_preferences' => "محیط‌های ساختارمند با فرآیندهای روشن و مستند.
فرصت برای تمرکز عمیق، پژوهش و استفاده از ابزارهای تحلیلی.
فضایی که کیفیت و صحت خروجی در آن ارزش‌گذاری می‌شود.",
                'effectiveness_requirements' => "انتظارات دقیق، معیارهای سنجش کیفیت، زمان کافی برای بازبینی و دسترسی به منابع اطلاعاتی معتبر.
بازخورد منطقی و گام‌به‌گام.",
                'companion_requirements' => "هم‌تیمی‌هایی که ایده‌های نو را مطرح کنند اما پذیرای بررسی دقیق باشند.
افرادی که در مواجهه با استانداردهای سختگیرانه، صبور و منصف بمانند.",
                'behavior_overview' => "تیپ C با نگاه تحلیلی، نظم شخصی و تمرکز بر استانداردها شناخته می‌شود. آن‌ها کیفیت و ریسک را هم‌زمان می‌سنجند و در تصمیم‌های حساس، نقش بازدارنده خطا را ایفا می‌کنند. گرچه ممکن است به عنوان سخت‌گیر یا کمال‌طلب دیده شوند، اما حضورشان برای ایجاد سیستم‌های قابل اعتماد ضروری است. بزرگ‌ترین نیازشان، دسترسی به واقعیت‌های کامل و زمان کافی برای بررسی است تا بتوانند توصیه‌های دقیق و ارزشمند ارائه دهند.",
            ],
            [
                'scope' => 'secondary',
                'disc_type_code' => 'D/I',
                'secondary_description' => "ترکیب جسارت D و کاریزمای I فردی را می‌سازد که هم تصمیم‌گیر قاطع است و هم می‌تواند تیم را با روایت‌های الهام‌بخش همراه کند. او در شرایط بحرانی جلو می‌افتد، مسیر را تعیین می‌کند و هم‌زمان با انرژی مثبت افراد را در مسیر جدید نگه می‌دارد. تمرکز اصلی بر دیده‌شدن نتیجه و تاثیر اجتماعی آن است؛ بنابراین باید تعادلی میان سرعت در اجرا و گوش‌دادن به بازخورد اطرافیان برقرار شود.",
            ],
            [
                'scope' => 'secondary',
                'disc_type_code' => 'D/S',
                'secondary_description' => "این ترکیب رویکردی متعادل میان پیشروی قاطع و حمایت پایدار فراهم می‌آورد. فرد در تصمیم‌گیری‌های کلان سرعت دارد، اما در اجرا مراقب پیامدهای انسانی و روابط است. در بحران‌ها ابتدا چارچوب را مشخص می‌کند و سپس برای پیاده‌سازی، با حوصله و توجه به جزئیات همراه تیم می‌ماند. برای بهره‌وری کامل لازم است از نوسان بین «همدلی بیش از حد» و «شتاب بی‌محابا» آگاه باشد.",
            ],
            [
                'scope' => 'secondary',
                'disc_type_code' => 'D/C',
                'secondary_description' => "در این الگو، جاه‌طلبی و سرعت نوع D با دقت مهندسی‌شده C ترکیب می‌شود. تصمیم‌ها بر پایه تحلیل منطقی و داده‌های معتبر گرفته می‌شود و اجرا با استاندارد بالا صورت می‌گیرد. چنین فردی می‌تواند پروژه‌های پیچیده را با جسارت آغاز کند و تا پایان با کنترل کیفیت پیش ببرد. مرز حساس او مدیریت سخت‌گیری است؛ باید مراقب باشد که کنترل شدید، انعطاف‌پذیری تیم را کاهش ندهد.",
            ],
            [
                'scope' => 'secondary',
                'disc_type_code' => 'I/D',
                'secondary_description' => "کاریزمای نوع I در این ترکیب با قاطعیت نوع D همراه می‌شود و رهبر الهام‌بخشی را می‌سازد که علاوه بر ایجاد انگیزه، مسیر را مشخص می‌کند. او از گفتگو برای بسیج تیم استفاده می‌کند اما در لحظات کلیدی تصمیم نهایی را بی‌تردید می‌گیرد. تمرکز باید روی گوش‌دادن فعال و مدیریت انرژی باشد تا شتاب زیاد باعث نادیده گرفتن حساسیت‌های تیم نشود.",
            ],
            [
                'scope' => 'secondary',
                'disc_type_code' => 'I/S',
                'secondary_description' => "این ترکیب فضایی صمیمی و امن ایجاد می‌کند که در آن ارتباطات گرم با حمایت پایدار همراه است. شخص می‌تواند با شور و اشتیاق، ایده‌های جدید را معرفی کند و سپس با صبر و توجه، همراهی تیم را تضمین نماید. او پل ارتباطی میان تغییر و ثبات است و نیاز دارد برای حفظ کارایی، مرزهای زمانی و اولویت‌ها را شفاف‌تر تعریف کند.",
            ],
            [
                'scope' => 'secondary',
                'disc_type_code' => 'I/C',
                'secondary_description' => "در این الگو، بیان خلاقانه و اجتماعی I با تحلیل دقیق C همراه می‌شود. فرد می‌تواند روایت‌های جذاب بسازد که بر پایه داده‌های معتبر استوار است؛ بنابراین هم متقاعدکننده است و هم قابل اعتماد. چالش اصلی تبدیل حجم زیاد اطلاعات به پیام‌های ساده و قابل فهم است و لازم است زمان کافی برای آماده‌سازی و تمرین پیام‌ها اختصاص یابد.",
            ],
            [
                'scope' => 'secondary',
                'disc_type_code' => 'S/D',
                'secondary_description' => "این ترکیب فردی را نشان می‌دهد که از دل آرامش و همراهی، در لحظات بحرانی به تصمیم‌گیر قاطع تبدیل می‌شود. او معمولاً ابتدا گوش می‌دهد و حمایت می‌کند، اما وقتی نیاز به جمع‌بندی است، موضع مشخصی اتخاذ می‌نماید. برای موفقیت باید مراقب باشد که در فشارهای بالا، ناگهان به رفتاری سخت‌گیرانه و غیرمنتظره تغییر نکند و همچنان شفافیت ارتباطی را حفظ کند.",
            ],
            [
                'scope' => 'secondary',
                'disc_type_code' => 'S/I',
                'secondary_description' => "در این الگو، ثبات و حمایت S با شور و تعامل I ترکیب می‌شود. فرد در روابط خود گرم و دلگرم‌کننده است و می‌تواند تغییرات را با زبان مثبت و قابل فهم برای دیگران توضیح دهد. او به تیم آرامش می‌دهد و هم‌زمان انگیزه را بالا نگه می‌دارد. چالش محوری این است که در مواجهه با تعارض، از بیان نیازهای واقعی خود اجتناب نکند.",
            ],
            [
                'scope' => 'secondary',
                'disc_type_code' => 'S/C',
                'secondary_description' => "این ترکیب پایدار و دقیق است. فرد با صبر و توجه به جزئیات پیش می‌رود و می‌کوشد قبل از اقدام، تمام اطلاعات لازم را گردآوری کند. او همدل است اما در عین حال استانداردهای روشنی برای کیفیت دارد. بیشترین بهره‌وری زمانی حاصل می‌شود که در کنار این رویکرد، سرعت تصمیم‌گیری نیز مدیریت شود تا فرصت‌ها از دست نرود.",
            ],
            [
                'scope' => 'secondary',
                'disc_type_code' => 'C/D',
                'secondary_description' => "این الگو تحلیلی‌ترین تصمیمات را با سرعت مناسب پیوند می‌دهد. فرد ابتدا همه متغیرها را بررسی می‌کند و سپس با قاطعیت مسیر را برمی‌گزیند. در شرایط بحران می‌تواند بدون از دست دادن دقت، اقدام سریع انجام دهد. نکته کلیدی این است که درباره دلایل تصمیم برای تیم توضیح کافی ارائه شود تا همراهی کامل شکل بگیرد.",
            ],
            [
                'scope' => 'secondary',
                'disc_type_code' => 'C/S',
                'secondary_description' => "در این ترکیب، منطق دقیق C با حمایتگر بودن S ادغام می‌شود. فرد در جمع‌آوری داده، تحلیل و تنظیم استانداردها بسیار جدی است، اما اجرای تغییرات را با آرامش و همراهی انسانی مدیریت می‌کند. این رویکرد برای پروژه‌های کیفیت‌محور و تیم‌هایی که نیاز به راهنمایی گام‌به‌گام دارند، ایده‌آل است.",
            ],
            [
                'scope' => 'secondary',
                'disc_type_code' => 'C/I',
                'secondary_description' => "الگوی C/I فردی را توصیف می‌کند که از پشتوانه تحلیلی قوی برای ارائه پیام‌های الهام‌بخش استفاده می‌کند. او ایده‌ها را بر اساس داده و شواهد می‌سازد و سپس با بیانی موثر منتشر می‌کند. برای موفقیت کامل باید مراقب باشد که در تبیین جزئیات فنی زیاده‌روی نکند و پیام اصلی را به شکلی ساده و قابل درک منتقل نماید.",
            ],
        ];
    }

    private function isValidDiscTypeCodeForScope(string $scope, string $code): bool
    {
        if ($code === '') {
            return false;
        }

        foreach ($this->getDiscTypeOptionsForScope($scope) as $option) {
            if (($option['code'] ?? '') === $code) {
                return true;
            }
        }

        return false;
    }

    private function buildSecondaryShortSummary(string $description): string
    {
        $plain = trim((string) $description);
        if ($plain === '') {
            return '';
        }

        $plain = preg_replace('/\s+/u', ' ', $plain);
        return mb_substr($plain, 0, 220);
    }

    private function getDiscScopeMeta(): array
    {
        return [
            'primary' => [
                'label' => 'تیپ شخصیتی',
                'description' => 'الگوی اصلی رفتاری و واکنشی فرد در مدل DISC.',
            ],
            'secondary' => [
                'label' => 'تیپ شخصیت ثانویه',
                'description' => 'نقش حمایتی یا مکمل که در شرایط خاص فعال می‌شود.',
            ],
        ];
    }

    private function normalizeDiscTypeCode(string $input): string
    {
        $normalized = UtilityHelper::persianToEnglish($input);
        $normalized = strtoupper(trim($normalized));
        $normalized = preg_replace('/\s+/u', '', $normalized);

        if (preg_match('/^[DISC]$/', $normalized)) {
            return $normalized;
        }

        if (preg_match('/^([DISC])\/([DISC])$/', $normalized, $matches)) {
            return $matches[1] . '/' . $matches[2];
        }

        return '';
    }

    private function getDiscTypeLabel(string $code): string
    {
        $normalized = $this->normalizeDiscTypeCode($code);
        $options = array_merge($this->getDiscTypeOptions(), $this->getDiscSecondaryTypeOptions());

        foreach ($options as $option) {
            if (($option['code'] ?? '') === $normalized) {
                return (string) ($option['label'] ?? $normalized);
            }
        }

        return $normalized !== '' ? $normalized : '---';
    }

    private function isValidMbtiCode(string $code): bool
    {
        $normalized = strtoupper(trim($code));
        if (strlen($normalized) !== 4) {
            return false;
        }

        $pairs = [
            ['E', 'I'],
            ['S', 'N'],
            ['T', 'F'],
            ['J', 'P'],
        ];

        $letters = str_split($normalized);
        foreach ($letters as $index => $letter) {
            if (!in_array($letter, $pairs[$index], true)) {
                return false;
            }
        }

        return true;
    }

    private function normalizeMbtiCategoriesInput(string $input): array
    {
        if (trim($input) === '') {
            return [];
        }

        $normalized = preg_replace("/[\n\r؛;]+/u", ',', $input);
        $parts = array_filter(array_map(static function ($part) {
            return trim((string) $part);
        }, explode(',', (string) $normalized)));

        $unique = [];
        foreach ($parts as $part) {
            $key = mb_strtolower(UtilityHelper::persianToEnglish($part));
            if ($key === '') {
                continue;
            }
            $unique[$key] = $part;
        }

        return array_values($unique);
    }

    private function decodeMbtiCategories(string $input): array
    {
        $input = trim($input);
        if ($input === '') {
            return [];
        }

        $decoded = json_decode($input, true);
        if (is_array($decoded)) {
            return array_values(array_filter(array_map(static function ($value) {
                return trim((string) $value);
            }, $decoded), static function ($value) {
                return $value !== '';
            }));
        }

        return $this->normalizeMbtiCategoriesInput($input);
    }

    private function ensureOrganizationEvaluationSchedulesColumn(string $column, string $definition): void
    {
        try {
            $columnExists = DatabaseHelper::fetchOne(
                'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND COLUMN_NAME = :column LIMIT 1',
                ['table' => 'organization_evaluation_schedules', 'column' => $column]
            );

            if (!$columnExists) {
                DatabaseHelper::query("ALTER TABLE organization_evaluation_schedules ADD COLUMN {$column} {$definition}");
            }
        } catch (Exception $exception) {
            // Silent failure; ignore.
        }
    }

    private function ensureOrganizationEvaluationSchedulesIndex(string $indexName, string $definition): void
    {
        try {
            $indexExists = DatabaseHelper::fetchOne(
                'SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND INDEX_NAME = :index LIMIT 1',
                ['table' => 'organization_evaluation_schedules', 'index' => $indexName]
            );

            if (!$indexExists) {
                DatabaseHelper::query("ALTER TABLE organization_evaluation_schedules ADD {$definition}");
            }
        } catch (Exception $exception) {
            // Silent failure.
        }
    }

    private function seedOrganizationEvaluationSchedules(int $organizationId, string $userIdentifier): void
    {
        if ($organizationId <= 0) {
            return;
        }

        try {
            $existing = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_evaluation_schedules WHERE organization_id = :organization_id LIMIT 1',
                ['organization_id' => $organizationId]
            );

            if ($existing) {
                return;
            }

            $timezone = new DateTimeZone('Asia/Tehran');
            $today = new DateTime('now', $timezone);

            $samples = [
                [
                    'title' => 'ارزیابی عملکرد تیم فروش',
                    'offset' => '+3 days',
                    'status' => 'در حال برنامه‌ریزی',
                    'is_open' => 1,
                    'description' => 'ارزیابی عملکرد میان‌دوره‌ای برای تیم فروش سازمان',
                ],
                [
                    'title' => 'آزمون تخصصی منابع انسانی',
                    'offset' => '+10 days',
                    'status' => 'ثبت‌نام فعال',
                    'is_open' => 1,
                    'description' => 'آزمون تخصصی مهارت‌های منابع انسانی برای مدیران میانی',
                ],
                [
                    'title' => 'بازخورد ۳۶۰ درجه',
                    'offset' => '+18 days',
                    'status' => 'در حال جمع‌آوری داده',
                    'is_open' => 1,
                    'description' => 'اجرای فرآیند بازخورد ۳۶۰ درجه برای مدیران ارشد سازمان',
                ],
                [
                    'title' => 'جمع‌بندی نتایج ارزیابی فصل قبل',
                    'offset' => '-5 days',
                    'status' => 'در حال تحلیل',
                    'is_open' => 0,
                    'description' => 'بررسی نتایج ارزیابی‌های انجام شده در فصل گذشته',
                ],
            ];

            foreach ($samples as $sample) {
                $scheduledDate = clone $today;
                $scheduledDate->modify($sample['offset']);

                DatabaseHelper::insert('organization_evaluation_schedules', [
                    'organization_id' => $organizationId,
                    'evaluation_title' => $sample['title'],
                    'evaluation_date' => $scheduledDate->format('Y-m-d'),
                    'status' => $sample['status'],
                    'is_open' => (int) $sample['is_open'],
                    'description' => $sample['description'],
                    'created_by' => $userIdentifier,
                ]);
            }
        } catch (Exception $exception) {
            // Ignore seeding failures.
        }
    }

    private function normalizeEvaluationDateInput(?string $input): ?string
    {
        if ($input === null) {
            return null;
        }

        $trimmed = trim((string) $input);
        if ($trimmed === '') {
            return null;
        }

        $normalized = UtilityHelper::persianToEnglish($trimmed);
        $normalized = str_replace(['.', '\\'], '/', $normalized);

        if (preg_match('/^(\d{3,4})[\/-](\d{1,2})[\/-](\d{1,2})$/', $normalized, $matches)) {
            $year = (int) $matches[1];
            $month = (int) $matches[2];
            $day = (int) $matches[3];
            $delimiter = strpos($normalized, '-') !== false ? '-' : '/';

            if ($year < 1700) {
                $pattern = $delimiter === '-' ? 'yyyy-MM-dd' : 'yyyy/MM/dd';
                $formatter = new IntlDateFormatter(
                    'fa_IR@calendar=persian',
                    IntlDateFormatter::FULL,
                    IntlDateFormatter::NONE,
                    'Asia/Tehran',
                    IntlDateFormatter::TRADITIONAL,
                    $pattern
                );

                if ($formatter !== false) {
                    $timestamp = $formatter->parse(sprintf('%04d%s%02d%s%02d', $year, $delimiter, $month, $delimiter, $day));
                    if ($timestamp !== false) {
                        $dateTime = (new DateTime('@' . $timestamp))->setTimezone(new DateTimeZone('Asia/Tehran'));
                        return $dateTime->format('Y-m-d');
                    }
                }
            } else {
                try {
                    $dateTime = new DateTime(sprintf('%04d-%02d-%02d', $year, $month, $day), new DateTimeZone('Asia/Tehran'));
                    return $dateTime->format('Y-m-d');
                } catch (Exception $exception) {
                    // Continue to fallback parsing.
                }
            }
        }

        try {
            $dateTime = new DateTime(str_replace('/', '-', $normalized), new DateTimeZone('Asia/Tehran'));
            return $dateTime->format('Y-m-d');
        } catch (Exception $exception) {
            return null;
        }
    }

    public function organizationWashUpDetail(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationSchedulesTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationMatrixVisibilityTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolCompetenciesTableExists();
        $this->ensureOrganizationEvaluationToolScoresTableExists();
        $this->ensureOrganizationEvaluationFinalRecommendationsTableExists();
        $this->ensureOrganizationEvaluationAgreedScoresTableExists();
        $this->ensureOrganizationCompetencyModelsTableExists();
        $this->ensureOrganizationCompetencyModelItemsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationCompetencyExamplesTableExists();
        $this->ensureOrganizationUsersTableExists();

        $title = 'جزئیات Wash-Up';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $currentOrganizationUserId = (int) ($user['organization_user_id'] ?? 0);
        $accountSourceRaw = (string) ($user['account_source'] ?? '');
        $accountSource = $accountSourceRaw !== '' && function_exists('mb_strtolower')
            ? mb_strtolower($accountSourceRaw, 'UTF-8')
            : strtolower($accountSourceRaw);

        $flags = isset($user['organization_user_flags']) && is_array($user['organization_user_flags'])
            ? $user['organization_user_flags']
            : [];

        $isOwnerAccount = $accountSource === 'organizations';
        $isSystemAdmin = $isOwnerAccount || (int) ($flags['is_system_admin'] ?? 0) === 1;
        $isManager = (int) ($flags['is_manager'] ?? 0) === 1;
        $isEvaluator = (int) ($flags['is_evaluator'] ?? 0) === 1;
        $isEvaluatee = (int) ($flags['is_evaluee'] ?? 0) === 1;

        $evaluationIdInput = UtilityHelper::persianToEnglish(trim((string) ($_GET['evaluation_id'] ?? ($_GET['evaluation'] ?? ($_GET['id'] ?? '')))));
        $evaluateeIdInput = UtilityHelper::persianToEnglish(trim((string) ($_GET['evaluatee_id'] ?? ($_GET['evaluatee'] ?? ''))));
        $viewMode = trim((string) ($_GET['view'] ?? 'washup'));

        $evaluationId = (int) $evaluationIdInput;
        $evaluateeId = $evaluateeIdInput !== '' ? (int) $evaluateeIdInput : 0;

        if ($evaluationId <= 0 || $evaluateeId <= 0) {
            ResponseHelper::flashError('اطلاعات لازم برای نمایش Wash-Up ناقص است.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/wash-up'));
        }

        [$evaluationTools, $toolMap, $organizationUsers, $userMap] = $this->loadEvaluationFormReferenceData($organizationId);
        $toolDetailsMap = [];
        foreach ($evaluationTools as $tool) {
            $toolId = (int) ($tool['id'] ?? 0);
            if ($toolId <= 0) {
                continue;
            }
            $toolDetailsMap[$toolId] = $tool;
        }

        try {
            $evaluationRow = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_evaluations WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $evaluationId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $evaluationRow = null;
        }

        if (!$evaluationRow) {
            ResponseHelper::flashError('ارزیابی مورد نظر یافت نشد یا دسترسی به آن مجاز نیست.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/wash-up'));
        }

        $evaluators = $this->decodeUserList($evaluationRow['evaluators_json'] ?? null, $userMap);
        $evaluatees = $this->decodeUserList($evaluationRow['evaluatees_json'] ?? null, $userMap);

        $evaluatorIds = array_map(static function (array $item): int {
            return (int) ($item['id'] ?? 0);
        }, $evaluators);

        $evaluateeIds = array_map(static function (array $item): int {
            return (int) ($item['id'] ?? 0);
        }, $evaluatees);

        $canViewAll = $isSystemAdmin || $isManager;
        $allowed = $canViewAll;

        if (!$allowed && $currentOrganizationUserId > 0) {
            if ($isEvaluator && in_array($currentOrganizationUserId, $evaluatorIds, true)) {
                $allowed = true;
            }

            if (!$allowed && $isEvaluatee && in_array($currentOrganizationUserId, $evaluateeIds, true)) {
                $allowed = true;
            }

            if (!$allowed && in_array($currentOrganizationUserId, $evaluateeIds, true)) {
                $allowed = true;
            }
        }

        if (!$allowed) {
            ResponseHelper::flashError('شما مجاز به مشاهده این Wash-Up نیستید.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/wash-up'));
        }

        $selectedEvaluatee = null;
        foreach ($evaluatees as $evaluatee) {
            if ((int) ($evaluatee['id'] ?? 0) === $evaluateeId) {
                $selectedEvaluatee = $evaluatee;
                break;
            }
        }

        if ($selectedEvaluatee === null) {
            $selectedEvaluatee = [
                'id' => $evaluateeId,
                'label' => 'ارزیابی‌شونده #' . UtilityHelper::englishToPersian((string) $evaluateeId),
            ];
        }

        $assignmentRows = [];
        try {
            $assignmentRows = DatabaseHelper::fetchAll(
                'SELECT tool_id, sort_order FROM organization_evaluation_tool_assignments WHERE evaluation_id = :evaluation_id ORDER BY sort_order ASC, id ASC',
                ['evaluation_id' => $evaluationId]
            );
        } catch (Exception $exception) {
            $assignmentRows = [];
        }

        $nonExamAssignments = array_values(array_filter($assignmentRows, static function (array $assignment) use ($toolDetailsMap): bool {
            $toolId = (int) ($assignment['tool_id'] ?? 0);
            if ($toolId <= 0) {
                return false;
            }

            $tool = $toolDetailsMap[$toolId] ?? null;
            if ($tool === null) {
                return false;
            }

            return (int) ($tool['is_exam'] ?? 0) === 0;
        }));

        $competencyMap = [];
        foreach ($nonExamAssignments as $assignment) {
            $toolId = (int) ($assignment['tool_id'] ?? 0);
            if ($toolId <= 0 || !isset($toolDetailsMap[$toolId])) {
                continue;
            }

            $tool = $toolDetailsMap[$toolId];

            try {
                $competencyRows = DatabaseHelper::fetchAll(
                    'SELECT competency_id, model_id FROM organization_evaluation_tool_competencies WHERE organization_id = :organization_id AND evaluation_tool_id = :tool_id',
                    [
                        'organization_id' => $organizationId,
                        'tool_id' => $toolId,
                    ]
                );
            } catch (Exception $exception) {
                $competencyRows = [];
            }

            if (empty($competencyRows)) {
                continue;
            }

            foreach ($competencyRows as $row) {
                $competencyId = (int) ($row['competency_id'] ?? 0);
                if ($competencyId <= 0) {
                    continue;
                }

                if (!isset($competencyMap[$competencyId])) {
                    $competencyMap[$competencyId] = [
                        'tools' => [],
                        'model_ids' => [],
                    ];
                }

                $competencyMap[$competencyId]['tools'][$toolId] = true;
                $competencyMap[$competencyId]['model_ids'][] = (int) ($row['model_id'] ?? 0);
            }
        }

        $competencyIds = array_keys($competencyMap);

        $generalModelLabel = trim((string) ($evaluationRow['general_model'] ?? ''));
        $specificModelLabel = trim((string) ($evaluationRow['specific_model'] ?? ''));
        $generalModelMeta = $this->resolveCompetencyModelByLabel($organizationId, $generalModelLabel);
        $specificModelMeta = $this->resolveCompetencyModelByLabel($organizationId, $specificModelLabel);

        if ($generalModelMeta && !empty($generalModelMeta['title'])) {
            $generalModelLabel = $generalModelMeta['title'];
        }
        if ($specificModelMeta && !empty($specificModelMeta['title'])) {
            $specificModelLabel = $specificModelMeta['title'];
        }

        $competencyDetails = [];
        if (!empty($competencyIds)) {
            $params = ['organization_id' => $organizationId];
            $placeholders = [];
            foreach (array_values($competencyIds) as $index => $competencyId) {
                $key = 'comp_' . $index;
                $placeholders[] = ':' . $key;
                $params[$key] = $competencyId;
            }

            $sql = sprintf(
                'SELECT oc.id, oc.code, oc.title, ocd.name AS dimension_name
                 FROM organization_competencies oc
                 LEFT JOIN organization_competency_dimensions ocd
                   ON ocd.id = oc.competency_dimension_id AND ocd.organization_id = oc.organization_id
                 WHERE oc.organization_id = :organization_id
                   AND oc.id IN (%s)
                 ORDER BY oc.title ASC',
                implode(', ', $placeholders)
            );

            try {
                $competencyRows = DatabaseHelper::fetchAll($sql, $params);
            } catch (Exception $exception) {
                $competencyRows = [];
            }

            foreach ($competencyRows as $row) {
                $competencyId = (int) ($row['id'] ?? 0);
                if ($competencyId <= 0) {
                    continue;
                }

                $competencyDetails[$competencyId] = [
                    'id' => $competencyId,
                    'code' => trim((string) ($row['code'] ?? '')),
                    'title' => trim((string) ($row['title'] ?? '')),
                    'dimension' => trim((string) ($row['dimension_name'] ?? '')),
                ];
            }
        }

        $competencyExamples = [];
        if (!empty($competencyIds)) {
            $params = ['organization_id' => $organizationId];
            $placeholders = [];
            foreach (array_values($competencyIds) as $index => $competencyId) {
                $key = 'comp_' . $index;
                $placeholders[] = ':' . $key;
                $params[$key] = $competencyId;
            }

            $sql = sprintf(
                'SELECT id, competency_id, behavior_example
                 FROM organization_competency_examples
                 WHERE organization_id = :organization_id
                   AND competency_id IN (%s)
                 ORDER BY competency_id ASC, id ASC',
                implode(', ', $placeholders)
            );

            try {
                $exampleRows = DatabaseHelper::fetchAll($sql, $params);
            } catch (Exception $exception) {
                $exampleRows = [];
            }

            foreach ($exampleRows as $row) {
                $competencyId = (int) ($row['competency_id'] ?? 0);
                if ($competencyId <= 0) {
                    continue;
                }

                if (!isset($competencyExamples[$competencyId])) {
                    $competencyExamples[$competencyId] = [];
                }

                $competencyExamples[$competencyId][] = [
                    'id' => (int) ($row['id'] ?? 0),
                    'text' => trim((string) ($row['behavior_example'] ?? '')),
                ];
            }
        }

        $scoreRows = [];
        try {
            $scoreRows = DatabaseHelper::fetchAll(
                'SELECT tool_id, scorer_id, competency_id, example_id, score_value, score_note, updated_at
                 FROM organization_evaluation_tool_scores
                 WHERE organization_id = :organization_id
                   AND evaluation_id = :evaluation_id
                   AND evaluatee_id = :evaluatee_id',
                [
                    'organization_id' => $organizationId,
                    'evaluation_id' => $evaluationId,
                    'evaluatee_id' => $evaluateeId,
                ]
            );
        } catch (Exception $exception) {
            $scoreRows = [];
        }

        $scoresByCompetency = [];
        $scorerIds = [];
        $toolIdsWithScores = [];
        $lastUpdated = null;

        foreach ($scoreRows as $row) {
            $toolId = (int) ($row['tool_id'] ?? 0);
            $scorerId = (int) ($row['scorer_id'] ?? 0);
            $competencyId = (int) ($row['competency_id'] ?? 0);
            if ($toolId <= 0 || $competencyId <= 0) {
                continue;
            }

            $toolIdsWithScores[$toolId] = true;
            if ($scorerId > 0) {
                $scorerIds[$scorerId] = true;
            }

            if (!isset($scoresByCompetency[$competencyId])) {
                $scoresByCompetency[$competencyId] = [
                    'overall' => [],
                    'examples' => [],
                ];
            }

            $exampleId = (int) ($row['example_id'] ?? 0);
            $scoreValue = (float) ($row['score_value'] ?? 0);
            $scoreNote = trim((string) ($row['score_note'] ?? ''));
            $updatedAt = $row['updated_at'] ?? null;

            if ($exampleId > 0) {
                if (!isset($scoresByCompetency[$competencyId]['examples'][$exampleId])) {
                    $scoresByCompetency[$competencyId]['examples'][$exampleId] = [];
                }
                $scoresByCompetency[$competencyId]['examples'][$exampleId][] = [
                    'tool_id' => $toolId,
                    'scorer_id' => $scorerId,
                    'score' => $scoreValue,
                    'note' => $scoreNote,
                    'updated_at' => $updatedAt,
                ];
            } else {
                $scoresByCompetency[$competencyId]['overall'][] = [
                    'tool_id' => $toolId,
                    'scorer_id' => $scorerId,
                    'score' => $scoreValue,
                    'note' => $scoreNote,
                    'updated_at' => $updatedAt,
                ];
            }

            if ($updatedAt !== null) {
                if ($lastUpdated === null || strcmp((string) $updatedAt, (string) $lastUpdated) > 0) {
                $this->ensureOrganizationEvaluationFinalRecommendationsTableExists();
                    $lastUpdated = $updatedAt;
                }
            }
        }

        $scorerMap = [];
        if (!empty($scorerIds)) {
            $params = ['organization_id' => $organizationId];
            $placeholders = [];
            foreach (array_keys($scorerIds) as $index => $scorerId) {
                $key = 'scorer_' . $index;
                $placeholders[] = ':' . $key;
                $params[$key] = $scorerId;
            }

            $sql = sprintf(
                'SELECT id, first_name, last_name, username
                 FROM organization_users
                 WHERE organization_id = :organization_id
                   AND id IN (%s)',
                implode(', ', $placeholders)
            );

            try {
                $scorerRows = DatabaseHelper::fetchAll($sql, $params);
            } catch (Exception $exception) {
                $scorerRows = [];
            }

            foreach ($scorerRows as $row) {
                $scorerId = (int) ($row['id'] ?? 0);
                if ($scorerId <= 0) {
                    continue;
                }

                $firstName = trim((string) ($row['first_name'] ?? ''));
                $lastName = trim((string) ($row['last_name'] ?? ''));
                $username = trim((string) ($row['username'] ?? ''));

                $fullName = trim($firstName . ' ' . $lastName);
                if ($fullName === '') {
                    $fullName = $username !== '' ? $username : ('ارزیاب #' . UtilityHelper::englishToPersian((string) $scorerId));
                }

                $scorerMap[$scorerId] = [
                    'id' => $scorerId,
                    'label' => $fullName,
                    'first_name' => $firstName,
                    'last_name' => $lastName,
                    'username' => $username,
                ];
            }
        }

        if (!empty($scorerIds)) {
            foreach (array_keys($scorerIds) as $scorerId) {
                if (isset($scorerMap[$scorerId])) {
                    continue;
                }

                if ($scorerId === 0) {
                    $scorerMap[$scorerId] = [
                        'id' => 0,
                        'label' => 'ارزیاب تعیین نشده',
                    ];
                } else {
                    $label = $userMap[$scorerId] ?? ('ارزیاب #' . UtilityHelper::englishToPersian((string) $scorerId));
                    $scorerMap[$scorerId] = [
                        'id' => $scorerId,
                        'label' => $label,
                    ];
                }
            }
        }

        $toolSummaries = [];
        foreach ($nonExamAssignments as $assignment) {
            $toolId = (int) ($assignment['tool_id'] ?? 0);
            if ($toolId <= 0 || !isset($toolDetailsMap[$toolId])) {
                continue;
            }

            $tool = $toolDetailsMap[$toolId];

            $toolSummaries[$toolId] = [
                'id' => $toolId,
                'name' => $tool['name'] ?? ('ابزار #' . UtilityHelper::englishToPersian((string) $toolId)),
                'order' => (int) ($assignment['sort_order'] ?? 0),
                'question_type' => $tool['question_type'] ?? '',
                'scores_sum' => 0.0,
                'scores_count' => 0,
                'competency_counts' => [],
                'scorers' => [],
                'last_updated' => null,
            ];
        }

        foreach ($scoresByCompetency as $competencyId => $competencyScores) {
            $overallEntries = $competencyScores['overall'] ?? [];
            foreach ($overallEntries as $entry) {
                $toolId = (int) ($entry['tool_id'] ?? 0);
                if ($toolId <= 0 || !isset($toolSummaries[$toolId])) {
                    continue;
                }

                $score = (float) ($entry['score'] ?? 0);
                $scorerId = (int) ($entry['scorer_id'] ?? 0);
                $updatedAt = $entry['updated_at'] ?? null;

                $toolSummaries[$toolId]['scores_sum'] += $score;
                $toolSummaries[$toolId]['scores_count']++;
                if (!isset($toolSummaries[$toolId]['competency_counts'][$competencyId])) {
                    $toolSummaries[$toolId]['competency_counts'][$competencyId] = 0;
                }
                $toolSummaries[$toolId]['competency_counts'][$competencyId]++;

                $label = $scorerMap[$scorerId]['label'] ?? ($userMap[$scorerId] ?? 'ارزیاب تعیین نشده');
                $toolSummaries[$toolId]['scorers'][$scorerId] = $label;

                if ($updatedAt !== null) {
                    $existing = $toolSummaries[$toolId]['last_updated'];
                    if ($existing === null || strcmp((string) $updatedAt, (string) $existing) > 0) {
                        $toolSummaries[$toolId]['last_updated'] = $updatedAt;
                    }
                }
            }

            $exampleEntries = $competencyScores['examples'] ?? [];
            foreach ($exampleEntries as $entries) {
                foreach ($entries as $entry) {
                    $toolId = (int) ($entry['tool_id'] ?? 0);
                    if ($toolId <= 0 || !isset($toolSummaries[$toolId])) {
                        continue;
                    }

                    $score = (float) ($entry['score'] ?? 0);
                    $scorerId = (int) ($entry['scorer_id'] ?? 0);
                    $updatedAt = $entry['updated_at'] ?? null;

                    $toolSummaries[$toolId]['scores_sum'] += $score;
                    $toolSummaries[$toolId]['scores_count']++;
                    if (!isset($toolSummaries[$toolId]['competency_counts'][$competencyId])) {
                        $toolSummaries[$toolId]['competency_counts'][$competencyId] = 0;
                    }
                    $toolSummaries[$toolId]['competency_counts'][$competencyId]++;

                    $label = $scorerMap[$scorerId]['label'] ?? ($userMap[$scorerId] ?? 'ارزیاب تعیین نشده');
                    $toolSummaries[$toolId]['scorers'][$scorerId] = $label;

                    if ($updatedAt !== null) {
                        $existing = $toolSummaries[$toolId]['last_updated'];
                        if ($existing === null || strcmp((string) $updatedAt, (string) $existing) > 0) {
                            $toolSummaries[$toolId]['last_updated'] = $updatedAt;
                        }
                    }
                }
            }
        }

        foreach ($toolSummaries as $toolId => &$summary) {
            $summary['average'] = $summary['scores_count'] > 0
                ? round($summary['scores_sum'] / max($summary['scores_count'], 1), 2)
                : null;
            $summary['competency_total'] = count($summary['competency_counts']);
            $summary['scorers'] = array_values(array_unique(array_filter($summary['scorers'])));
            if ($summary['last_updated'] !== null) {
                try {
                    $updatedAt = new DateTime($summary['last_updated'], new DateTimeZone('Asia/Tehran'));
                    $summary['last_updated_display'] = UtilityHelper::englishToPersian($updatedAt->format('H:i Y/m/d'));
                } catch (Exception $exception) {
                    $summary['last_updated_display'] = UtilityHelper::englishToPersian((string) $summary['last_updated']);
                }
            } else {
                $summary['last_updated_display'] = null;
            }
        }
        unset($summary);

        uasort($toolSummaries, static function (array $a, array $b): int {
            $orderCompare = ($a['order'] ?? 0) <=> ($b['order'] ?? 0);
            if ($orderCompare !== 0) {
                return $orderCompare;
            }

            return strcmp((string) ($a['name'] ?? ''), (string) ($b['name'] ?? ''));
        });

        $toolHeaders = array_values($toolSummaries);

        $exampleTextMap = [];
        foreach ($competencyExamples as $compId => $examples) {
            foreach ($examples as $example) {
                $exampleId = (int) ($example['id'] ?? 0);
                if ($exampleId <= 0) {
                    continue;
                }
                $exampleTextMap[$exampleId] = [
                    'competency_id' => $compId,
                    'text' => $example['text'] ?? '',
                ];
            }
        }

        $allCompetencyIds = $competencyIds;
        foreach (array_keys($scoresByCompetency) as $competencyId) {
            if (!in_array($competencyId, $allCompetencyIds, true)) {
                $allCompetencyIds[] = $competencyId;
            }
        }

        $totalScoreSum = 0.0;
        $totalScoreCount = 0;
        $competencySummaries = [];

        $agreedScoreMap = [];
        try {
            $agreedScoreRows = DatabaseHelper::fetchAll(
                'SELECT competency_id, agreed_score, updated_at, updated_by FROM organization_evaluation_agreed_scores WHERE organization_id = :organization_id AND evaluation_id = :evaluation_id AND evaluatee_id = :evaluatee_id',
                [
                    'organization_id' => $organizationId,
                    'evaluation_id' => $evaluationId,
                    'evaluatee_id' => $evaluateeId,
                ]
            );
        } catch (Exception $exception) {
            $agreedScoreRows = [];
        }

        foreach ($agreedScoreRows as $row) {
            $compId = (int) ($row['competency_id'] ?? 0);
            if ($compId <= 0) {
                continue;
            }

            $agreedScoreMap[$compId] = [
                'score' => isset($row['agreed_score']) ? (float) $row['agreed_score'] : null,
                'updated_at' => $row['updated_at'] ?? null,
                'updated_by' => $row['updated_by'] ?? null,
            ];
        }

        foreach ($allCompetencyIds as $competencyId) {
            $meta = $competencyDetails[$competencyId] ?? [
                'id' => $competencyId,
                'code' => '',
                'title' => 'شایستگی #' . UtilityHelper::englishToPersian((string) $competencyId),
                'dimension' => '',
            ];

            $cellData = [];
            $overallEntries = $scoresByCompetency[$competencyId]['overall'] ?? [];
            foreach ($overallEntries as $entry) {
                $toolId = (int) ($entry['tool_id'] ?? 0);
                if ($toolId <= 0) {
                    continue;
                }

                $score = (float) ($entry['score'] ?? 0);
                $scorerId = (int) ($entry['scorer_id'] ?? 0);
                $note = trim((string) ($entry['note'] ?? ''));
                $updatedAt = $entry['updated_at'] ?? null;

                if (!isset($cellData[$toolId])) {
                    $cellData[$toolId] = [
                        'sum' => 0.0,
                        'count' => 0,
                        'notes' => [],
                        'scorers' => [],
                        'updated_at' => null,
                    ];
                }

                $cellData[$toolId]['sum'] += $score;
                $cellData[$toolId]['count']++;
                if ($note !== '') {
                    $cellData[$toolId]['notes'][] = $note;
                }
                $label = $scorerMap[$scorerId]['label'] ?? ($userMap[$scorerId] ?? 'ارزیاب تعیین نشده');
                $cellData[$toolId]['scorers'][$scorerId] = $label;

                if ($updatedAt !== null) {
                    $existing = $cellData[$toolId]['updated_at'];
                    if ($existing === null || strcmp((string) $updatedAt, (string) $existing) > 0) {
                        $cellData[$toolId]['updated_at'] = $updatedAt;
                    }
                }

                $totalScoreSum += $score;
                $totalScoreCount++;
            }

            $exampleEntries = $scoresByCompetency[$competencyId]['examples'] ?? [];
            foreach ($exampleEntries as $entries) {
                foreach ($entries as $entry) {
                    $toolId = (int) ($entry['tool_id'] ?? 0);
                    if ($toolId <= 0) {
                        continue;
                    }

                    $score = (float) ($entry['score'] ?? 0);
                    $scorerId = (int) ($entry['scorer_id'] ?? 0);
                    $note = trim((string) ($entry['note'] ?? ''));
                    $updatedAt = $entry['updated_at'] ?? null;

                    if (!isset($cellData[$toolId])) {
                        $cellData[$toolId] = [
                            'sum' => 0.0,
                            'count' => 0,
                            'notes' => [],
                            'scorers' => [],
                            'updated_at' => null,
                        ];
                    }

                    $cellData[$toolId]['sum'] += $score;
                    $cellData[$toolId]['count']++;
                    if ($note !== '') {
                        $cellData[$toolId]['notes'][] = $note;
                    }
                    $label = $scorerMap[$scorerId]['label'] ?? ($userMap[$scorerId] ?? 'ارزیاب تعیین نشده');
                    $cellData[$toolId]['scorers'][$scorerId] = $label;

                    if ($updatedAt !== null) {
                        $existing = $cellData[$toolId]['updated_at'];
                        if ($existing === null || strcmp((string) $updatedAt, (string) $existing) > 0) {
                            $cellData[$toolId]['updated_at'] = $updatedAt;
                        }
                    }

                    $totalScoreSum += $score;
                    $totalScoreCount++;
                }
            }

            $toolCells = [];
            $overallSum = 0.0;
            $overallCount = 0;

            foreach ($toolHeaders as $toolSummary) {
                $toolId = $toolSummary['id'];
                $data = $cellData[$toolId] ?? null;

                $average = null;
                $count = 0;
                $notes = [];
                $scorers = [];
                $lastUpdated = null;
                $lastUpdatedDisplay = null;
                $totalValue = null;

                if ($data !== null) {
                    $count = (int) ($data['count'] ?? 0);
                    $totalValue = isset($data['sum']) ? (float) $data['sum'] : null;
                    if ($count > 0 && $totalValue !== null) {
                        $average = round($totalValue / max($count, 1), 2);
                        $overallSum += $totalValue;
                        $overallCount += $count;
                    }
                    $notes = array_values(array_unique(array_filter($data['notes'])));
                    $scorers = array_values(array_unique(array_filter($data['scorers'])));
                    $lastUpdated = $data['updated_at'] ?? null;
                    if ($lastUpdated !== null) {
                        try {
                            $updatedAt = new DateTime($lastUpdated, new DateTimeZone('Asia/Tehran'));
                            $lastUpdatedDisplay = UtilityHelper::englishToPersian($updatedAt->format('H:i Y/m/d'));
                        } catch (Exception $exception) {
                            $lastUpdatedDisplay = UtilityHelper::englishToPersian((string) $lastUpdated);
                        }
                    }
                }

                $toolCells[] = [
                    'tool_id' => $toolId,
                    'tool_name' => $toolSummary['name'],
                    'total' => $count > 0 && $totalValue !== null ? round($totalValue, 2) : null,
                    'average' => $average,
                    'count' => $count,
                    'notes' => $notes,
                    'scorers' => $scorers,
                    'last_updated' => $lastUpdated,
                    'last_updated_display' => $lastUpdatedDisplay,
                ];
            }

            $overallAverage = $overallCount > 0 ? round($overallSum / max($overallCount, 1), 2) : null;
            $overallSumRounded = round($overallSum, 2);

            $exampleDetails = [];
            $competencyExamplesSum = 0.0;
            $competencyExamplesCount = 0;
            $exampleEntries = $scoresByCompetency[$competencyId]['examples'] ?? [];
            foreach ($exampleEntries as $exampleId => $entries) {
                $exampleText = '';
                foreach ($competencyExamples[$competencyId] ?? [] as $exampleRow) {
                    if ((int) ($exampleRow['id'] ?? 0) === $exampleId) {
                        $exampleText = $exampleRow['text'] ?? '';
                        break;
                    }
                }
                if ($exampleText === '' && isset($exampleTextMap[$exampleId])) {
                    $exampleText = $exampleTextMap[$exampleId]['text'] ?? '';
                }
                if ($exampleText === '') {
                    $exampleText = 'نمونه رفتاری #' . UtilityHelper::englishToPersian((string) $exampleId);
                }

                $exampleScores = [];
                foreach ($entries as $entry) {
                    $toolId = (int) ($entry['tool_id'] ?? 0);
                    if ($toolId <= 0) {
                        continue;
                    }
                    $toolName = $toolSummaries[$toolId]['name'] ?? ('ابزار #' . UtilityHelper::englishToPersian((string) $toolId));
                    $scorerId = (int) ($entry['scorer_id'] ?? 0);
                    $scorerLabel = $scorerMap[$scorerId]['label'] ?? ($userMap[$scorerId] ?? 'ارزیاب تعیین نشده');
                    $score = (float) ($entry['score'] ?? 0);
                    $note = trim((string) ($entry['note'] ?? ''));
                    $updatedAt = $entry['updated_at'] ?? null;
                    $updatedDisplay = null;
                    if ($updatedAt !== null) {
                        try {
                            $updatedAtObj = new DateTime($updatedAt, new DateTimeZone('Asia/Tehran'));
                            $updatedDisplay = UtilityHelper::englishToPersian($updatedAtObj->format('H:i Y/m/d'));
                        } catch (Exception $exception) {
                            $updatedDisplay = UtilityHelper::englishToPersian((string) $updatedAt);
                        }
                    }

                    $exampleScores[] = [
                        'tool_id' => $toolId,
                        'tool_name' => $toolName,
                        'score' => $score,
                        'note' => $note,
                        'scorer_label' => $scorerLabel,
                        'updated_at' => $updatedAt,
                        'updated_at_display' => $updatedDisplay,
                    ];

                    $competencyExamplesSum += $score;
                    $competencyExamplesCount++;
                }

                if (!empty($exampleScores)) {
                    $exampleDetails[] = [
                        'id' => $exampleId,
                        'text' => $exampleText,
                        'scores' => $exampleScores,
                    ];
                }
            }

            $competencySummaries[] = [
                'id' => $competencyId,
                'code' => $meta['code'] ?? '',
                'title' => $meta['title'] ?? '',
                'dimension' => $meta['dimension'] ?? '',
                'overall_sum' => $overallSumRounded,
                'overall_average' => $overallAverage,
                'overall_count' => $overallCount,
                'examples_sum' => round($competencyExamplesSum, 2),
                'examples_count' => $competencyExamplesCount,
                'examples_average' => $competencyExamplesCount > 0 ? round($competencyExamplesSum / max($competencyExamplesCount, 1), 2) : null,
                'tool_cells' => $toolCells,
                'examples' => $exampleDetails,
                'agreed_score' => $agreedScoreMap[$competencyId]['score'] ?? null,
                'agreed_score_meta' => $agreedScoreMap[$competencyId] ?? null,
            ];
        }

        usort($competencySummaries, static function (array $a, array $b): int {
            $dimensionCompare = strcmp((string) ($a['dimension'] ?? ''), (string) ($b['dimension'] ?? ''));
            if ($dimensionCompare !== 0) {
                return $dimensionCompare;
            }

            return strcmp((string) ($a['title'] ?? ''), (string) ($b['title'] ?? ''));
        });

        $toolsTotal = count($toolHeaders);
        $toolsWithScores = count($toolIdsWithScores);
        $toolsWithoutScores = array_values(array_filter($toolHeaders, static function (array $tool): bool {
            return (int) ($tool['scores_count'] ?? 0) === 0;
        }));

        $overallAverageScore = $totalScoreCount > 0 ? round($totalScoreSum / max($totalScoreCount, 1), 2) : null;

        $detailStats = [
            'total_scores' => $totalScoreCount,
            'average_score' => $overallAverageScore,
            'tools_total' => $toolsTotal,
            'tools_with_scores' => $toolsWithScores,
            'competencies_total' => count($competencySummaries),
        ];

        $finalRecommendation = null;
        try {
            $finalRow = DatabaseHelper::fetchOne(
                'SELECT recommendation_text, development_text, updated_at, updated_by FROM organization_evaluation_final_recommendations WHERE organization_id = :organization_id AND evaluation_id = :evaluation_id AND evaluatee_id = :evaluatee_id LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'evaluation_id' => $evaluationId,
                    'evaluatee_id' => $evaluateeId,
                ]
            );
        } catch (Exception $exception) {
            $finalRow = null;
        }

        if ($finalRow) {
            $updatedAtDisplay = null;
            $updatedAt = $finalRow['updated_at'] ?? null;
            if ($updatedAt !== null) {
                try {
                    $updatedAtObj = new DateTime($updatedAt, new DateTimeZone('Asia/Tehran'));
                    $updatedAtDisplay = UtilityHelper::englishToPersian($updatedAtObj->format('H:i Y/m/d'));
                } catch (Exception $exception) {
                    $updatedAtDisplay = UtilityHelper::englishToPersian((string) $updatedAt);
                }
            }

            $finalRecommendation = [
                'recommendation_text' => trim((string) ($finalRow['recommendation_text'] ?? '')),
                'development_text' => trim((string) ($finalRow['development_text'] ?? '')),
                'updated_at' => $finalRow['updated_at'] ?? null,
                'updated_at_display' => $updatedAtDisplay,
                'updated_by' => trim((string) ($finalRow['updated_by'] ?? '')),
            ];
        }

        $lastUpdatedDisplay = null;
        $lastUpdatedAgo = null;
        if ($lastUpdated !== null) {
            try {
                $updatedAt = new DateTime($lastUpdated, new DateTimeZone('Asia/Tehran'));
                $lastUpdatedDisplay = UtilityHelper::englishToPersian($updatedAt->format('H:i Y/m/d'));
                $lastUpdatedAgo = UtilityHelper::timeAgo($updatedAt->format('Y-m-d H:i:s'));
            } catch (Exception $exception) {
                $lastUpdatedDisplay = UtilityHelper::englishToPersian((string) $lastUpdated);
            }
        }

        $dateMeta = $this->formatEvaluationPersianDate($evaluationRow['evaluation_date'] ?? null);
        $scheduleTitle = null;
        $scheduleId = (int) ($evaluationRow['schedule_id'] ?? 0);
        if ($scheduleId > 0) {
            try {
                $scheduleRow = DatabaseHelper::fetchOne(
                    'SELECT evaluation_title FROM organization_evaluation_schedules WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                    [
                        'id' => $scheduleId,
                        'organization_id' => $organizationId,
                    ]
                );

                if ($scheduleRow) {
                    $scheduleTitle = trim((string) ($scheduleRow['evaluation_title'] ?? ''));
                }
            } catch (Exception $exception) {
                $scheduleTitle = null;
            }
        }

        $detailMode = function_exists('mb_strtolower')
            ? mb_strtolower($viewMode, 'UTF-8')
            : strtolower($viewMode);

        $detailMode = $detailMode === 'final' ? 'final' : 'washup';

        $canFinalize = $this->userHasAnyRequiredPermission($user, ['results_washup_final']);
        $roleLabel = $this->resolveOrganizationRoleLabelFromUser($user);
        $displayName = trim((string) ($user['name'] ?? ($user['username'] ?? 'کاربر سازمان')));

        $visibilityMessage = 'جزئیات Wash-Up بر اساس سطح دسترسی شما نمایش داده می‌شود.';
        if ($isSystemAdmin) {
            $visibilityMessage = 'به‌عنوان مدیر سیستم، تمام داده‌های Wash-Up قابل مشاهده است.';
        } elseif ($isManager) {
            $visibilityMessage = 'به‌عنوان مدیر سازمان، می‌توانید جزئیات کامل Wash-Up را مشاهده کنید.';
        } elseif ($isEvaluator) {
            $visibilityMessage = 'جزئیات مربوط به ارزیابی‌هایی که به شما محول شده است نمایش داده می‌شود.';
        } elseif ($isEvaluatee) {
            $visibilityMessage = 'جزئیات Wash-Up مربوط به ارزیابی خود شما نمایش داده می‌شود.';
        }

        $visibilityContext = [
            'role_label' => $roleLabel,
            'user_display' => $displayName,
            'message' => $visibilityMessage,
            'can_view_all' => $isSystemAdmin || $isManager,
            'is_evaluator' => $isEvaluator,
            'is_evaluatee' => $isEvaluatee,
        ];

        $evaluationSummary = [
            'id' => $evaluationId,
            'title' => trim((string) ($evaluationRow['title'] ?? 'بدون عنوان')),
            'date_display' => $dateMeta['display'],
            'general_model_label' => $generalModelLabel,
            'specific_model_label' => $specificModelLabel,
            'schedule_title' => $scheduleTitle,
        ];

        $evaluateeSummary = [
            'id' => $selectedEvaluatee['id'] ?? $evaluateeId,
            'label' => $selectedEvaluatee['label'] ?? ('ارزیابی‌شونده #' . UtilityHelper::englishToPersian((string) $evaluateeId)),
        ];

        $scorerSummary = array_values(array_map(static function (array $item): array {
            return [
                'id' => $item['id'] ?? 0,
                'label' => $item['label'] ?? '',
            ];
        }, $scorerMap));

        $pageMessages = [];
        if ($totalScoreCount === 0) {
            $pageMessages[] = [
                'type' => 'warning',
                'text' => 'برای این ارزیابی‌شونده هنوز امتیازی ثبت نشده است. لطفاً قبل از بررسی Wash-Up امتیازدهی را تکمیل کنید.',
            ];
        } elseif (!empty($toolsWithoutScores)) {
            $toolNames = array_map(static function (array $entry): string {
                return $entry['name'] ?? '';
            }, $toolsWithoutScores);
            $toolNames = array_filter($toolNames);
            if (!empty($toolNames)) {
                $pageMessages[] = [
                    'type' => 'info',
                    'text' => 'برای ابزارهای زیر هنوز امتیازی ثبت نشده است: ' . implode('، ', $toolNames),
                ];
            }
        }

        if ($detailMode === 'final' && !$canFinalize) {
            $pageMessages[] = [
                'type' => 'info',
                'text' => 'برای ثبت نهایی Wash-Up به دسترسی «ثبت نهایی Wash-Up» نیاز است.',
            ];
        }

        $backLink = UtilityHelper::baseUrl('organizations/wash-up');
        $listLink = $backLink;
        $washUpLink = UtilityHelper::baseUrl('organizations/wash-up/detail?evaluation_id=' . urlencode((string) $evaluationId) . '&evaluatee_id=' . urlencode((string) $evaluateeId));
        $finalLink = UtilityHelper::baseUrl('organizations/wash-up/final-recommendation?evaluation_id=' . urlencode((string) $evaluationId) . '&evaluatee_id=' . urlencode((string) $evaluateeId));
        $agreedScoresAction = UtilityHelper::baseUrl('organizations/wash-up/agreed-scores');
        $canEditAgreedScores = $canFinalize;

        $successMessage = ResponseHelper::getFlash('success');
        $errorMessage = ResponseHelper::getFlash('error');
        $warningMessage = ResponseHelper::getFlash('warning');
        $infoMessage = ResponseHelper::getFlash('info');

        include __DIR__ . '/../Views/organizations/wash-up/detail.php';
    }

    public function organizationWashUpFinalForm(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationSchedulesTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationMatrixVisibilityTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationUsersTableExists();
        $this->ensureOrganizationEvaluationFinalRecommendationsTableExists();

        $title = 'ثبت توصیه نهایی Wash-Up';
        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);
        $currentOrganizationUserId = (int) ($user['organization_user_id'] ?? 0);
        $accountSourceRaw = (string) ($user['account_source'] ?? '');
        $accountSource = $accountSourceRaw !== '' && function_exists('mb_strtolower')
            ? mb_strtolower($accountSourceRaw, 'UTF-8')
            : strtolower($accountSourceRaw);

        $flags = isset($user['organization_user_flags']) && is_array($user['organization_user_flags'])
            ? $user['organization_user_flags']
            : [];

        $isOwnerAccount = $accountSource === 'organizations';
        $isSystemAdmin = $isOwnerAccount || (int) ($flags['is_system_admin'] ?? 0) === 1;
        $isManager = (int) ($flags['is_manager'] ?? 0) === 1;
        $isEvaluator = (int) ($flags['is_evaluator'] ?? 0) === 1;
        $isEvaluatee = (int) ($flags['is_evaluee'] ?? 0) === 1;

        $evaluationIdInput = UtilityHelper::persianToEnglish(trim((string) ($_GET['evaluation_id'] ?? ($_GET['evaluation'] ?? ($_GET['id'] ?? '')))));
        $evaluateeIdInput = UtilityHelper::persianToEnglish(trim((string) ($_GET['evaluatee_id'] ?? ($_GET['evaluatee'] ?? ''))));

        $evaluationId = (int) $evaluationIdInput;
        $evaluateeId = $evaluateeIdInput !== '' ? (int) $evaluateeIdInput : 0;

        if ($evaluationId <= 0 || $evaluateeId <= 0) {
            ResponseHelper::flashError('اطلاعات لازم برای ثبت توصیه نهایی ناقص است.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/wash-up'));
        }

        [$evaluationTools, $toolMap, $organizationUsers, $userMap] = $this->loadEvaluationFormReferenceData($organizationId);

        try {
            $evaluationRow = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_evaluations WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $evaluationId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $evaluationRow = null;
        }

        if (!$evaluationRow) {
            ResponseHelper::flashError('ارزیابی مورد نظر یافت نشد یا دسترسی به آن مجاز نیست.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/wash-up'));
        }

        $evaluators = $this->decodeUserList($evaluationRow['evaluators_json'] ?? null, $userMap);
        $evaluatees = $this->decodeUserList($evaluationRow['evaluatees_json'] ?? null, $userMap);

        $evaluatorIds = array_map(static function (array $item): int {
            return (int) ($item['id'] ?? 0);
        }, $evaluators);

        $evaluateeIds = array_map(static function (array $item): int {
            return (int) ($item['id'] ?? 0);
        }, $evaluatees);

        if (!in_array($evaluateeId, $evaluateeIds, true)) {
            ResponseHelper::flashError('ارزیابی‌شونده انتخاب‌شده در این ارزیابی ثبت نشده است.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/wash-up'));
        }

        $canViewAll = $isSystemAdmin || $isManager;
        $allowed = $canViewAll;

        if (!$allowed && $currentOrganizationUserId > 0) {
            if ($isEvaluator && in_array($currentOrganizationUserId, $evaluatorIds, true)) {
                $allowed = true;
            }

            if (!$allowed && $isEvaluatee && in_array($currentOrganizationUserId, $evaluateeIds, true)) {
                $allowed = true;
            }

            if (!$allowed && in_array($currentOrganizationUserId, $evaluateeIds, true)) {
                $allowed = true;
            }
        }

        $washUpDetailLink = UtilityHelper::baseUrl('organizations/wash-up/detail?evaluation_id=' . urlencode((string) $evaluationId) . '&evaluatee_id=' . urlencode((string) $evaluateeId) . '&view=final');

        if (!$allowed) {
            ResponseHelper::flashError('شما مجاز به ثبت توصیه نهایی برای این ارزیابی‌شونده نیستید.');
            UtilityHelper::redirect($washUpDetailLink);
        }

        $canFinalize = $this->userHasAnyRequiredPermission($user, ['results_washup_final']);
        if (!$canFinalize) {
            ResponseHelper::flashError('برای ثبت توصیه نهایی دسترسی لازم را ندارید.');
            UtilityHelper::redirect($washUpDetailLink);
        }

        $selectedEvaluatee = null;
        foreach ($evaluatees as $evaluatee) {
            if ((int) ($evaluatee['id'] ?? 0) === $evaluateeId) {
                $selectedEvaluatee = $evaluatee;
                break;
            }
        }

        if ($selectedEvaluatee === null) {
            $selectedEvaluatee = [
                'id' => $evaluateeId,
                'label' => 'ارزیابی‌شونده #' . UtilityHelper::englishToPersian((string) $evaluateeId),
            ];
        }

        $generalModelLabel = trim((string) ($evaluationRow['general_model'] ?? ''));
        $specificModelLabel = trim((string) ($evaluationRow['specific_model'] ?? ''));

        $evaluationSummary = [
            'id' => $evaluationId,
            'title' => trim((string) ($evaluationRow['title'] ?? 'بدون عنوان')),
            'schedule_title' => trim((string) ($evaluationRow['schedule_title'] ?? '')),
            'general_model_label' => $generalModelLabel,
            'specific_model_label' => $specificModelLabel,
        ];

        $evaluateeSummary = [
            'id' => $selectedEvaluatee['id'] ?? $evaluateeId,
            'label' => $selectedEvaluatee['label'] ?? ('ارزیابی‌شونده #' . UtilityHelper::englishToPersian((string) $evaluateeId)),
        ];

        $finalRecommendation = null;
        try {
            $existingFinal = DatabaseHelper::fetchOne(
                'SELECT recommendation_text, development_text, updated_at, updated_by FROM organization_evaluation_final_recommendations WHERE organization_id = :organization_id AND evaluation_id = :evaluation_id AND evaluatee_id = :evaluatee_id LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'evaluation_id' => $evaluationId,
                    'evaluatee_id' => $evaluateeId,
                ]
            );
        } catch (Exception $exception) {
            $existingFinal = null;
        }

        if ($existingFinal) {
            $updatedAtDisplay = null;
            $updatedAt = $existingFinal['updated_at'] ?? null;
            if ($updatedAt !== null) {
                try {
                    $updatedAtObj = new DateTime($updatedAt, new DateTimeZone('Asia/Tehran'));
                    $updatedAtDisplay = UtilityHelper::englishToPersian($updatedAtObj->format('H:i Y/m/d'));
                } catch (Exception $exception) {
                    $updatedAtDisplay = UtilityHelper::englishToPersian((string) $updatedAt);
                }
            }

            $finalRecommendation = [
                'recommendation_text' => trim((string) ($existingFinal['recommendation_text'] ?? '')),
                'development_text' => trim((string) ($existingFinal['development_text'] ?? '')),
                'updated_at_display' => $updatedAtDisplay,
                'updated_by' => trim((string) ($existingFinal['updated_by'] ?? '')),
            ];
        }

        $formData = [
            'recommendation_text' => $finalRecommendation['recommendation_text'] ?? '',
            'development_text' => $finalRecommendation['development_text'] ?? '',
        ];

        $formAction = UtilityHelper::baseUrl('organizations/wash-up/final-recommendation');
        $cancelLink = $washUpDetailLink;

        $successMessage = ResponseHelper::getFlash('success');
        $errorMessage = ResponseHelper::getFlash('error');
        $warningMessage = ResponseHelper::getFlash('warning');
        $infoMessage = ResponseHelper::getFlash('info');

        include __DIR__ . '/../Views/organizations/wash-up/final-form.php';
    }

    public function storeOrganizationWashUpFinalRecommendation(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationSchedulesTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationMatrixVisibilityTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationUsersTableExists();
        $this->ensureOrganizationEvaluationFinalRecommendationsTableExists();

        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $evaluationIdInput = UtilityHelper::persianToEnglish(trim((string) ($_POST['evaluation_id'] ?? '')));
        $evaluateeIdInput = UtilityHelper::persianToEnglish(trim((string) ($_POST['evaluatee_id'] ?? '')));

        $evaluationId = (int) $evaluationIdInput;
        $evaluateeId = (int) $evaluateeIdInput;

        $redirectUrl = UtilityHelper::baseUrl('organizations/wash-up/final-recommendation?evaluation_id=' . urlencode((string) $evaluationId) . '&evaluatee_id=' . urlencode((string) $evaluateeId));

        if ($evaluationId <= 0 || $evaluateeId <= 0) {
            ResponseHelper::flashError('اطلاعات لازم برای ثبت توصیه نهایی ناقص است.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/wash-up'));
        }

        if (!$this->userHasAnyRequiredPermission($user, ['results_washup_final'])) {
            ResponseHelper::flashError('برای ثبت توصیه نهایی دسترسی لازم را ندارید.');
            UtilityHelper::redirect($redirectUrl);
        }

        [$evaluationTools, $toolMap, $organizationUsers, $userMap] = $this->loadEvaluationFormReferenceData($organizationId);

        try {
            $evaluationRow = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_evaluations WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $evaluationId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $evaluationRow = null;
        }

        if (!$evaluationRow) {
            ResponseHelper::flashError('ارزیابی مورد نظر یافت نشد یا دسترسی به آن مجاز نیست.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/wash-up'));
        }

        $evaluators = $this->decodeUserList($evaluationRow['evaluators_json'] ?? null, $userMap);
        $evaluatees = $this->decodeUserList($evaluationRow['evaluatees_json'] ?? null, $userMap);

        $currentOrganizationUserId = (int) ($user['organization_user_id'] ?? 0);
        $accountSourceRaw = (string) ($user['account_source'] ?? '');
        $accountSource = $accountSourceRaw !== '' && function_exists('mb_strtolower')
            ? mb_strtolower($accountSourceRaw, 'UTF-8')
            : strtolower($accountSourceRaw);

        $flags = isset($user['organization_user_flags']) && is_array($user['organization_user_flags'])
            ? $user['organization_user_flags']
            : [];

        $isOwnerAccount = $accountSource === 'organizations';
        $isSystemAdmin = $isOwnerAccount || (int) ($flags['is_system_admin'] ?? 0) === 1;
        $isManager = (int) ($flags['is_manager'] ?? 0) === 1;
        $isEvaluator = (int) ($flags['is_evaluator'] ?? 0) === 1;
        $isEvaluatee = (int) ($flags['is_evaluee'] ?? 0) === 1;

        $evaluateeIds = array_map(static function (array $item): int {
            return (int) ($item['id'] ?? 0);
        }, $evaluatees);

        if (!in_array($evaluateeId, $evaluateeIds, true)) {
            ResponseHelper::flashError('ارزیابی‌شونده انتخاب‌شده برای این ارزیابی ثبت نشده است.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/wash-up'));
        }

        $evaluatorIds = array_map(static function (array $item): int {
            return (int) ($item['id'] ?? 0);
        }, $evaluators);

        $canViewAll = $isSystemAdmin || $isManager;
        $allowed = $canViewAll;

        if (!$allowed && $currentOrganizationUserId > 0) {
            if ($isEvaluator && in_array($currentOrganizationUserId, $evaluatorIds, true)) {
                $allowed = true;
            }

            if (!$allowed && $isEvaluatee && in_array($currentOrganizationUserId, $evaluateeIds, true)) {
                $allowed = true;
            }

            if (!$allowed && in_array($currentOrganizationUserId, $evaluateeIds, true)) {
                $allowed = true;
            }
        }

        if (!$allowed) {
            ResponseHelper::flashError('شما مجاز به ثبت توصیه نهایی برای این ارزیابی‌شونده نیستید.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/wash-up'));
        }

        $recommendationText = trim((string) ($_POST['recommendation_text'] ?? ''));
        $developmentText = trim((string) ($_POST['development_text'] ?? ''));

        if ($recommendationText === '') {
            ResponseHelper::flashError('وارد کردن توصیه نهایی الزامی است.');
            UtilityHelper::redirect($redirectUrl);
        }

        $currentUserLabel = trim((string) ($user['name'] ?? ($user['username'] ?? 'کاربر سازمان')));
        $now = (new DateTime('now', new DateTimeZone('Asia/Tehran')))->format('Y-m-d H:i:s');

        try {
            DatabaseHelper::beginTransaction();

            $existingFinal = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_evaluation_final_recommendations WHERE organization_id = :organization_id AND evaluation_id = :evaluation_id AND evaluatee_id = :evaluatee_id LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'evaluation_id' => $evaluationId,
                    'evaluatee_id' => $evaluateeId,
                ]
            );

            $payload = [
                'recommendation_text' => $recommendationText,
                'development_text' => $developmentText,
                'updated_by' => $currentUserLabel,
                'updated_at' => $now,
            ];

            if ($existingFinal) {
                DatabaseHelper::update(
                    'organization_evaluation_final_recommendations',
                    $payload,
                    'id = :id',
                    ['id' => (int) ($existingFinal['id'] ?? 0)]
                );
            } else {
                $insertPayload = array_merge(
                    [
                        'organization_id' => $organizationId,
                        'evaluation_id' => $evaluationId,
                        'evaluatee_id' => $evaluateeId,
                        'created_by' => $currentUserLabel,
                        'created_at' => $now,
                    ],
                    $payload
                );

                DatabaseHelper::insert('organization_evaluation_final_recommendations', $insertPayload);
            }

            DatabaseHelper::commit();

            ResponseHelper::flashSuccess('توصیه نهایی با موفقیت ذخیره شد.');
        } catch (Exception $exception) {
            DatabaseHelper::rollback();
            ResponseHelper::flashError('در ذخیره‌سازی توصیه نهایی خطایی رخ داد. لطفاً دوباره تلاش کنید.');
        }

        UtilityHelper::redirect($redirectUrl);
    }

    public function storeOrganizationWashUpAgreedScores(): void
    {
        $sessionData = $this->ensureOrganizationSession();

        AuthHelper::startSession();

        $this->ensureOrganizationEvaluationSchedulesTableExists();
        $this->ensureOrganizationEvaluationsTableExists();
        $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationMatrixVisibilityTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolCompetenciesTableExists();
        $this->ensureOrganizationEvaluationToolScoresTableExists();
        $this->ensureOrganizationEvaluationAgreedScoresTableExists();
        $this->ensureOrganizationUsersTableExists();

        $user = $sessionData['user'];
        $organization = $sessionData['organization'];

        $organizationId = (int) ($organization['id'] ?? 0);

        $evaluationIdInput = UtilityHelper::persianToEnglish(trim((string) ($_POST['evaluation_id'] ?? '')));
        $evaluateeIdInput = UtilityHelper::persianToEnglish(trim((string) ($_POST['evaluatee_id'] ?? '')));

        $evaluationId = (int) $evaluationIdInput;
        $evaluateeId = (int) $evaluateeIdInput;

        $redirectUrl = UtilityHelper::baseUrl('organizations/wash-up/detail?evaluation_id=' . urlencode((string) $evaluationId) . '&evaluatee_id=' . urlencode((string) $evaluateeId));

        if ($evaluationId <= 0 || $evaluateeId <= 0) {
            ResponseHelper::flashError('اطلاعات لازم برای ثبت امتیاز توافقی ناقص است.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/wash-up'));
        }

        if (!$this->userHasAnyRequiredPermission($user, ['results_washup_final'])) {
            ResponseHelper::flashError('برای ثبت امتیاز توافقی دسترسی لازم را ندارید.');
            UtilityHelper::redirect($redirectUrl);
        }

        [$evaluationTools, $toolMap, $organizationUsers, $userMap] = $this->loadEvaluationFormReferenceData($organizationId);

        try {
            $evaluationRow = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_evaluations WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $evaluationId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $evaluationRow = null;
        }

        if (!$evaluationRow) {
            ResponseHelper::flashError('ارزیابی مورد نظر یافت نشد یا دسترسی به آن مجاز نیست.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/wash-up'));
        }

        $evaluators = $this->decodeUserList($evaluationRow['evaluators_json'] ?? null, $userMap);
        $evaluatees = $this->decodeUserList($evaluationRow['evaluatees_json'] ?? null, $userMap);

        $evaluateeIds = array_map(static function (array $item): int {
            return (int) ($item['id'] ?? 0);
        }, $evaluatees);

        if (!in_array($evaluateeId, $evaluateeIds, true)) {
            ResponseHelper::flashError('ارزیابی‌شونده انتخاب‌شده برای این ارزیابی ثبت نشده است.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/wash-up'));
        }

        $evaluatorIds = array_map(static function (array $item): int {
            return (int) ($item['id'] ?? 0);
        }, $evaluators);

        $currentOrganizationUserId = (int) ($user['organization_user_id'] ?? 0);
        $accountSourceRaw = (string) ($user['account_source'] ?? '');
        $accountSource = $accountSourceRaw !== '' && function_exists('mb_strtolower')
            ? mb_strtolower($accountSourceRaw, 'UTF-8')
            : strtolower($accountSourceRaw);

        $flags = isset($user['organization_user_flags']) && is_array($user['organization_user_flags'])
            ? $user['organization_user_flags']
            : [];

        $isOwnerAccount = $accountSource === 'organizations';
        $isSystemAdmin = $isOwnerAccount || (int) ($flags['is_system_admin'] ?? 0) === 1;
        $isManager = (int) ($flags['is_manager'] ?? 0) === 1;
        $isEvaluator = (int) ($flags['is_evaluator'] ?? 0) === 1;
        $isEvaluatee = (int) ($flags['is_evaluee'] ?? 0) === 1;

        $canViewAll = $isSystemAdmin || $isManager;
        $allowed = $canViewAll;

        if (!$allowed && $currentOrganizationUserId > 0) {
            if ($isEvaluator && in_array($currentOrganizationUserId, $evaluatorIds, true)) {
                $allowed = true;
            }

            if (!$allowed && $isEvaluatee && in_array($currentOrganizationUserId, $evaluateeIds, true)) {
                $allowed = true;
            }

            if (!$allowed && in_array($currentOrganizationUserId, $evaluateeIds, true)) {
                $allowed = true;
            }
        }

        if (!$allowed) {
            ResponseHelper::flashError('شما مجاز به ثبت امتیاز توافقی برای این ارزیابی‌شونده نیستید.');
            UtilityHelper::redirect($redirectUrl);
        }

        $agreedScoresInput = $_POST['agreed_scores'] ?? [];
        if (!is_array($agreedScoresInput)) {
            $agreedScoresInput = [];
        }

        $normalizeNumericValue = static function (string $value): string {
            $normalized = UtilityHelper::persianToEnglish(trim($value));
            $normalized = str_replace('٬', '', $normalized);
            $normalized = str_replace(['،', ','], '.', $normalized);
            return trim($normalized);
        };

        $processed = 0;
        $removed = 0;
        $invalidEntries = [];

        $currentUserLabel = trim((string) ($user['name'] ?? ($user['username'] ?? 'کاربر سازمان')));
        $now = (new DateTime('now', new DateTimeZone('Asia/Tehran')))->format('Y-m-d H:i:s');

        try {
            DatabaseHelper::beginTransaction();

            foreach ($agreedScoresInput as $competencyKey => $rawValue) {
                $competencyId = (int) $competencyKey;
                if ($competencyId <= 0) {
                    continue;
                }

                $rawString = is_scalar($rawValue) ? (string) $rawValue : '';
                $normalized = $normalizeNumericValue($rawString);

                $existingRow = DatabaseHelper::fetchOne(
                    'SELECT id FROM organization_evaluation_agreed_scores WHERE organization_id = :organization_id AND evaluation_id = :evaluation_id AND evaluatee_id = :evaluatee_id AND competency_id = :competency_id LIMIT 1',
                    [
                        'organization_id' => $organizationId,
                        'evaluation_id' => $evaluationId,
                        'evaluatee_id' => $evaluateeId,
                        'competency_id' => $competencyId,
                    ]
                );

                if ($normalized === '') {
                    if ($existingRow) {
                        DatabaseHelper::delete(
                            'organization_evaluation_agreed_scores',
                            'id = :id',
                            ['id' => (int) ($existingRow['id'] ?? 0)]
                        );
                        $removed++;
                    }
                    continue;
                }

                if (!is_numeric($normalized)) {
                    $invalidEntries[] = $competencyId;
                    continue;
                }

                $scoreValue = round((float) $normalized, 2);

                if ($existingRow) {
                    DatabaseHelper::update(
                        'organization_evaluation_agreed_scores',
                        [
                            'agreed_score' => $scoreValue,
                            'updated_by' => $currentUserLabel,
                            'updated_at' => $now,
                        ],
                        'id = :id',
                        ['id' => (int) ($existingRow['id'] ?? 0)]
                    );
                } else {
                    DatabaseHelper::insert(
                        'organization_evaluation_agreed_scores',
                        [
                            'organization_id' => $organizationId,
                            'evaluation_id' => $evaluationId,
                            'evaluatee_id' => $evaluateeId,
                            'competency_id' => $competencyId,
                            'agreed_score' => $scoreValue,
                            'created_by' => $currentUserLabel,
                            'updated_by' => $currentUserLabel,
                            'created_at' => $now,
                            'updated_at' => $now,
                        ]
                    );
                }

                $processed++;
            }

            DatabaseHelper::commit();
        } catch (Exception $exception) {
            DatabaseHelper::rollback();
            ResponseHelper::flashError('در ذخیره‌سازی امتیاز توافقی خطایی رخ داد. لطفاً دوباره تلاش کنید.');
            UtilityHelper::redirect($redirectUrl);
        }

        if (!empty($invalidEntries)) {
            $invalidList = array_map(static function (int $id): string {
                return UtilityHelper::englishToPersian((string) $id);
            }, $invalidEntries);
            $invalidList = implode('، ', $invalidList);
            ResponseHelper::flashWarning('مقادیر نامعتبر برای شایستگی‌های: ' . $invalidList . ' ثبت نشد.');
        }

        if ($processed > 0 || $removed > 0) {
            ResponseHelper::flashSuccess('امتیازهای توافقی با موفقیت ذخیره شدند.');
        } else {
            ResponseHelper::flashInfo('تغییری برای ذخیره ثبت نشد.');
        }

        UtilityHelper::redirect($redirectUrl);
    }

    private function formatEvaluationPersianDate(?string $gregorianDate): array
    {
        $default = [
            'display' => '—',
            'year' => null,
            'month' => null,
            'day' => null,
        ];

        if ($gregorianDate === null || trim($gregorianDate) === '') {
            return $default;
        }

        try {
            $timezone = new DateTimeZone('Asia/Tehran');
            $dateTime = new DateTime($gregorianDate, $timezone);
        } catch (Exception $exception) {
            return $default;
        }

        $calendarLocale = 'fa_IR@calendar=persian';
        $numericFormatter = new IntlDateFormatter(
            $calendarLocale,
            IntlDateFormatter::FULL,
            IntlDateFormatter::NONE,
            $dateTime->getTimezone(),
            IntlDateFormatter::TRADITIONAL,
            'yyyy-MM-dd'
        );

        if ($numericFormatter !== false) {
            $formatted = $numericFormatter->format($dateTime);
            if ($formatted !== false && $formatted !== null) {
                $formatted = UtilityHelper::persianToEnglish($formatted);
                $parts = explode('-', $formatted);
                if (count($parts) === 3) {
                    $year = (int) $parts[0];
                    $month = (int) $parts[1];
                    $day = (int) $parts[2];

                    return [
                        'display' => UtilityHelper::englishToPersian(sprintf('%04d/%02d/%02d', $year, $month, $day)),
                        'year' => $year,
                        'month' => $month,
                        'day' => $day,
                    ];
                }
            }
        }

        return [
            'display' => UtilityHelper::englishToPersian($dateTime->format('Y/m/d')),
            'year' => null,
            'month' => null,
            'day' => null,
        ];
    }

    private function decodeUserList($json, array $userMap): array
    {
        if (!is_string($json) || trim($json) === '') {
            return [];
        }

        $decoded = json_decode($json, true);
        if (!is_array($decoded)) {
            return [];
        }

        $result = [];
        foreach ($decoded as $value) {
            $userId = 0;
            $providedLabel = null;

            if (is_array($value)) {
                $userId = (int) ($value['id'] ?? 0);
                $providedLabel = isset($value['label']) ? trim((string) $value['label']) : null;
            } else {
                $userId = (int) $value;
            }

            if ($userId <= 0) {
                continue;
            }

            $label = $providedLabel !== null && $providedLabel !== ''
                ? $providedLabel
                : ($userMap[$userId] ?? ('کاربر #' . UtilityHelper::englishToPersian((string) $userId)));

            $result[] = [
                'id' => $userId,
                'label' => $label,
            ];
        }

        return $result;
    }

    private function buildCalendarLink(?int $year, ?int $month): string
    {
        if ($year === null || $month === null) {
            return UtilityHelper::baseUrl('organizations/evaluation-calendar');
        }

        return UtilityHelper::baseUrl('organizations/evaluation-calendar?year=' . urlencode((string) $year) . '&month=' . urlencode((string) $month));
    }

    private function resolveCompetencyModelByLabel(int $organizationId, string $label): ?array
    {
        $label = trim($label);

        if ($organizationId <= 0 || $label === '') {
            return null;
        }

        $labelNormalized = UtilityHelper::persianToEnglish($label);
        if ($labelNormalized !== '' && preg_match('/^\d+$/', $labelNormalized)) {
            $modelId = (int) $labelNormalized;
            if ($modelId > 0) {
                try {
                    $row = DatabaseHelper::fetchOne(
                        'SELECT id, title, code, scoring_type FROM organization_competency_models WHERE organization_id = :organization_id AND id = :id LIMIT 1',
                        [
                            'organization_id' => $organizationId,
                            'id' => $modelId,
                        ]
                    );
                } catch (Exception $exception) {
                    $row = null;
                }

                if ($row) {
                    return [
                        'id' => (int) ($row['id'] ?? 0),
                        'title' => trim((string) ($row['title'] ?? '')),
                        'code' => trim((string) ($row['code'] ?? '')),
                        'scoring_type' => $this->normalizeScoringType($row['scoring_type'] ?? ''),
                    ];
                }
            }
        }

        try {
            $row = DatabaseHelper::fetchOne(
                'SELECT id, title, code, scoring_type FROM organization_competency_models WHERE organization_id = :organization_id AND (title = :label OR code = :label) ORDER BY id ASC LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'label' => $label,
                ]
            );
        } catch (Exception $exception) {
            $row = null;
        }

        if ($row) {
            return [
                'id' => (int) ($row['id'] ?? 0),
                'title' => trim((string) ($row['title'] ?? '')),
                'code' => trim((string) ($row['code'] ?? '')),
                'scoring_type' => $this->normalizeScoringType($row['scoring_type'] ?? ''),
            ];
        }

        try {
            $row = DatabaseHelper::fetchOne(
                'SELECT id, title, code, scoring_type FROM organization_competency_models WHERE organization_id = :organization_id AND (title LIKE :pattern OR code LIKE :pattern) ORDER BY title ASC, id ASC LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'pattern' => '%' . $label . '%',
                ]
            );
        } catch (Exception $exception) {
            $row = null;
        }

        if ($row) {
            return [
                'id' => (int) ($row['id'] ?? 0),
                'title' => trim((string) ($row['title'] ?? '')),
                'code' => trim((string) ($row['code'] ?? '')),
                'scoring_type' => $this->normalizeScoringType($row['scoring_type'] ?? ''),
            ];
        }

        return null;
    }

    private function loadCompetenciesForModel(int $organizationId, int $modelId): array
    {
        if ($organizationId <= 0 || $modelId <= 0) {
            return [];
        }

        try {
            $rows = DatabaseHelper::fetchAll(
                'SELECT oc.id, oc.code, oc.title, oc.definition, ocd.name AS dimension_name
                 FROM organization_competency_model_items ocm
                 INNER JOIN organization_competencies oc
                    ON oc.id = ocm.competency_id AND oc.organization_id = ocm.organization_id
                 LEFT JOIN organization_competency_dimensions ocd
                    ON ocd.id = oc.competency_dimension_id AND ocd.organization_id = oc.organization_id
                 WHERE ocm.organization_id = :organization_id
                   AND ocm.model_id = :model_id
                 ORDER BY COALESCE(ocd.name, ""), oc.title ASC',
                [
                    'organization_id' => $organizationId,
                    'model_id' => $modelId,
                ]
            );
        } catch (Exception $exception) {
            $rows = [];
        }

        $competencies = [];
        foreach ($rows as $row) {
            $competencies[] = [
                'id' => (int) ($row['id'] ?? 0),
                'code' => trim((string) ($row['code'] ?? '')),
                'title' => trim((string) ($row['title'] ?? '')),
                'definition' => trim((string) ($row['definition'] ?? '')),
                'dimension' => trim((string) ($row['dimension_name'] ?? '')),
            ];
        }

        return $competencies;
    }

    private function loadEvaluationFormReferenceData(int $organizationId): array
    {
        $evaluationTools = [];
        $toolMap = [];
        try {
            $evaluationTools = DatabaseHelper::fetchAll(
                'SELECT id, name, question_type, is_exam FROM organization_evaluation_tools WHERE organization_id = :organization_id ORDER BY name ASC',
                ['organization_id' => $organizationId]
            );

            foreach ($evaluationTools as &$tool) {
                $toolId = (int) ($tool['id'] ?? 0);
                if ($toolId <= 0) {
                    continue;
                }

                $tool['id'] = $toolId;
                $tool['name'] = trim((string) ($tool['name'] ?? '')) ?: ('ابزار #' . $toolId);
                $tool['question_type'] = trim((string) ($tool['question_type'] ?? ''));
                $tool['is_exam'] = (int) ($tool['is_exam'] ?? 0);

                $toolMap[$toolId] = $tool['name'];
            }
            unset($tool);
        } catch (Exception $exception) {
            $evaluationTools = [];
            $toolMap = [];
        }

        $organizationUsers = [];
        $userMap = [];

        try {
            $organizationUsersRaw = DatabaseHelper::fetchAll(
                'SELECT id, first_name, last_name, username, is_evaluator, is_evaluee FROM organization_users WHERE organization_id = :organization_id ORDER BY first_name ASC, last_name ASC, username ASC',
                ['organization_id' => $organizationId]
            );

            $organizationUsers = [];

            foreach ($organizationUsersRaw as $organizationUser) {
                $userId = (int) ($organizationUser['id'] ?? 0);
                if ($userId <= 0) {
                    continue;
                }

                $firstName = trim((string) ($organizationUser['first_name'] ?? ''));
                $lastName = trim((string) ($organizationUser['last_name'] ?? ''));
                $username = trim((string) ($organizationUser['username'] ?? ''));

                $fullName = trim($firstName . ' ' . $lastName);
                if ($fullName === '') {
                    $fullName = $username !== '' ? $username : ('کاربر #' . $userId);
                }

                $normalizedUser = [
                    'id' => $userId,
                    'first_name' => $firstName,
                    'last_name' => $lastName,
                    'username' => $username,
                    'full_name' => $fullName,
                    'is_evaluator' => (int) ($organizationUser['is_evaluator'] ?? 0),
                    'is_evaluee' => (int) ($organizationUser['is_evaluee'] ?? 0),
                ];

                $organizationUsers[] = $normalizedUser;
                $userMap[$userId] = $fullName;
            }
        } catch (Exception $exception) {
            $organizationUsers = [];
            $userMap = [];
        }

        return [$evaluationTools, $toolMap, $organizationUsers, $userMap];
    }

    private function loadEvaluationModelSuggestions(int $organizationId): array
    {
        $suggestions = [
            'general' => [],
            'specific' => [],
        ];

        if ($organizationId <= 0) {
            return $suggestions;
        }

        $this->ensureOrganizationCompetencyModelsTableExists();
        $this->ensureOrganizationCompetencyModelItemsTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyDimensionsTableExists();
        $this->ensureOrganizationEvaluationsTableExists();

        $seen = [
            'general' => [],
            'specific' => [],
        ];

        try {
            $models = DatabaseHelper::fetchAll(
                'SELECT
                    m.id,
                    m.code,
                    m.title,
                    m.report_level,
                    COALESCE(SUM(CASE WHEN mi.competency_id IS NOT NULL THEN 1 ELSE 0 END), 0) AS total_competencies,
                    COALESCE(SUM(CASE WHEN mi.competency_id IS NOT NULL AND ocd.is_public = 1 THEN 1 ELSE 0 END), 0) AS public_competencies,
                    COALESCE(SUM(CASE WHEN mi.competency_id IS NOT NULL AND (ocd.is_public IS NULL OR ocd.is_public = 0) THEN 1 ELSE 0 END), 0) AS non_public_competencies
                 FROM organization_competency_models m
                 LEFT JOIN organization_competency_model_items mi
                    ON mi.model_id = m.id AND mi.organization_id = m.organization_id
                 LEFT JOIN organization_competencies oc
                    ON oc.id = mi.competency_id AND oc.organization_id = m.organization_id
                 LEFT JOIN organization_competency_dimensions ocd
                    ON ocd.id = oc.competency_dimension_id AND ocd.organization_id = m.organization_id
                 WHERE m.organization_id = :organization_id
                 GROUP BY m.id
                 ORDER BY m.title ASC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $models = [];
        }

        foreach ($models as $model) {
            $title = trim((string) ($model['title'] ?? ''));
            $code = trim((string) ($model['code'] ?? ''));
            $reportLevel = trim((string) ($model['report_level'] ?? ''));

            $label = $title !== '' ? $title : $code;
            if ($label === '') {
                continue;
            }

            $totalCompetencies = (int) ($model['total_competencies'] ?? 0);
            $publicCompetencies = (int) ($model['public_competencies'] ?? 0);
            $nonPublicCompetencies = (int) ($model['non_public_competencies'] ?? 0);

            $descriptionParts = [];
            if ($totalCompetencies > 0) {
                if ($publicCompetencies > 0) {
                    $descriptionParts[] = UtilityHelper::englishToPersian((string) $publicCompetencies) . ' شایستگی عمومی';
                }

                if ($nonPublicCompetencies > 0) {
                    $descriptionParts[] = UtilityHelper::englishToPersian((string) $nonPublicCompetencies) . ' شایستگی اختصاصی';
                }
            } else {
                $descriptionParts[] = 'شایستگی‌ای ثبت نشده است';
            }

            if ($reportLevel !== '') {
                $descriptionParts[] = 'سطح گزارش: ' . $reportLevel;
            }

            $description = implode(' | ', $descriptionParts);

            $entry = [
                'value' => (string) ($model['id'] ?? ''),
                'label' => $label,
                'code' => $code,
                'description' => $description,
                'source' => 'model',
                'meta' => [
                    'id' => (int) ($model['id'] ?? 0),
                    'title' => $label,
                    'code' => $code,
                    'total' => $totalCompetencies,
                    'public' => $publicCompetencies,
                    'non_public' => $nonPublicCompetencies,
                ],
            ];

            $this->appendEvaluationModelSuggestion($suggestions['general'], $seen['general'], $entry);

            if ($nonPublicCompetencies > 0) {
                $this->appendEvaluationModelSuggestion($suggestions['specific'], $seen['specific'], $entry);
            }
        }

        try {
            $generalRows = DatabaseHelper::fetchAll(
                'SELECT DISTINCT general_model
                 FROM organization_evaluations
                 WHERE organization_id = :organization_id
                   AND general_model IS NOT NULL
                   AND general_model <> ""
                 ORDER BY general_model ASC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $generalRows = [];
        }

        foreach ($generalRows as $row) {
            $value = trim((string) ($row['general_model'] ?? ''));
            if ($value === '') {
                continue;
            }

            $entry = [
                'value' => $value,
                'label' => $value,
                'description' => 'سوابق تقویم ارزیابی',
                'source' => 'history',
            ];

            $this->appendEvaluationModelSuggestion($suggestions['general'], $seen['general'], $entry);
        }

        try {
            $specificRows = DatabaseHelper::fetchAll(
                'SELECT DISTINCT specific_model
                 FROM organization_evaluations
                 WHERE organization_id = :organization_id
                   AND specific_model IS NOT NULL
                   AND specific_model <> ""
                 ORDER BY specific_model ASC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $specificRows = [];
        }

        foreach ($specificRows as $row) {
            $value = trim((string) ($row['specific_model'] ?? ''));
            if ($value === '') {
                continue;
            }

            $entry = [
                'value' => $value,
                'label' => $value,
                'description' => 'سوابق تقویم ارزیابی',
                'source' => 'history',
            ];

            $this->appendEvaluationModelSuggestion($suggestions['specific'], $seen['specific'], $entry);
        }

        return $suggestions;
    }

    private function appendEvaluationModelSuggestion(array &$target, array &$seen, array $entry): void
    {
        $value = isset($entry['value']) ? trim((string) $entry['value']) : '';
        if ($value === '') {
            return;
        }

        $key = $this->normalizeEvaluationModelSuggestionKey($value);
        if ($key === '' || isset($seen[$key])) {
            return;
        }

        $seen[$key] = true;
        $target[] = $entry;
    }

    private function normalizeEvaluationModelSuggestionKey(string $value): string
    {
        $normalized = UtilityHelper::persianToEnglish($value);
        $normalized = mb_strtolower($normalized, 'UTF-8');
        $normalized = preg_replace('/\s+/u', ' ', trim((string) $normalized));

        return (string) $normalized;
    }

    private function inferEvaluationModelCategory(string $value): ?string
    {
        $normalized = UtilityHelper::persianToEnglish($value);
        $normalized = mb_strtolower($normalized, 'UTF-8');

        $normalized = preg_replace('/\s+/u', ' ', trim((string) $normalized));

        $specificKeywords = ['اختصاص', 'specific', 'special', 'تخصص', 'حرفه', 'مهارت'];
        foreach ($specificKeywords as $keyword) {
            if ($keyword !== '' && mb_strpos($normalized, $keyword) !== false) {
                return 'specific';
            }
        }

        $generalKeywords = ['عمومی', 'general', 'پایه', 'سازمانی'];
        foreach ($generalKeywords as $keyword) {
            if ($keyword !== '' && mb_strpos($normalized, $keyword) !== false) {
                return 'general';
            }
        }

        return null;
    }

    private function resolveEvaluationModelValue(string $selectedValue, string $customValue): string
    {
        $selectedValue = trim($selectedValue);

        if ($selectedValue === '__custom__') {
            return trim($customValue);
        }

        return $selectedValue;
    }

    private function resolveEvaluationModelLabelForDisplay(int $organizationId, string $rawValue, array &$cache): string
    {
        $rawValue = trim($rawValue);

        if ($rawValue === '') {
            return '';
        }

        if (isset($cache[$rawValue])) {
            return $cache[$rawValue];
        }

        $englishValue = UtilityHelper::persianToEnglish($rawValue);
        if ($englishValue !== $rawValue && isset($cache[$englishValue])) {
            $cache[$rawValue] = $cache[$englishValue];
            return $cache[$rawValue];
        }

        $modelMeta = $this->resolveCompetencyModelByLabel($organizationId, $rawValue);
        if ($modelMeta && !empty($modelMeta['title'])) {
            $label = trim((string) $modelMeta['title']);

            if ($label !== '') {
                $cache[$rawValue] = $label;
                $cache[(string) ($modelMeta['id'] ?? '')] = $label;
                if ($englishValue !== $rawValue) {
                    $cache[$englishValue] = $label;
                }

                return $label;
            }
        }

        $cache[$rawValue] = $rawValue;
        if ($englishValue !== $rawValue) {
            $cache[$englishValue] = $rawValue;
        }

        return $rawValue;
    }

    private function generateEvaluationMatrixRows(array $assignments, array $evaluators, array $toolDetailsMap): array
    {
        $rows = [];

        foreach ($assignments as $assignment) {
            $toolId = (int) ($assignment['tool_id'] ?? 0);
            if ($toolId <= 0) {
                continue;
            }

            $tool = $toolDetailsMap[$toolId] ?? null;
            $toolName = $tool['name'] ?? ('ابزار #' . UtilityHelper::englishToPersian((string) $toolId));
            $toolOrder = (int) ($assignment['sort_order'] ?? 0);
            $isExam = (int) ($tool['is_exam'] ?? 0) === 1;

            if ($isExam) {
                $rows[] = [
                    'tool_id' => $toolId,
                    'tool_order' => $toolOrder,
                    'tool_name' => $toolName,
                    'is_exam' => true,
                    'evaluator_id' => 0,
                    'evaluator_label' => 'سامانه',
                    'evaluator_key' => '0',
                ];
                continue;
            }

            if (!empty($evaluators)) {
                foreach ($evaluators as $evaluator) {
                    $evaluatorId = (int) ($evaluator['id'] ?? 0);
                    $evaluatorLabel = $evaluator['label'] ?? 'ارزیاب';

                    $rows[] = [
                        'tool_id' => $toolId,
                        'tool_order' => $toolOrder,
                        'tool_name' => $toolName,
                        'is_exam' => false,
                        'evaluator_id' => $evaluatorId,
                        'evaluator_label' => $evaluatorLabel,
                        'evaluator_key' => (string) $evaluatorId,
                    ];
                }
            } else {
                $rows[] = [
                    'tool_id' => $toolId,
                    'tool_order' => $toolOrder,
                    'tool_name' => $toolName,
                    'is_exam' => false,
                    'evaluator_id' => 0,
                    'evaluator_label' => 'ارزیاب تعیین نشده',
                    'evaluator_key' => '0',
                ];
            }
        }

        if (!empty($rows)) {
            usort($rows, static function (array $a, array $b): int {
                $orderCompare = $a['tool_order'] <=> $b['tool_order'];
                if ($orderCompare !== 0) {
                    return $orderCompare;
                }

                $toolCompare = strcmp($a['tool_name'], $b['tool_name']);
                if ($toolCompare !== 0) {
                    return $toolCompare;
                }

                return strcmp($a['evaluator_label'], $b['evaluator_label']);
            });
        }

        return $rows;
    }

    private function sanitizeUserIds($input, array $userMap): array
    {
        if (!is_array($input)) {
            return [];
        }

        $ids = [];
        foreach ($input as $value) {
            $id = (int) UtilityHelper::persianToEnglish((string) $value);
            if ($id <= 0) {
                continue;
            }

            if (!isset($userMap[$id])) {
                continue;
            }

            $ids[$id] = $id;
        }

        return array_values($ids);
    }

    private function normalizeToolsOldInput($toolsRaw): array
    {
        if (!is_array($toolsRaw)) {
            return [];
        }

        $normalized = [];
        foreach ($toolsRaw as $toolIdKey => $toolData) {
            $toolId = (int) $toolIdKey;
            if ($toolId <= 0) {
                continue;
            }

            if (!is_array($toolData)) {
                $toolData = [];
            }

            $normalized[$toolId] = [
                'order' => trim((string) ($toolData['order'] ?? '')),
            ];
        }

        return $normalized;
    }

    private function sanitizeToolOrders($toolsRaw, array $toolMap): array
    {
        $orders = [];
        $errors = [];

        if (!is_array($toolsRaw)) {
            return [$orders, $errors];
        }

        foreach ($toolsRaw as $toolIdKey => $toolData) {
            $toolId = (int) $toolIdKey;
            if ($toolId <= 0 || !isset($toolMap[$toolId])) {
                continue;
            }

            if (!is_array($toolData)) {
                $toolData = [];
            }

            $orderRaw = UtilityHelper::persianToEnglish(trim((string) ($toolData['order'] ?? '')));

            if ($orderRaw === '') {
                continue;
            }

            if (!preg_match('/^\d+$/', $orderRaw)) {
                $errors['tools.' . $toolId] = 'ترتیب ابزار باید عددی معتبر باشد.';
                continue;
            }

            $order = (int) $orderRaw;
            if ($order <= 0 || $order > 1000) {
                $errors['tools.' . $toolId] = 'ترتیب ابزار باید بزرگ‌تر از صفر باشد.';
                continue;
            }

            $orders[$toolId] = $order;
        }

        if (!empty($orders)) {
            asort($orders, SORT_NUMERIC);
        }

        return [$orders, $errors];
    }

    private function upsertEvaluationSchedule(int $organizationId, string $title, string $date, string $userIdentifier, ?int $existingScheduleId = null): ?int
    {
        if ($organizationId <= 0 || $date === '') {
            return $existingScheduleId;
        }

        try {
            if ($existingScheduleId !== null && $existingScheduleId > 0) {
                DatabaseHelper::update(
                    'organization_evaluation_schedules',
                    [
                        'evaluation_title' => $title,
                        'evaluation_date' => $date,
                        'status' => 'برنامه‌ریزی شده',
                    ],
                    'id = :id AND organization_id = :organization_id',
                    [
                        'id' => $existingScheduleId,
                        'organization_id' => $organizationId,
                    ]
                );

                return $existingScheduleId;
            }

            $existing = DatabaseHelper::fetchOne(
                'SELECT id FROM organization_evaluation_schedules WHERE organization_id = :organization_id AND evaluation_title = :title AND evaluation_date = :date LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'title' => $title,
                    'date' => $date,
                ]
            );

            if ($existing) {
                return (int) ($existing['id'] ?? 0);
            }

            return (int) DatabaseHelper::insert('organization_evaluation_schedules', [
                'organization_id' => $organizationId,
                'evaluation_title' => $title,
                'evaluation_date' => $date,
                'status' => 'برنامه‌ریزی شده',
                'is_open' => 1,
                'created_by' => $userIdentifier,
            ]);
        } catch (Exception $exception) {
            return $existingScheduleId;
        }
    }

    private function maybeDeleteEvaluationSchedule(?int $scheduleId, int $organizationId): void
    {
        if ($scheduleId === null || $scheduleId <= 0) {
            return;
        }

        try {
            DatabaseHelper::delete(
                'organization_evaluation_schedules',
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $scheduleId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            // ignore
        }
    }

    private function buildExamImportContext(int $organizationId, array $evaluationTool): array
    {
        $context = [
            'recommended' => [],
            'others' => [],
            'has_exams' => false,
            'suggested_exam_id' => null,
            'total' => 0,
        ];

        try {
            $exams = DatabaseHelper::fetchAll(
                'SELECT id, title, slug, type, description, organization_id FROM exams ORDER BY title ASC'
            );
        } catch (Exception $exception) {
            return $context;
        }

        if (empty($exams)) {
            return $context;
        }

        $ranked = $this->rankExamsForEvaluationTool($evaluationTool, $exams, $organizationId);

        if (empty($ranked)) {
            $context['others'] = $exams;
            $context['has_exams'] = !empty($exams);
            $context['total'] = count($exams);
            if (!empty($exams)) {
                $context['suggested_exam_id'] = $exams[0]['id'] ?? null;
            }

            return $context;
        }

        $recommended = [];
        $others = [];

        foreach ($ranked as $exam) {
            $score = (int) ($exam['score'] ?? 0);
            if ($score > 0) {
                $recommended[] = $exam;
            } else {
                $others[] = $exam;
            }
        }

        if (empty($recommended)) {
            $others = $ranked;
        }

        $context['recommended'] = $recommended;
        $context['others'] = $others;
        $context['has_exams'] = true;
        $context['total'] = count($ranked);

        if (!empty($recommended)) {
            $context['suggested_exam_id'] = $recommended[0]['id'] ?? null;
        } elseif (!empty($others)) {
            $context['suggested_exam_id'] = $others[0]['id'] ?? null;
        }

        return $context;
    }

    private function rankExamsForEvaluationTool(array $evaluationTool, array $exams, int $organizationId): array
    {
        if (empty($exams)) {
            return [];
        }

        $rawTokens = [];
        $slugTokens = [];

        foreach (['calculation_formula', 'question_type', 'code', 'name'] as $field) {
            if (!empty($evaluationTool[$field])) {
                $value = trim((string) $evaluationTool[$field]);
                if ($value === '') {
                    continue;
                }

                $rawTokens[] = mb_strtolower($value);
                $slugTokens[] = UtilityHelper::slugify($value);
            }
        }

        $rawTokens = array_values(array_filter(array_unique($rawTokens)));
        $slugTokens = array_values(array_filter(array_unique($slugTokens)));

        foreach ($exams as &$exam) {
            $score = 0;
            $examSlug = isset($exam['slug']) ? UtilityHelper::slugify((string) $exam['slug']) : '';
            $examType = mb_strtolower((string) ($exam['type'] ?? ''));
            $examTitleLower = mb_strtolower((string) ($exam['title'] ?? ''));

            foreach ($slugTokens as $token) {
                if ($token === '') {
                    continue;
                }

                if ($examSlug !== '' && $examSlug === $token) {
                    $score += 30;
                } elseif ($examSlug !== '' && $this->stringContains($examSlug, $token)) {
                    $score += 12;
                } elseif ($examSlug !== '' && $this->stringContains($token, $examSlug)) {
                    $score += 8;
                }

                if ($examType !== '') {
                    if ($examType === $token) {
                        $score += 24;
                    } elseif ($this->stringContains($examType, $token) || $this->stringContains($token, $examType)) {
                        $score += 10;
                    }
                }
            }

            foreach ($rawTokens as $rawToken) {
                if ($rawToken === '') {
                    continue;
                }

                if ($examTitleLower !== '' && mb_stripos($examTitleLower, $rawToken) !== false) {
                    $score += 6;
                }
            }

            if ((int) ($exam['organization_id'] ?? 0) === $organizationId && $organizationId > 0) {
                $score += 15;
            } elseif (empty($exam['organization_id'])) {
                $score += 4;
            }

            $exam['score'] = $score;
        }
        unset($exam);

        usort($exams, function ($a, $b) {
            $scoreA = (int) ($a['score'] ?? 0);
            $scoreB = (int) ($b['score'] ?? 0);

            if ($scoreA === $scoreB) {
                return strnatcasecmp((string) ($a['title'] ?? ''), (string) ($b['title'] ?? ''));
            }

            return $scoreB <=> $scoreA;
        });

        return $exams;
    }

    private function stringContains(?string $haystack, ?string $needle, bool $caseInsensitive = true): bool
    {
        if ($haystack === null || $needle === null) {
            return false;
        }

        $needle = (string) $needle;
        if ($needle === '') {
            return true;
        }

        $haystack = (string) $haystack;

        if ($caseInsensitive) {
            return mb_stripos($haystack, $needle) !== false;
        }

        return mb_strpos($haystack, $needle) !== false;
    }

    private function extractOptionsFromExamQuestion(array $examQuestion): array
    {
        $optionsRaw = $examQuestion['options'] ?? null;

        if (is_string($optionsRaw) && $optionsRaw !== '') {
            $decoded = json_decode($optionsRaw, true);
            if (json_last_error() !== JSON_ERROR_NONE) {
                $decoded = null;
            }
        } elseif (is_array($optionsRaw)) {
            $decoded = $optionsRaw;
        } else {
            $decoded = null;
        }

        if (!is_array($decoded)) {
            return [];
        }

        $answerKeyRaw = $examQuestion['answer_key'] ?? '';
        $answerKey = '';

        if (is_array($answerKeyRaw)) {
            if (isset($answerKeyRaw['value'])) {
                $answerKey = (string) $answerKeyRaw['value'];
            } elseif (isset($answerKeyRaw[0])) {
                $answerKey = (string) $answerKeyRaw[0];
            } elseif (!empty($answerKeyRaw)) {
                $answerKey = (string) json_encode($answerKeyRaw, JSON_UNESCAPED_UNICODE);
            }
        } else {
            $answerKey = trim((string) $answerKeyRaw);
        }

        $answerKeyLower = mb_strtolower($answerKey);

        $normalized = [];
        $autoLetters = range('A', 'Z');
        $index = 0;

        foreach ($decoded as $key => $option) {
            $code = '';
            $label = '';
            $numericScore = null;
            $characterScore = null;

            if (is_array($option)) {
                $codeCandidates = [
                    $option['value'] ?? null,
                    $option['code'] ?? null,
                    $option['key'] ?? null,
                ];

                foreach ($codeCandidates as $candidate) {
                    if ($candidate !== null && trim((string) $candidate) !== '') {
                        $code = trim((string) $candidate);
                        break;
                    }
                }

                $labelCandidates = [
                    $option['label'] ?? null,
                    $option['text'] ?? null,
                    $option['title'] ?? null,
                    $option['description'] ?? null,
                ];

                foreach ($labelCandidates as $candidate) {
                    if ($candidate !== null && trim((string) $candidate) !== '') {
                        $label = trim((string) $candidate);
                        break;
                    }
                }

                if (isset($option['score'])) {
                    $scoreValue = $option['score'];
                    if (is_numeric($scoreValue)) {
                        $numericScore = (float) $scoreValue;
                    } elseif (is_array($scoreValue)) {
                        if (isset($scoreValue['points']) && is_numeric($scoreValue['points'])) {
                            $numericScore = (float) $scoreValue['points'];
                        }

                        if (isset($scoreValue['dimension']) && trim((string) $scoreValue['dimension']) !== '') {
                            $characterScore = trim((string) $scoreValue['dimension']);
                        } elseif (isset($scoreValue['label']) && trim((string) $scoreValue['label']) !== '') {
                            $characterScore = trim((string) $scoreValue['label']);
                        }
                    } elseif (is_string($scoreValue) && trim($scoreValue) !== '') {
                        if (is_numeric($scoreValue)) {
                            $numericScore = (float) $scoreValue;
                        } else {
                            $characterScore = trim($scoreValue);
                        }
                    }
                }
            } else {
                $label = trim((string) $option);
            }

            if ($code === '') {
                if (is_string($key) && trim($key) !== '') {
                    $code = trim((string) $key);
                } else {
                    $code = $autoLetters[$index] ?? ('OP' . ($index + 1));
                }
            }

            if ($label === '') {
                if (is_string($option)) {
                    $label = $option;
                } else {
                    $label = json_encode($option, JSON_UNESCAPED_UNICODE);
                }
            }

            $isCorrect = 0;

            if ($answerKeyLower !== '' && (mb_strtolower($code) === $answerKeyLower || mb_strtolower($label) === $answerKeyLower)) {
                $isCorrect = 1;
            }

            $normalized[] = [
                'code' => $code,
                'option' => $label,
                'numeric_score' => $numericScore,
                'character_score' => $characterScore,
                'is_correct' => $isCorrect,
            ];

            $index++;
        }

        $hasCorrectAnswer = false;
        foreach ($normalized as $item) {
            if ((int) ($item['is_correct'] ?? 0) === 1) {
                $hasCorrectAnswer = true;
                break;
            }
        }

        if (!$hasCorrectAnswer && !empty($normalized)) {
            $normalized[0]['is_correct'] = 1;
        }

        return $normalized;
    }

    private function ensureExamsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS exams (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    slug VARCHAR(255) DEFAULT NULL,
    description TEXT DEFAULT NULL,
    type VARCHAR(100) NOT NULL DEFAULT 'generic',
    config LONGTEXT DEFAULT NULL,
    passing_score DECIMAL(5,2) DEFAULT NULL,
    status VARCHAR(32) NOT NULL DEFAULT 'draft',
    start_at DATETIME DEFAULT NULL,
    end_at DATETIME DEFAULT NULL,
    creator_type VARCHAR(32) NOT NULL DEFAULT 'superadmin',
    creator_id INT UNSIGNED DEFAULT NULL,
    organization_id INT UNSIGNED DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uniq_exams_slug (slug),
    KEY idx_exams_creator (creator_type, creator_id),
    KEY idx_exams_org (organization_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Silent failure; subsequent queries will reveal missing table issues if any remain.
        }

        $ensured = true;
    }

    private function ensureExamQuestionsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS exam_questions (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    exam_id INT UNSIGNED NOT NULL,
    question_code VARCHAR(64) DEFAULT NULL,
    question_text TEXT NOT NULL,
    question_type VARCHAR(50) NOT NULL DEFAULT 'single_choice',
    options LONGTEXT DEFAULT NULL,
    answer_key VARCHAR(255) DEFAULT NULL,
    weight DECIMAL(6,2) NOT NULL DEFAULT 1.00,
    metadata LONGTEXT DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
    KEY idx_exam_questions_exam (exam_id),
    KEY idx_exam_questions_code (question_code)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Silent failure.
        }

        $ensured = true;
    }

    private function ensureOrganizationEvaluationToolsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_evaluation_tools (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    code VARCHAR(191) NOT NULL,
    name VARCHAR(255) NOT NULL,
    question_type VARCHAR(191) NOT NULL,
    guide TEXT NULL,
    description TEXT NULL,
    duration_minutes INT UNSIGNED NULL,
    is_optional TINYINT(1) DEFAULT 0,
    calculation_formula TEXT NULL,
    is_exam TINYINT(1) DEFAULT 0,
    is_result_only TINYINT(1) DEFAULT 0,
    questions_count INT UNSIGNED DEFAULT 0,
    created_by VARCHAR(191) NULL,
    updated_by VARCHAR(191) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uniq_org_eval_tool_code (organization_id, code),
    INDEX idx_org_eval_tool_org (organization_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Silent failure; subsequent queries will surface issues.
        }

        $this->ensureOrganizationEvaluationToolsColumn('guide', 'TEXT NULL');
        $this->ensureOrganizationEvaluationToolsColumn('description', 'TEXT NULL');
        $this->ensureOrganizationEvaluationToolsColumn('calculation_formula', 'TEXT NULL');
        $this->ensureOrganizationEvaluationToolsColumn('questions_count', 'INT UNSIGNED DEFAULT 0');
        $this->ensureOrganizationEvaluationToolsColumn('updated_by', 'VARCHAR(191) NULL');
        $this->ensureOrganizationEvaluationToolsIndex('idx_org_eval_tool_org', 'INDEX idx_org_eval_tool_org (organization_id)');
        $this->ensureOrganizationEvaluationToolsIndex('uniq_org_eval_tool_code', 'UNIQUE KEY uniq_org_eval_tool_code (organization_id, code)');

        $ensured = true;
    }

    private function ensureOrganizationEvaluationToolsColumn(string $column, string $definition): void
    {
        try {
            $columnExists = DatabaseHelper::fetchOne(
                'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND COLUMN_NAME = :column LIMIT 1',
                ['table' => 'organization_evaluation_tools', 'column' => $column]
            );

            if (!$columnExists) {
                DatabaseHelper::query("ALTER TABLE organization_evaluation_tools ADD COLUMN {$column} {$definition}");
            }
        } catch (Exception $exception) {
            // Silent failure.
        }
    }

    private function ensureOrganizationEvaluationToolsIndex(string $indexName, string $definition): void
    {
        try {
            $indexExists = DatabaseHelper::fetchOne(
                'SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND INDEX_NAME = :index LIMIT 1',
                ['table' => 'organization_evaluation_tools', 'index' => $indexName]
            );

            if (!$indexExists) {
                DatabaseHelper::query("ALTER TABLE organization_evaluation_tools ADD {$definition}");
            }
        } catch (Exception $exception) {
            // Silent failure.
        }
    }

    private function ensureOrganizationEvaluationToolQuestionsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_evaluation_tool_questions (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    evaluation_tool_id BIGINT UNSIGNED NOT NULL,
    code VARCHAR(191) NOT NULL,
    title VARCHAR(255) NOT NULL,
    question_text TEXT NOT NULL,
    description TEXT NULL,
    image_path VARCHAR(255) NULL,
    display_order INT UNSIGNED DEFAULT 0,
    is_description_only TINYINT(1) DEFAULT 0,
    created_by VARCHAR(191) NULL,
    updated_by VARCHAR(191) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uniq_question_code (organization_id, evaluation_tool_id, code),
    INDEX idx_questions_tool (organization_id, evaluation_tool_id),
    INDEX idx_questions_order (organization_id, evaluation_tool_id, display_order)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Ignore creation failure; queries will surface issues later.
        }

        $ensured = true;
    }

    private function ensureOrganizationEvaluationExamParticipationsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_evaluation_exam_participations (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    evaluation_id BIGINT UNSIGNED NOT NULL,
    tool_id BIGINT UNSIGNED NOT NULL,
    evaluatee_id BIGINT UNSIGNED NOT NULL,
    tool_code VARCHAR(100) NULL,
    tool_name VARCHAR(255) NULL,
    question_type VARCHAR(100) NULL,
    is_disc TINYINT(1) NOT NULL DEFAULT 0,
    is_optional TINYINT(1) NOT NULL DEFAULT 0,
    total_questions INT UNSIGNED NOT NULL DEFAULT 0,
    answered_questions INT UNSIGNED NOT NULL DEFAULT 0,
    is_completed TINYINT(1) NOT NULL DEFAULT 0,
    completed_at DATETIME NULL,
    created_at DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uniq_exam_participation (organization_id, evaluation_id, tool_id, evaluatee_id),
    KEY idx_exam_participations_lookup (organization_id, evaluation_id, tool_id),
    KEY idx_exam_participations_evaluatee (organization_id, evaluatee_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Ignore creation failure; downstream queries will surface issues.
        }

        $ensured = true;
    }

    private function ensureOrganizationEvaluationExamAnswersTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_evaluation_exam_answers (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    participation_id BIGINT UNSIGNED NOT NULL,
    organization_id BIGINT UNSIGNED NOT NULL,
    evaluation_id BIGINT UNSIGNED NOT NULL,
    tool_id BIGINT UNSIGNED NOT NULL,
    evaluatee_id BIGINT UNSIGNED NOT NULL,
    question_id BIGINT UNSIGNED NOT NULL,
    question_title VARCHAR(255) NULL,
    question_text TEXT NULL,
    question_description TEXT NULL,
    is_description_only TINYINT(1) NOT NULL DEFAULT 0,
    requires_answer TINYINT(1) NOT NULL DEFAULT 0,
    answer_id BIGINT UNSIGNED NULL,
    answer_code VARCHAR(100) NULL,
    answer_text TEXT NULL,
    disc_best_answer_id BIGINT UNSIGNED NULL,
    disc_best_answer_code VARCHAR(100) NULL,
    disc_best_answer_text TEXT NULL,
    disc_least_answer_id BIGINT UNSIGNED NULL,
    disc_least_answer_code VARCHAR(100) NULL,
    disc_least_answer_text TEXT NULL,
    answer_payload LONGTEXT NULL,
    created_at DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    KEY idx_exam_answers_participation (participation_id),
    KEY idx_exam_answers_question (organization_id, evaluation_id, tool_id, question_id),
    CONSTRAINT fk_exam_answers_participation FOREIGN KEY (participation_id) REFERENCES organization_evaluation_exam_participations (id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Ignore creation failure; downstream queries will surface issues.
        }

        $ensured = true;
    }

    private function ensureOrganizationEvaluationToolAnswersTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_evaluation_tool_answers (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    evaluation_tool_id BIGINT UNSIGNED NOT NULL,
    question_id BIGINT UNSIGNED NOT NULL,
    answer_code VARCHAR(191) NOT NULL,
    option_text TEXT NOT NULL,
    numeric_score DECIMAL(10,2) NULL,
    character_score VARCHAR(191) NULL,
    display_order INT UNSIGNED DEFAULT 0,
    is_correct TINYINT(1) DEFAULT 0,
    created_by VARCHAR(191) NULL,
    updated_by VARCHAR(191) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_answers_question (question_id),
    INDEX idx_answers_tool (organization_id, evaluation_tool_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Ignore creation failure; subsequent queries will surface issues.
        }

        $ensured = true;
    }

    private function ensureOrganizationEvaluationToolCompetenciesTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_evaluation_tool_competencies (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    evaluation_tool_id BIGINT UNSIGNED NOT NULL,
    model_id BIGINT UNSIGNED NOT NULL DEFAULT 0,
    competency_id BIGINT UNSIGNED NOT NULL,
    created_by VARCHAR(191) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE KEY uniq_tool_competency_model (organization_id, model_id, evaluation_tool_id, competency_id),
    INDEX idx_tool_competency_tool (organization_id, evaluation_tool_id),
    INDEX idx_tool_competency_comp (organization_id, competency_id),
    INDEX idx_tool_competency_model (organization_id, model_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Silent failure; subsequent queries will surface issues.
        }

        try {
            $columnExists = DatabaseHelper::fetchOne(
                "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'organization_evaluation_tool_competencies' AND COLUMN_NAME = 'model_id' LIMIT 1"
            );

            if (!$columnExists) {
                DatabaseHelper::query('ALTER TABLE organization_evaluation_tool_competencies ADD COLUMN model_id BIGINT UNSIGNED NOT NULL DEFAULT 0 AFTER evaluation_tool_id');
            }

            DatabaseHelper::query('UPDATE organization_evaluation_tool_competencies SET model_id = 0 WHERE model_id IS NULL');

            $newUniqueExists = DatabaseHelper::fetchOne(
                "SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'organization_evaluation_tool_competencies' AND INDEX_NAME = 'uniq_tool_competency_model' LIMIT 1"
            );

            if (!$newUniqueExists) {
                $oldUniqueExists = DatabaseHelper::fetchOne(
                    "SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'organization_evaluation_tool_competencies' AND INDEX_NAME = 'uniq_tool_competency' LIMIT 1"
                );

                if ($oldUniqueExists) {
                    DatabaseHelper::query('ALTER TABLE organization_evaluation_tool_competencies DROP INDEX uniq_tool_competency');
                }

                DatabaseHelper::query('ALTER TABLE organization_evaluation_tool_competencies ADD UNIQUE KEY uniq_tool_competency_model (organization_id, model_id, evaluation_tool_id, competency_id)');
            }

            $modelIndexExists = DatabaseHelper::fetchOne(
                "SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'organization_evaluation_tool_competencies' AND INDEX_NAME = 'idx_tool_competency_model' LIMIT 1"
            );

            if (!$modelIndexExists) {
                DatabaseHelper::query('ALTER TABLE organization_evaluation_tool_competencies ADD INDEX idx_tool_competency_model (organization_id, model_id)');
            }
        } catch (Exception $exception) {
            // Silent failure; schema adjustments best-effort.
        }

        $ensured = true;
    }

    private function ensureOrganizationDevelopmentProgramsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_development_programs (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    competency_id BIGINT UNSIGNED NULL,
    course_code VARCHAR(191) NOT NULL,
    course_title VARCHAR(255) NOT NULL,
    syllabus TEXT NULL,
    course_hours INT UNSIGNED NOT NULL DEFAULT 0,
    created_by VARCHAR(191) NULL,
    updated_by VARCHAR(191) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uniq_org_course_code (organization_id, course_code),
    INDEX idx_org_competency (organization_id, competency_id),
    INDEX idx_org_created_at (organization_id, created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Silent failure; queries will surface issues later.
        }

        try {
            $organizationColumn = DatabaseHelper::fetchOne(
                "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'organization_development_programs' AND COLUMN_NAME = 'organization_id' LIMIT 1"
            );

            if (!$organizationColumn) {
                DatabaseHelper::query('ALTER TABLE organization_development_programs ADD COLUMN organization_id BIGINT UNSIGNED NOT NULL DEFAULT 0 AFTER id');
            }

            $courseHoursColumn = DatabaseHelper::fetchOne(
                "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'organization_development_programs' AND COLUMN_NAME = 'course_hours' LIMIT 1"
            );

            if (!$courseHoursColumn) {
                DatabaseHelper::query('ALTER TABLE organization_development_programs ADD COLUMN course_hours INT UNSIGNED NOT NULL DEFAULT 0 AFTER course_title');
            }

            $uniqueIndex = DatabaseHelper::fetchOne(
                "SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'organization_development_programs' AND INDEX_NAME = 'uniq_org_course_code' LIMIT 1"
            );

            if (!$uniqueIndex) {
                DatabaseHelper::query('ALTER TABLE organization_development_programs ADD UNIQUE KEY uniq_org_course_code (organization_id, course_code)');
            }
        } catch (Exception $exception) {
            // Silent failure; schema adjustments attempted on best-effort basis.
        }

        $ensured = true;
    }

    private function refreshEvaluationToolQuestionsCount(int $organizationId, int $toolId): void
    {
        try {
            $countResult = DatabaseHelper::fetchOne(
                'SELECT COUNT(*) AS cnt FROM organization_evaluation_tool_questions WHERE organization_id = :organization_id AND evaluation_tool_id = :tool_id',
                [
                    'organization_id' => $organizationId,
                    'tool_id' => $toolId,
                ]
            );

            $questionsCount = (int) ($countResult['cnt'] ?? 0);

            DatabaseHelper::update(
                'organization_evaluation_tools',
                ['questions_count' => $questionsCount],
                'id = :id AND organization_id = :organization_id',
                [
                    'id' => $toolId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            // Silent failure.
        }
    }

    private function mapIntlDayOfWeekToPersianIndex(int $dayOfWeek): int
    {
        $mapping = [
            IntlCalendar::DOW_SATURDAY => 0,
            IntlCalendar::DOW_SUNDAY => 1,
            IntlCalendar::DOW_MONDAY => 2,
            IntlCalendar::DOW_TUESDAY => 3,
            IntlCalendar::DOW_WEDNESDAY => 4,
            IntlCalendar::DOW_THURSDAY => 5,
            IntlCalendar::DOW_FRIDAY => 6,
        ];

        return $mapping[$dayOfWeek] ?? 0;
    }

    private function getIranProvincesWithCities(): array
    {
        return [
            'آذربایجان شرقی' => ['تبریز', 'مراغه', 'مرند', 'اهر', 'سراب', 'بناب', 'شبستر', 'هریس', 'عجب‌شیر', 'اسکو'],
            'آذربایجان غربی' => ['ارومیه', 'خوی', 'میاندوآب', 'بوکان', 'سلماس', 'پیرانشهر', 'نقده', 'مهاباد', 'سردشت'],
            'اردبیل' => ['اردبیل', 'مشگین‌شهر', 'خلخال', 'پارس‌آباد', 'گرمی', 'نمین', 'نیر', 'بیله‌سوار'],
            'اصفهان' => ['اصفهان', 'کاشان', 'خمینی‌شهر', 'نجف‌آباد', 'شاهین‌شهر', 'فلاورجان', 'لنجان', 'شهرضا', 'سمیرم'],
            'البرز' => ['کرج', 'فردیس', 'نظرآباد', 'هشتگرد', 'طالقان', 'اشتهارد', 'ماهدشت'],
            'ایلام' => ['ایلام', 'دهلران', 'ایوان', 'مهران', 'آبدانان', 'دره‌شهر', 'سرابله', 'بدره'],
            'بوشهر' => ['بوشهر', 'برازجان', 'کنگان', 'گناوه', 'دشتستان', 'دشتی', 'جم', 'دیر', 'عسلویه'],
            'تهران' => ['تهران', 'ری', 'اسلام‌شهر', 'شهریار', 'قدس', 'ورامین', 'ملارد', 'پردیس', 'دماوند', 'فیروزکوه'],
            'چهارمحال و بختیاری' => ['شهرکرد', 'بروجن', 'فارسان', 'لردگان', 'سامان', 'کوهرنگ', 'اردل'],
            'خراسان جنوبی' => ['بیرجند', 'قاین', 'نهبندان', 'طبس', 'فردوس', 'سربیشه', 'سرایان'],
            'خراسان رضوی' => ['مشهد', 'نیشابور', 'سبزوار', 'تربت‌جام', 'تربت‌حیدریه', 'قوچان', 'کاشمر', 'چناران', 'گناباد'],
            'خراسان شمالی' => ['بجنورد', 'شیروان', 'اسفراین', 'آشخانه', 'جاجرم', 'فاروج', 'گرمه'],
            'خوزستان' => ['اهواز', 'آبادان', 'خرمشهر', 'دزفول', 'اندیمشک', 'شوشتر', 'بهبهان', 'ماهشهر', 'ایذه', 'رامهرمز'],
            'زنجان' => ['زنجان', 'ابهر', 'خرمدره', 'قیدار', 'سلطانیه', 'طارم', 'ماه‌نشان'],
            'سمنان' => ['سمنان', 'شاهرود', 'دامغان', 'گرمسار', 'مهدی‌شهر', 'سرخه'],
            'سیستان و بلوچستان' => ['زاهدان', 'چابهار', 'ایرانشهر', 'زابل', 'سراوان', 'خاش', 'کنارک', 'نیک‌شهر'],
            'فارس' => ['شیراز', 'مرودشت', 'کازرون', 'لار', 'جهرم', 'فسا', 'داراب', 'آباده', 'سپیدان', 'اقلید'],
            'قزوین' => ['قزوین', 'البرز', 'آبیک', 'تاکستان', 'بوئین‌زهرا', 'محمدیه'],
            'قم' => ['قم', 'جعفریه', 'کهک', 'قنوات'],
            'کردستان' => ['سنندج', 'سقز', 'مریوان', 'بانه', 'بیجار', 'قروه', 'دیواندره', 'کامیاران'],
            'کرمان' => ['کرمان', 'سیرجان', 'رفسنجان', 'جیرفت', 'بم', 'زرند', 'کهنوج', 'راور', 'بردسیر'],
            'کرمانشاه' => ['کرمانشاه', 'اسلام‌آباد غرب', 'سنقر', 'سرپل ذهاب', 'کنگاور', 'هرسین', 'گیلانغرب'],
            'کهگیلویه و بویراحمد' => ['یاسوج', 'دهدشت', 'گچساران', 'دوگنبدان', 'باشت', 'لیکک', 'سی‌سخت'],
            'گلستان' => ['گرگان', 'گنبدکاووس', 'علی‌آباد', 'آق‌قلا', 'کلاله', 'مینودشت', 'کردکوی', 'بندرترکمن'],
            'گیلان' => ['رشت', 'انزلی', 'لاهیجان', 'لنگرود', 'آستانه‌اشرفیه', 'رودسر', 'تالش', 'فومن', 'صومعه‌سرا'],
            'لرستان' => ['خرم‌آباد', 'بروجرد', 'دورود', 'الیگودرز', 'کوهدشت', 'ازنا', 'پلدختر'],
            'مازندران' => ['ساری', 'بابل', 'آمل', 'قائم‌شهر', 'تنکابن', 'نوشهر', 'چالوس', 'رامسر', 'بابلسر'],
            'مرکزی' => ['اراک', 'ساوه', 'خمین', 'محلات', 'شازند', 'دلیجان', 'کمیجان'],
            'هرمزگان' => ['بندرعباس', 'بندرلنگه', 'قشم', 'میناب', 'بستک', 'حاجی‌آباد', 'جاسک', 'پارسیان'],
            'همدان' => ['همدان', 'ملایر', 'نهاوند', 'کبودرآهنگ', 'بهار', 'تویسرکان', 'اسدآباد'],
            'یزد' => ['یزد', 'میبد', 'اردکان', 'بافق', 'مهریز', 'ابرکوه', 'اشکذر'],
        ];
    }

    private function ensureOrganizationServiceLocationsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_service_locations (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    code VARCHAR(100) NOT NULL,
    name VARCHAR(255) NOT NULL,
    user_id VARCHAR(191) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_org_service_locations_code (organization_id, code),
    INDEX idx_org_service_locations_org (organization_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Fail silently; subsequent queries will handle any errors.
        }

        $ensured = true;
    }

    private function ensureReportSettingsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_report_settings (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    identifier VARCHAR(100) NOT NULL,
    code VARCHAR(100) NOT NULL,
    name VARCHAR(255) NOT NULL,
    report_name VARCHAR(255) NOT NULL,
    report_for VARCHAR(255) NULL,
    level VARCHAR(100) NULL,
    report_intro TEXT NULL,
    evaluation_process TEXT NULL,
    model_definition TEXT NULL,
    competency_intro TEXT NULL,
    regulation TEXT NULL,
    organization_id BIGINT UNSIGNED NOT NULL,
    user_id VARCHAR(191) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_org_identifier (organization_id, identifier)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // If table creation fails we cannot proceed further
        }

        $ensured = true;
    }

    private function ensureOrganizationCertificateSettingsTableExists(): void
    {
        static $ensured = false;

        if ($ensured) { return; }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_certificate_settings (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    title_ribbon_text VARCHAR(191) NOT NULL,
    statement_text VARCHAR(255) NOT NULL,
    show_org_logo TINYINT(1) DEFAULT 1,
    show_signatures TINYINT(1) DEFAULT 1,
    enable_decorations TINYINT(1) DEFAULT 1,
    pdf_mode VARCHAR(20) DEFAULT 'simple',
    extra_footer_text VARCHAR(255) NULL,
    user_id VARCHAR(191) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uq_org_cert_settings (organization_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // ignore
        }

        // Add missing columns if the table exists
        try {
            $pdo = DatabaseHelper::getConnection();
            // template_key
            $tplCol = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'template_key'");
            $tplCol->execute();
            if (!$tplCol->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN template_key VARCHAR(50) NOT NULL DEFAULT 'classic' AFTER statement_text");
            }
            // FOURTH PAGE columns
            $fp1 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'enable_fourth_page'");
            $fp1->execute();
            if (!$fp1->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN enable_fourth_page TINYINT(1) DEFAULT 0 AFTER enable_third_page");
            }
            $fp2 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'fourth_page_title_ribbon_text'");
            $fp2->execute();
            if (!$fp2->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN fourth_page_title_ribbon_text VARCHAR(191) NULL AFTER third_page_title_ribbon_text");
            }
            $fp3 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'fourth_page_text'");
            $fp3->execute();
            if (!$fp3->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN fourth_page_text LONGTEXT NULL AFTER fourth_page_title_ribbon_text");
            }
            $fp4 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'fourth_page_image_path'");
            $fp4->execute();
            if (!$fp4->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN fourth_page_image_path VARCHAR(255) NULL AFTER third_page_image_height_mm");
            }
            $fp5 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'fourth_page_image_width_mm'");
            $fp5->execute();
            if (!$fp5->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN fourth_page_image_width_mm DECIMAL(6,2) NULL AFTER fourth_page_image_path");
            }
            $fp6 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'fourth_page_image_height_mm'");
            $fp6->execute();
            if (!$fp6->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN fourth_page_image_height_mm DECIMAL(6,2) NULL AFTER fourth_page_image_width_mm");
            }
            // THIRD PAGE: enable flag
            $tp1 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'enable_third_page'");
            $tp1->execute();
            if (!$tp1->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN enable_third_page TINYINT(1) DEFAULT 0 AFTER enable_second_page");
            }
            // THIRD PAGE: title text
            $tp2 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'third_page_title_ribbon_text'");
            $tp2->execute();
            if (!$tp2->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN third_page_title_ribbon_text VARCHAR(191) NULL AFTER second_page_title_ribbon_text");
            }
            // THIRD PAGE: image path
            $tp3 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'third_page_image_path'");
            $tp3->execute();
            if (!$tp3->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN third_page_image_path VARCHAR(255) NULL AFTER second_page_image_height_mm");
            }
            // THIRD PAGE: image width mm
            $tp4 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'third_page_image_width_mm'");
            $tp4->execute();
            if (!$tp4->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN third_page_image_width_mm DECIMAL(6,2) NULL AFTER third_page_image_path");
            }
            // THIRD PAGE: image height mm
            $tp5 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'third_page_image_height_mm'");
            $tp5->execute();
            if (!$tp5->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN third_page_image_height_mm DECIMAL(6,2) NULL AFTER third_page_image_width_mm");
            }
            $builderCol = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'builder_state_json'");
            $builderCol->execute();
            if (!$builderCol->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN builder_state_json LONGTEXT NULL AFTER extra_footer_text");
            }
            $builderVersionCol = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'builder_state_version'");
            $builderVersionCol->execute();
            if (!$builderVersionCol->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN builder_state_version INT UNSIGNED NULL AFTER builder_state_json");
            }
            $builderTemplatesCol = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'builder_templates_json'");
            $builderTemplatesCol->execute();
            if (!$builderTemplatesCol->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN builder_templates_json LONGTEXT NULL AFTER builder_state_version");
            }
            $builderComponentsCol = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'builder_components_json'");
            $builderComponentsCol->execute();
            if (!$builderComponentsCol->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN builder_components_json LONGTEXT NULL AFTER builder_templates_json");
            }
            $builderToolsCol = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'builder_assessment_tools_json'");
            $builderToolsCol->execute();
            if (!$builderToolsCol->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN builder_assessment_tools_json LONGTEXT NULL AFTER builder_components_json");
            }
            // THIRD PAGE: items json
            $tp6 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'third_page_items_json'");
            $tp6->execute();
            if (!$tp6->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN third_page_items_json LONGTEXT NULL AFTER third_page_image_height_mm");
            }
            // Page order JSON
            $po = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'page_order_json'");
            $po->execute();
            if (!$po->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN page_order_json LONGTEXT NULL AFTER third_page_items_json");
            }
            // FIFTH PAGE columns
            $fifth1 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'enable_fifth_page'");
            $fifth1->execute();
            if (!$fifth1->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN enable_fifth_page TINYINT(1) DEFAULT 0 AFTER enable_fourth_page");
            }
            $fifth2 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'fifth_page_title_ribbon_text'");
            $fifth2->execute();
            if (!$fifth2->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN fifth_page_title_ribbon_text VARCHAR(191) NULL AFTER fourth_page_title_ribbon_text");
            }
            $fifth3 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'fifth_page_text'");
            $fifth3->execute();
            if (!$fifth3->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN fifth_page_text LONGTEXT NULL AFTER fifth_page_title_ribbon_text");
            }
            // SIXTH PAGE columns
            $sixth1 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'enable_sixth_page'");
            $sixth1->execute();
            if (!$sixth1->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN enable_sixth_page TINYINT(1) DEFAULT 0 AFTER enable_fifth_page");
            }
            $sixth2 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'sixth_page_title_ribbon_text'");
            $sixth2->execute();
            if (!$sixth2->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN sixth_page_title_ribbon_text VARCHAR(191) NULL AFTER fifth_page_title_ribbon_text");
            }
            $sixth3 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'sixth_page_text'");
            $sixth3->execute();
            if (!$sixth3->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN sixth_page_text LONGTEXT NULL AFTER sixth_page_title_ribbon_text");
            }
            // TEXT ALIGN columns for pages 4-7
            $align4 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'fourth_page_text_align'");
            $align4->execute();
            if (!$align4->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN fourth_page_text_align VARCHAR(20) NULL AFTER fourth_page_text");
            }
            $align5 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'fifth_page_text_align'");
            $align5->execute();
            if (!$align5->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN fifth_page_text_align VARCHAR(20) NULL AFTER fifth_page_text");
            }
            $align6 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'sixth_page_text_align'");
            $align6->execute();
            if (!$align6->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN sixth_page_text_align VARCHAR(20) NULL AFTER sixth_page_text");
            }
            $align7 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'seventh_page_text_align'");
            $align7->execute();
            if (!$align7->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN seventh_page_text_align VARCHAR(20) NULL AFTER seventh_page_text");
            }
            // SEVENTH PAGE columns
            $seventh1 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'enable_seventh_page'");
            $seventh1->execute();
            if (!$seventh1->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN enable_seventh_page TINYINT(1) DEFAULT 0 AFTER enable_sixth_page");
            }
            $seventh2 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'seventh_page_title_ribbon_text'");
            $seventh2->execute();
            if (!$seventh2->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN seventh_page_title_ribbon_text VARCHAR(191) NULL AFTER sixth_page_title_ribbon_text");
            }
            $seventh3 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'seventh_page_text'");
            $seventh3->execute();
            if (!$seventh3->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN seventh_page_text LONGTEXT NULL AFTER seventh_page_title_ribbon_text");
            }
            $seventh4 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'seventh_page_image_path'");
            $seventh4->execute();
            if (!$seventh4->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN seventh_page_image_path VARCHAR(255) NULL AFTER seventh_page_text");
            }
            // EIGHTH PAGE columns
            $eighth1 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'enable_eighth_page'");
            $eighth1->execute();
            if (!$eighth1->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN enable_eighth_page TINYINT(1) DEFAULT 0 AFTER enable_seventh_page");
            }
            $eighth2 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'eighth_page_title_ribbon_text'");
            $eighth2->execute();
            if (!$eighth2->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN eighth_page_title_ribbon_text VARCHAR(191) NULL AFTER seventh_page_title_ribbon_text");
            }
            // NINTH PAGE columns
            $ninth1 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'enable_ninth_page'");
            $ninth1->execute();
            if (!$ninth1->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN enable_ninth_page TINYINT(1) DEFAULT 0 AFTER enable_eighth_page");
            }
            $ninth2 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'ninth_page_title_ribbon_text'");
            $ninth2->execute();
            if (!$ninth2->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN ninth_page_title_ribbon_text VARCHAR(191) NULL AFTER eighth_page_title_ribbon_text");
            }
            $ninth3 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'ninth_page_text'");
            $ninth3->execute();
            if (!$ninth3->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN ninth_page_text LONGTEXT NULL AFTER ninth_page_title_ribbon_text");
            }
            $ninth4 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'ninth_page_text_align'");
            $ninth4->execute();
            if (!$ninth4->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN ninth_page_text_align VARCHAR(20) NULL AFTER ninth_page_text");
            }
            $ninth5 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'ninth_page_items_json'");
            $ninth5->execute();
            if (!$ninth5->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN ninth_page_items_json LONGTEXT NULL AFTER ninth_page_text_align");
            }
            // TENTH PAGE (MBTI intro)
            $tenth1 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'enable_tenth_page'");
            $tenth1->execute();
            if (!$tenth1->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN enable_tenth_page TINYINT(1) DEFAULT 0 AFTER enable_ninth_page");
            }
            $tenth2 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'tenth_page_title_ribbon_text'");
            $tenth2->execute();
            if (!$tenth2->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN tenth_page_title_ribbon_text VARCHAR(191) NULL AFTER ninth_page_title_ribbon_text");
            }
            $tenth3 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'tenth_page_text'");
            $tenth3->execute();
            if (!$tenth3->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN tenth_page_text LONGTEXT NULL AFTER tenth_page_title_ribbon_text");
            }
            $tenth4 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'tenth_page_text_align'");
            $tenth4->execute();
            if (!$tenth4->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN tenth_page_text_align VARCHAR(20) NULL AFTER tenth_page_text");
            }
            // ELEVENTH PAGE (MBTI results)
            $eleventh1 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'enable_eleventh_page'");
            $eleventh1->execute();
            if (!$eleventh1->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN enable_eleventh_page TINYINT(1) DEFAULT 0 AFTER enable_tenth_page");
            }
            $eleventh2 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'eleventh_page_title_ribbon_text'");
            $eleventh2->execute();
            if (!$eleventh2->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN eleventh_page_title_ribbon_text VARCHAR(191) NULL AFTER tenth_page_title_ribbon_text");
            }
            $eleventh3 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'eleventh_page_text'");
            $eleventh3->execute();
            if (!$eleventh3->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN eleventh_page_text LONGTEXT NULL AFTER eleventh_page_title_ribbon_text");
            }
            $eleventh4 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'eleventh_page_text_align'");
            $eleventh4->execute();
            if (!$eleventh4->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN eleventh_page_text_align VARCHAR(20) NULL AFTER eleventh_page_text");
            }
            // THIRTEENTH PAGE (DISC results)
            $thirteenth1 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'enable_thirteenth_page'");
            $thirteenth1->execute();
            if (!$thirteenth1->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN enable_thirteenth_page TINYINT(1) DEFAULT 0 AFTER eleventh_page_text_align");
            }
            $thirteenth2 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'thirteenth_page_title_ribbon_text'");
            $thirteenth2->execute();
            if (!$thirteenth2->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN thirteenth_page_title_ribbon_text VARCHAR(191) NULL AFTER enable_thirteenth_page");
            }
            $thirteenth3 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'thirteenth_page_text'");
            $thirteenth3->execute();
            if (!$thirteenth3->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN thirteenth_page_text LONGTEXT NULL AFTER thirteenth_page_title_ribbon_text");
            }
            $thirteenth4 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'thirteenth_page_text_align'");
            $thirteenth4->execute();
            if (!$thirteenth4->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN thirteenth_page_text_align VARCHAR(20) NULL AFTER thirteenth_page_text");
            }
            // FIFTEENTH PAGE (Analytical Thinking results)
            $fifteenth1 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'enable_fifteenth_page'");
            $fifteenth1->execute();
            if (!$fifteenth1->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN enable_fifteenth_page TINYINT(1) DEFAULT 0 AFTER thirteenth_page_text_align");
            }
            $fifteenth2 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'fifteenth_page_title_ribbon_text'");
            $fifteenth2->execute();
            if (!$fifteenth2->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN fifteenth_page_title_ribbon_text VARCHAR(191) NULL AFTER enable_fifteenth_page");
            }
            $fifteenth3 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'fifteenth_page_text'");
            $fifteenth3->execute();
            if (!$fifteenth3->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN fifteenth_page_text LONGTEXT NULL AFTER fifteenth_page_title_ribbon_text");
            }
            $fifteenth4 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'fifteenth_page_text_align'");
            $fifteenth4->execute();
            if (!$fifteenth4->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN fifteenth_page_text_align VARCHAR(20) NULL AFTER fifteenth_page_text");
            }
            // enable_second_page
            $col = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'enable_second_page'");
            $col->execute();
            if (!$col->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN enable_second_page TINYINT(1) DEFAULT 0 AFTER enable_decorations");
            }
            // second_page_image_path
            $col2 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'second_page_image_path'");
            $col2->execute();
            if (!$col2->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN second_page_image_path VARCHAR(255) NULL AFTER pdf_mode");
            }
            // second_page_image_width_mm
            $col3 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'second_page_image_width_mm'");
            $col3->execute();
            if (!$col3->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN second_page_image_width_mm DECIMAL(6,2) NULL AFTER second_page_image_path");
            }
            // second_page_image_height_mm
            $col4 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'second_page_image_height_mm'");
            $col4->execute();
            if (!$col4->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN second_page_image_height_mm DECIMAL(6,2) NULL AFTER second_page_image_width_mm");
            }
            // second_page_title_ribbon_text
            $col5 = $pdo->prepare("SHOW COLUMNS FROM organization_certificate_settings LIKE 'second_page_title_ribbon_text'");
            $col5->execute();
            if (!$col5->fetch()) {
                DatabaseHelper::query("ALTER TABLE organization_certificate_settings ADD COLUMN second_page_title_ribbon_text VARCHAR(191) NULL AFTER enable_second_page");
            }
        } catch (Exception $e) {
            // best-effort
        }

        $ensured = true;
    }

    private function ensureOrganizationUsersTableExists(): void
    {
        static $ensured = false;

        if ($ensured) {
            return;
        }

        try {
            $createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS organization_users (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id BIGINT UNSIGNED NOT NULL,
    user_id VARCHAR(191) NULL,
    organization_name VARCHAR(191) NULL,
    username VARCHAR(150) NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    gender VARCHAR(20) NULL,
    evaluation_code VARCHAR(100) NOT NULL,
    national_code VARCHAR(20) NOT NULL,
    personnel_code VARCHAR(50) NOT NULL,
    email VARCHAR(191) NULL,
    executive_devices VARCHAR(255) NULL,
    is_system_admin TINYINT(1) DEFAULT 0,
    is_manager TINYINT(1) DEFAULT 0,
    is_evaluee TINYINT(1) DEFAULT 0,
    is_evaluator TINYINT(1) DEFAULT 0,
    is_active TINYINT(1) DEFAULT 1,
    province VARCHAR(191) NULL,
    city VARCHAR(191) NULL,
    expiration_date VARCHAR(50) NULL,
    report_date VARCHAR(50) NULL,
    show_report_date_instead_of_calendar TINYINT(1) DEFAULT 0,
    service_location VARCHAR(191) NULL,
    organization_post VARCHAR(191) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_org_users_org (organization_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
SQL;

            DatabaseHelper::query($createTableSql);
        } catch (Exception $exception) {
            // Fail silently; fetching will handle errors with flash
        }

        $this->ensureOrganizationUsersColumn('organization_users', 'username', 'VARCHAR(150) NOT NULL', 'ADD COLUMN');
        $this->ensureOrganizationUsersColumn('organization_users', 'password_hash', 'VARCHAR(255) NOT NULL', 'ADD COLUMN');
        $this->ensureOrganizationUsersColumn('organization_users', 'national_code', 'VARCHAR(20) NOT NULL', 'ADD COLUMN');
        $this->ensureOrganizationUsersColumn('organization_users', 'personnel_code', 'VARCHAR(50) NOT NULL', 'ADD COLUMN');
        $this->ensureOrganizationUsersColumn('organization_users', 'email', 'VARCHAR(191) NULL', 'ADD COLUMN');
        $this->ensureOrganizationUsersColumn('organization_users', 'executive_devices', 'VARCHAR(255) NULL', 'ADD COLUMN');
        $this->ensureOrganizationUsersColumn('organization_users', 'expiration_date', 'VARCHAR(50) NULL', 'ADD COLUMN');
        $this->ensureOrganizationUsersColumn('organization_users', 'report_date', 'VARCHAR(50) NULL', 'ADD COLUMN');
        $this->ensureOrganizationUsersColumn('organization_users', 'show_report_date_instead_of_calendar', 'TINYINT(1) DEFAULT 0', 'ADD COLUMN');
        $this->ensureOrganizationUsersColumn('organization_users', 'service_location', 'VARCHAR(191) NULL', 'ADD COLUMN');
        $this->ensureOrganizationUsersColumn('organization_users', 'organization_post', 'VARCHAR(191) NULL', 'ADD COLUMN');
        $this->ensureOrganizationUsersColumn('organization_users', 'organization_name', 'VARCHAR(191) NULL', 'ADD COLUMN');
        $this->ensureOrganizationUsersColumn('organization_users', 'organization_role_id', 'BIGINT UNSIGNED NULL', 'ADD COLUMN');

        $this->ensureOrganizationUsersIndex('organization_users', 'uq_org_users_username', 'UNIQUE KEY uq_org_users_username (organization_id, username)');
        $this->ensureOrganizationUsersIndex('organization_users', 'idx_org_users_role', 'INDEX idx_org_users_role (organization_role_id)');

        $ensured = true;
    }

    private function getDefaultMatrixRoleNames(): array
    {
        return [
            'مدیر سامانه',
            'ارزیاب',
            'ارزیابی شونده',
        ];
    }

    private function getRoleAccessMatrixDefinitions(): array
    {
        return [
            ['key' => 'dashboard_overview_view', 'group' => 'داشبورد', 'label' => 'مشاهده داشبورد'],

            ['key' => 'org_report_settings_manage', 'group' => 'مدیریت سازمان', 'label' => 'تنظیمات گزارشات'],
            ['key' => 'org_posts_manage', 'group' => 'مدیریت سازمان', 'label' => 'پست‌های سازمانی'],
            ['key' => 'org_service_locations_manage', 'group' => 'مدیریت سازمان', 'label' => 'محل‌های خدمت'],

            ['key' => 'users_manage_roles', 'group' => 'مدیریت دسترسی‌ها', 'label' => 'مدیریت نقش‌ها'],
            ['key' => 'role_access_matrix_manage', 'group' => 'مدیریت دسترسی‌ها', 'label' => 'ماتریس نقش دسترسی'],
            ['key' => 'executive_units_manage', 'group' => 'مدیریت دسترسی‌ها', 'label' => 'دستگاه‌های اجرایی'],
            ['key' => 'users_manage_users', 'group' => 'مدیریت دسترسی‌ها', 'label' => 'کاربران سازمان'],
            ['key' => 'users_manage_user_roles', 'group' => 'مدیریت دسترسی‌ها', 'label' => 'ماتریس نقش کاربران'],

            ['key' => 'evaluation_calendar_manage', 'group' => 'مدیریت گروه‌های ارزیابی', 'label' => 'تقویم ارزیابی'],
            ['key' => 'evaluation_calendar_matrix_manage', 'group' => 'مدیریت گروه‌های ارزیابی', 'label' => 'ماتریس تقویم ارزشیابی'],

            ['key' => 'tools_manage', 'group' => 'مدیریت ابزارها', 'label' => 'ابزارهای ارزیابی'],
            ['key' => 'tools_mbti_settings_manage', 'group' => 'مدیریت ابزارها', 'label' => 'تنظیمات آزمون MBTI'],
            ['key' => 'tools_disc_settings_manage', 'group' => 'مدیریت ابزارها', 'label' => 'تنظیمات آزمون DISC'],
            ['key' => 'tools_neo_settings_manage', 'group' => 'مدیریت ابزارها', 'label' => 'تنظیمات آزمون NEO'],
            ['key' => 'tools_view', 'group' => 'مدیریت ابزارها', 'label' => 'مشاهده ابزارهای ارزیابی'],

            ['key' => 'competency_dimensions_manage', 'group' => 'مدیریت شایستگی', 'label' => 'ابعاد شایستگی'],
            ['key' => 'competencies_manage', 'group' => 'مدیریت شایستگی', 'label' => 'شایستگی‌ها'],
            ['key' => 'competency_model_manage', 'group' => 'مدیریت شایستگی', 'label' => 'مدل شایستگی'],
            ['key' => 'competency_features_manage', 'group' => 'مدیریت شایستگی', 'label' => 'ویژگی‌های شایستگی'],
            ['key' => 'competency_model_matrix_manage', 'group' => 'مدیریت شایستگی', 'label' => 'ماتریس مدل شایستگی'],
            ['key' => 'tool_competency_matrix_manage', 'group' => 'مدیریت شایستگی', 'label' => 'ماتریس شایستگی ابزار'],
            ['key' => 'competencies_view', 'group' => 'مدیریت شایستگی', 'label' => 'مشاهده شایستگی‌ها'],

            ['key' => 'courses_manage', 'group' => 'مدیریت دوره‌های آموزشی', 'label' => 'برنامه‌های توسعه فردی'],
            ['key' => 'courses_view', 'group' => 'مدیریت دوره‌های آموزشی', 'label' => 'مشاهده دوره‌های آموزشی'],

            ['key' => 'results_exam_questionwise', 'group' => 'ثبت نتایج', 'label' => 'ثبت نتایج آزمون به تفکیک سؤال'],
            ['key' => 'results_exam_register', 'group' => 'ثبت نتایج', 'label' => 'ثبت نتایج آزمون'],
            ['key' => 'results_tool_score_manage', 'group' => 'ثبت نتایج', 'label' => 'ثبت امتیاز ابزار'],
            ['key' => 'results_assessment_register', 'group' => 'ثبت نتایج', 'label' => 'ارزیابی‌های فعال'],
            ['key' => 'results_washup_register', 'group' => 'ثبت نتایج', 'label' => 'Wash-Up'],
            ['key' => 'results_excel_report', 'group' => 'ثبت نتایج', 'label' => 'گزارش اکسل'],
            ['key' => 'results_resume_selected', 'group' => 'ثبت نتایج', 'label' => 'رزومه‌های منتخب'],
            ['key' => 'results_washup_final', 'group' => 'ثبت نتایج', 'label' => 'ثبت نهایی Wash-Up'],

            ['key' => 'reports_self_view', 'group' => 'گزارشات', 'label' => 'مشاهده نتایج خود ارزیابی کاربران'],
            ['key' => 'reports_final_view', 'group' => 'گزارشات', 'label' => 'گزارش نهایی ارزیابی'],
            ['key' => 'reports_dev_program_view', 'group' => 'گزارشات', 'label' => 'گزارش برنامه‌های توسعه فردی'],
            ['key' => 'reports_settings_manage', 'group' => 'گزارشات', 'label' => 'تنظیمات گزارش ارزیابی'],
            ['key' => 'reports_dashboard_view', 'group' => 'گزارشات', 'label' => 'داشبورد نتایج'],
        ];
    }

    private function ensureOrganizationDefaultRoles(int $organizationId, string $userIdentifier, array $roleNames): array
    {
        $roles = [];

        foreach ($roleNames as $roleName) {
            $existingRole = null;

            try {
                $existingRole = DatabaseHelper::fetchOne(
                    'SELECT * FROM organization_roles WHERE organization_id = :organization_id AND name = :name LIMIT 1',
                    [
                        'organization_id' => $organizationId,
                        'name' => $roleName,
                    ]
                );
            } catch (Exception $exception) {
                // silent
            }

            if (!$existingRole) {
                try {
                    DatabaseHelper::insert('organization_roles', [
                        'organization_id' => $organizationId,
                        'user_id' => $userIdentifier !== '' ? $userIdentifier : 'system',
                        'name' => $roleName,
                        'description' => 'ایجاد شده خودکار برای ماتریس نقش دسترسی',
                    ]);
                } catch (Exception $exception) {
                    // ignore duplicate
                }

                try {
                    $existingRole = DatabaseHelper::fetchOne(
                        'SELECT * FROM organization_roles WHERE organization_id = :organization_id AND name = :name LIMIT 1',
                        [
                            'organization_id' => $organizationId,
                            'name' => $roleName,
                        ]
                    );
                } catch (Exception $exception) {
                    $existingRole = null;
                }
            }

            $roleId = (int) ($existingRole['id'] ?? 0);
            if ($existingRole && $roleId > 0) {
                $roles[] = [
                    'id' => $roleId,
                    'name' => (string) ($existingRole['name'] ?? $roleName),
                ];
            }
        }

        return $roles;
    }

    private function ensureRolePermissionRecords(int $organizationId, array $roles, array $permissionDefinitions): void
    {
        foreach ($permissionDefinitions as $definition) {
            $permissionKey = (string) ($definition['key'] ?? '');
            if ($permissionKey === '') {
                continue;
            }

            foreach ($roles as $role) {
                $roleId = (int) ($role['id'] ?? 0);
                if ($roleId <= 0) {
                    continue;
                }

                try {
                    $existingRecord = DatabaseHelper::fetchOne(
                        'SELECT id FROM organization_role_permissions WHERE organization_id = :organization_id AND permission_key = :permission_key AND organization_role_id = :role_id LIMIT 1',
                        [
                            'organization_id' => $organizationId,
                            'permission_key' => $permissionKey,
                            'role_id' => $roleId,
                        ]
                    );

                    if (!$existingRecord) {
                        DatabaseHelper::insert('organization_role_permissions', [
                            'organization_id' => $organizationId,
                            'permission_key' => $permissionKey,
                            'organization_role_id' => $roleId,
                            'is_allowed' => 0,
                        ]);
                    }
                } catch (Exception $exception) {
                    // silent
                }
            }
        }
    }

    private function normalizeOrganizationUsersRecords(array $records): array
    {
        $defaults = [
            'organization_id' => null,
            'user_id' => null,
            'first_name' => '-',
            'last_name' => '-',
            'gender' => null,
            'evaluation_code' => '-',
            'is_system_admin' => 0,
            'is_manager' => 0,
            'is_evaluee' => 0,
            'is_evaluator' => 0,
            'is_active' => 0,
            'organization_name' => '-',
            'province' => '-',
            'city' => '-',
            'created_at' => null,
            'show_report_date_instead_of_calendar' => 0,
        ];

        $booleanKeys = ['is_system_admin', 'is_manager', 'is_evaluee', 'is_evaluator', 'is_active', 'show_report_date_instead_of_calendar'];

        foreach ($records as &$record) {
            $record = array_merge($defaults, $record);

            foreach ($booleanKeys as $key) {
                $record[$key] = (int) ($record[$key] ?? 0);
            }

            if (isset($record['organization_id'])) {
                $record['organization_id'] = (int) $record['organization_id'];
            }
        }
        unset($record);

        return $records;
    }

    private function ensureOrganizationUsersColumn(string $table, string $column, string $definition, string $operation = 'ADD COLUMN'): void
    {
        try {
            $columnExists = DatabaseHelper::fetchOne(
                'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND COLUMN_NAME = :column LIMIT 1',
                ['table' => $table, 'column' => $column]
            );

            if (!$columnExists) {
                DatabaseHelper::query("ALTER TABLE {$table} {$operation} {$column} {$definition}");
            }
        } catch (Exception $exception) {
            // silent
        }
    }

    private function ensureOrganizationUsersIndex(string $table, string $indexName, string $definition): void
    {
        try {
            $indexExists = DatabaseHelper::fetchOne(
                'SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = :table AND INDEX_NAME = :index LIMIT 1',
                ['table' => $table, 'index' => $indexName]
            );

            if (!$indexExists) {
                DatabaseHelper::query("ALTER TABLE {$table} ADD {$definition}");
            }
        } catch (Exception $exception) {
            // silent
        }
    }

    private function buildToolScoringContext(array $sessionData, int $evaluationId, int $toolId, ?int $requestedEvaluateeId = null, ?int $requestedScorerId = null): array
    {
        $organization = $sessionData['organization'] ?? [];
        $user = $sessionData['user'] ?? [];

        $organizationId = (int) ($organization['id'] ?? 0);
        if ($organizationId <= 0) {
            throw new RuntimeException('شناسه سازمان معتبر نیست.');
        }

        if ($evaluationId <= 0) {
            throw new RuntimeException('شناسه ارزیابی نامعتبر است.');
        }

        if ($toolId <= 0) {
            throw new RuntimeException('شناسه ابزار نامعتبر است.');
        }

        [$evaluationTools, $toolMap, $organizationUsers, $userMap] = $this->loadEvaluationFormReferenceData($organizationId);

        $currentOrganizationUserId = (int) ($user['organization_user_id'] ?? 0);
        $accountSourceRaw = (string) ($user['account_source'] ?? '');
        $accountSource = $accountSourceRaw !== '' && function_exists('mb_strtolower')
            ? mb_strtolower($accountSourceRaw, 'UTF-8')
            : strtolower($accountSourceRaw);

        $flags = isset($user['organization_user_flags']) && is_array($user['organization_user_flags'])
            ? $user['organization_user_flags']
            : [];

        $isOwnerAccount = $accountSource === 'organizations';
        $isSystemAdmin = $isOwnerAccount || (int) ($flags['is_system_admin'] ?? 0) === 1;
        $isManager = (int) ($flags['is_manager'] ?? 0) === 1;
        $isEvaluator = (int) ($flags['is_evaluator'] ?? 0) === 1;
        $isEvaluatee = (int) ($flags['is_evaluee'] ?? 0) === 1;

        try {
            $evaluationRow = DatabaseHelper::fetchOne(
                'SELECT * FROM organization_evaluations WHERE id = :id AND organization_id = :organization_id LIMIT 1',
                [
                    'id' => $evaluationId,
                    'organization_id' => $organizationId,
                ]
            );
        } catch (Exception $exception) {
            $evaluationRow = null;
        }

        if (!$evaluationRow) {
            throw new RuntimeException('ارزیابی درخواست‌شده یافت نشد.');
        }

        $scoreBaseLink = UtilityHelper::baseUrl('organizations/active-evaluations/score?evaluation_id=' . urlencode((string) $evaluationId));
        $toolScoreBaseLink = UtilityHelper::baseUrl(
            'organizations/active-evaluations/tool-score?evaluation_id=' . urlencode((string) $evaluationId)
            . '&tool_id=' . urlencode((string) $toolId)
        );

        $evaluators = $this->decodeUserList($evaluationRow['evaluators_json'] ?? null, $userMap);
        $evaluatees = $this->decodeUserList($evaluationRow['evaluatees_json'] ?? null, $userMap);

        $evaluatorIds = array_map(static function (array $item): int {
            return (int) ($item['id'] ?? 0);
        }, $evaluators);

        $evaluateeIds = array_map(static function (array $item): int {
            return (int) ($item['id'] ?? 0);
        }, $evaluatees);

        $canViewAll = $isSystemAdmin || $isManager;
        $allowed = $canViewAll;

        if (!$allowed && $currentOrganizationUserId > 0) {
            if ($isEvaluator && in_array($currentOrganizationUserId, $evaluatorIds, true)) {
                $allowed = true;
            }

            if (!$allowed && $isEvaluatee && in_array($currentOrganizationUserId, $evaluateeIds, true)) {
                $allowed = true;
            }

            if (
                !$allowed
                && (in_array($currentOrganizationUserId, $evaluatorIds, true)
                    || in_array($currentOrganizationUserId, $evaluateeIds, true))
            ) {
                $allowed = true;
            }
        }

        if (!$allowed) {
            throw new RuntimeException('شما مجوز مشاهده این ارزیابی را ندارید.');
        }

        try {
            $matrixRows = DatabaseHelper::fetchAll(
                'SELECT tool_id, evaluator_id, evaluatee_id, is_visible FROM organization_evaluation_matrix_visibility WHERE evaluation_id = :evaluation_id',
                ['evaluation_id' => $evaluationId]
            );
        } catch (Exception $exception) {
            $matrixRows = [];
        }

        $hasMatrixRows = !empty($matrixRows);
        $matrixVisibility = [];
        foreach ($matrixRows as $matrixRow) {
            $matrixToolId = (int) ($matrixRow['tool_id'] ?? 0);
            $matrixEvaluateeId = (int) ($matrixRow['evaluatee_id'] ?? 0);
            if ($matrixToolId <= 0 || $matrixEvaluateeId <= 0) {
                continue;
            }

            $matrixEvaluatorId = (int) ($matrixRow['evaluator_id'] ?? 0);
            $isVisible = (int) ($matrixRow['is_visible'] ?? 0) === 1;

            if (!isset($matrixVisibility[$matrixEvaluateeId])) {
                $matrixVisibility[$matrixEvaluateeId] = [];
            }

            if (!isset($matrixVisibility[$matrixEvaluateeId][$matrixToolId])) {
                $matrixVisibility[$matrixEvaluateeId][$matrixToolId] = [];
            }

            $matrixVisibility[$matrixEvaluateeId][$matrixToolId][] = [
                'evaluator_id' => $matrixEvaluatorId,
                'is_visible' => $isVisible,
            ];
        }

        $evaluateeMap = [];
        foreach ($evaluatees as $evaluatee) {
            $evaluateeId = (int) ($evaluatee['id'] ?? 0);
            if ($evaluateeId <= 0) {
                continue;
            }

            $evaluateeMap[$evaluateeId] = $evaluatee;
        }

        $allowedEvaluateeIds = [];
        foreach ($evaluateeMap as $evaluateeId => $evaluateeData) {
            $isEvaluateeSelf = $isEvaluatee && $currentOrganizationUserId > 0 && $evaluateeId === $currentOrganizationUserId;
            $isAllowedForEvaluatee = false;

            if ($canViewAll) {
                $isAllowedForEvaluatee = true;
            } elseif ($hasMatrixRows) {
                $records = $matrixVisibility[$evaluateeId][$toolId] ?? null;
                if ($records !== null) {
                    foreach ($records as $record) {
                        if ((int) ($record['is_visible'] ?? 0) !== 1) {
                            continue;
                        }

                        $recordEvaluatorId = (int) ($record['evaluator_id'] ?? 0);
                        if ($isEvaluator && ($recordEvaluatorId === 0 || $recordEvaluatorId === $currentOrganizationUserId)) {
                            $isAllowedForEvaluatee = true;
                            break;
                        }

                        if ($isEvaluateeSelf && ($recordEvaluatorId === 0 || $recordEvaluatorId === $currentOrganizationUserId)) {
                            $isAllowedForEvaluatee = true;
                            break;
                        }
                    }
                }
            } else {
                if ($isEvaluator || $isEvaluateeSelf || $canViewAll) {
                    $isAllowedForEvaluatee = true;
                }
            }

            if ($isAllowedForEvaluatee) {
                $allowedEvaluateeIds[] = $evaluateeId;
            }
        }

        $allowedEvaluateeIds = array_values(array_unique($allowedEvaluateeIds));

        if (!$canViewAll && empty($allowedEvaluateeIds)) {
            throw new RuntimeException('هیچ ارزیابی‌شونده‌ای برای ثبت امتیاز به شما اختصاص داده نشده است.');
        }

        $requestedEvaluateeId = (int) $requestedEvaluateeId;
        if ($requestedEvaluateeId <= 0) {
            $requestedEvaluateeId = 0;
        }

        $selectedEvaluateeId = 0;
        if ($requestedEvaluateeId > 0 && in_array($requestedEvaluateeId, $allowedEvaluateeIds, true)) {
            $selectedEvaluateeId = $requestedEvaluateeId;
        } elseif ($isEvaluatee && $currentOrganizationUserId > 0 && in_array($currentOrganizationUserId, $allowedEvaluateeIds, true)) {
            $selectedEvaluateeId = $currentOrganizationUserId;
        } elseif (!empty($allowedEvaluateeIds)) {
            $selectedEvaluateeId = $allowedEvaluateeIds[0];
        } elseif ($canViewAll && !empty($evaluateeIds)) {
            $selectedEvaluateeId = $evaluateeIds[0];
        }

        if ($selectedEvaluateeId <= 0) {
            throw new RuntimeException('ارزیابی‌شونده معتبری برای این ارزیابی ثبت نشده است.');
        }

        $selectedEvaluatee = $evaluateeMap[$selectedEvaluateeId] ?? null;
        if ($selectedEvaluatee === null) {
            $selectedEvaluatee = [
                'id' => $selectedEvaluateeId,
                'label' => 'ارزیابی‌شونده #' . UtilityHelper::englishToPersian((string) $selectedEvaluateeId),
            ];
        }

        $evaluateeTabs = [];
        foreach ($allowedEvaluateeIds as $evaluateeId) {
            $evaluateeData = $evaluateeMap[$evaluateeId] ?? [
                'label' => 'ارزیابی‌شونده #' . UtilityHelper::englishToPersian((string) $evaluateeId),
            ];

            $evaluateeTabs[] = [
                'id' => $evaluateeId,
                'label' => $evaluateeData['label'] ?? 'ارزیابی‌شونده',
                'link' => $toolScoreBaseLink . '&evaluatee_id=' . urlencode((string) $evaluateeId),
                'selected' => $evaluateeId === $selectedEvaluateeId,
            ];
        }

        $matrixRecords = $matrixVisibility[$selectedEvaluateeId][$toolId] ?? null;
        $isVisibleForEvaluatee = true;
        if ($hasMatrixRows) {
            $isVisibleForEvaluatee = false;
            if ($matrixRecords !== null) {
                foreach ($matrixRecords as $record) {
                    if ((int) ($record['is_visible'] ?? 0) !== 1) {
                        continue;
                    }

                    if ($canViewAll) {
                        $isVisibleForEvaluatee = true;
                        break;
                    }

                    $recordEvaluatorId = (int) ($record['evaluator_id'] ?? 0);
                    if (
                        ($isEvaluator && ($recordEvaluatorId === 0 || $recordEvaluatorId === $currentOrganizationUserId))
                        || ($isEvaluatee && $selectedEvaluateeId === $currentOrganizationUserId && ($recordEvaluatorId === 0 || $recordEvaluatorId === $currentOrganizationUserId))
                    ) {
                        $isVisibleForEvaluatee = true;
                        break;
                    }
                }
            }
        }

        if (!$isVisibleForEvaluatee) {
            throw new RuntimeException('این ابزار برای ارزیابی‌شونده انتخاب‌شده فعال نشده است.');
        }

        $visibleMatrixRecords = [];
        if ($matrixRecords !== null) {
            foreach ($matrixRecords as $record) {
                if ((int) ($record['is_visible'] ?? 0) === 1) {
                    $visibleMatrixRecords[] = $record;
                }
            }
        }

        $allowedScorerIds = [];
        $includeAllEvaluatorsFromMatrix = false;
        foreach ($visibleMatrixRecords as $record) {
            $recordEvaluatorId = (int) ($record['evaluator_id'] ?? 0);
            if ($recordEvaluatorId > 0) {
                $allowedScorerIds[] = $recordEvaluatorId;
            } else {
                $includeAllEvaluatorsFromMatrix = true;
            }
        }

        if (!$hasMatrixRows || $includeAllEvaluatorsFromMatrix) {
            $allowedScorerIds = array_merge($allowedScorerIds, $evaluatorIds);
        }

        $allowedScorerIds = array_map('intval', $allowedScorerIds);
        if ($isEvaluatee && $currentOrganizationUserId > 0 && $selectedEvaluateeId === $currentOrganizationUserId) {
            $allowedScorerIds[] = $currentOrganizationUserId;
        }

        $allowedScorerIds = array_values(array_unique(array_filter($allowedScorerIds, static function (int $id): bool {
            return $id > 0;
        })));

        if (empty($allowedScorerIds) && !$canViewAll) {
            throw new RuntimeException('برای این ابزار هیچ ارزیاب فعالی تعیین نشده است.');
        }

        if (empty($allowedScorerIds) && $canViewAll) {
            throw new RuntimeException('برای این ابزار هیچ ارزیاب فعالی تعیین نشده است. لطفاً ابتدا ارزیاب را در ماتریس تخصیص مشخص کنید.');
        }

        $selectedScorerId = 0;
        if ($requestedScorerId !== null && in_array($requestedScorerId, $allowedScorerIds, true)) {
            $selectedScorerId = $requestedScorerId;
        } elseif ($isEvaluator && $currentOrganizationUserId > 0 && in_array($currentOrganizationUserId, $allowedScorerIds, true)) {
            $selectedScorerId = $currentOrganizationUserId;
        } elseif ($isEvaluatee && $currentOrganizationUserId > 0 && $selectedEvaluateeId === $currentOrganizationUserId && in_array($currentOrganizationUserId, $allowedScorerIds, true)) {
            $selectedScorerId = $currentOrganizationUserId;
        } elseif (!empty($allowedScorerIds)) {
            $selectedScorerId = $allowedScorerIds[0];
        }

        if ($selectedScorerId <= 0) {
            throw new RuntimeException('ارزیاب معتبری برای ثبت امتیاز انتخاب نشده است.');
        }

        $scorerOptions = [];
        foreach ($allowedScorerIds as $scorerId) {
            $label = $evaluatorMap[$scorerId]['label'] ?? ($userMap[$scorerId] ?? ('ارزیاب #' . UtilityHelper::englishToPersian((string) $scorerId)));
            $scorerOptions[] = [
                'id' => $scorerId,
                'label' => $label,
                'selected' => $scorerId === $selectedScorerId,
            ];
        }

        if (!empty($evaluateeTabs) && $selectedScorerId > 0) {
            foreach ($evaluateeTabs as &$tab) {
                $link = (string) ($tab['link'] ?? '');
                if ($link === '') {
                    continue;
                }

                $scorerParam = 'scorer_id=' . urlencode((string) $selectedScorerId);
                if (strpos($link, 'scorer_id=') === false) {
                    $link .= (strpos($link, '?') !== false ? '&' : '?') . $scorerParam;
                    $tab['link'] = $link;
                }
            }
            unset($tab);
        }

        $actingAsOwnEvaluator = $isEvaluator && $currentOrganizationUserId > 0 && $selectedScorerId === $currentOrganizationUserId;
        $canSelectScorer = $canViewAll || !$actingAsOwnEvaluator;

        $toolDetailsMap = [];
        foreach ($evaluationTools as $tool) {
            $toolIdInList = (int) ($tool['id'] ?? 0);
            if ($toolIdInList <= 0) {
                continue;
            }

            $toolDetailsMap[$toolIdInList] = $tool;
        }

        $tool = $toolDetailsMap[$toolId] ?? null;
        if (!$tool) {
            throw new RuntimeException('ابزار انتخاب‌شده در این سازمان وجود ندارد.');
        }

        if ((int) ($tool['is_exam'] ?? 0) === 1) {
            throw new RuntimeException('امکان امتیازدهی برای ابزارهای آزمونی فراهم نیست.');
        }

        try {
            $assignmentRow = DatabaseHelper::fetchOne(
                'SELECT sort_order FROM organization_evaluation_tool_assignments WHERE evaluation_id = :evaluation_id AND tool_id = :tool_id LIMIT 1',
                [
                    'evaluation_id' => $evaluationId,
                    'tool_id' => $toolId,
                ]
            );
        } catch (Exception $exception) {
            $assignmentRow = null;
        }

        if (!$assignmentRow) {
            throw new RuntimeException('این ابزار به ارزیابی مورد نظر اختصاص داده نشده است.');
        }

        $assignmentOrder = (int) ($assignmentRow['sort_order'] ?? 0);

        $evaluatorLabels = [];
        if ($hasMatrixRows && $matrixRecords !== null) {
            foreach ($matrixRecords as $record) {
                if ((int) ($record['is_visible'] ?? 0) !== 1) {
                    continue;
                }

                $evaluatorId = (int) ($record['evaluator_id'] ?? 0);
                if ($evaluatorId > 0) {
                    $label = $userMap[$evaluatorId] ?? ('ارزیاب #' . UtilityHelper::englishToPersian((string) $evaluatorId));
                } else {
                    $label = 'ارزیاب تعیین نشده';
                }

                if (!in_array($label, $evaluatorLabels, true)) {
                    $evaluatorLabels[] = $label;
                }
            }
        } else {
            foreach ($evaluators as $evaluator) {
                $label = $evaluator['label'] ?? null;
                if ($label && !in_array($label, $evaluatorLabels, true)) {
                    $evaluatorLabels[] = $label;
                }
            }
        }

        if (empty($evaluatorLabels)) {
            $evaluatorLabels[] = 'ارزیاب تعیین نشده';
        }

        $generalModelLabel = trim((string) ($evaluationRow['general_model'] ?? ''));
        $specificModelLabel = trim((string) ($evaluationRow['specific_model'] ?? ''));

        $generalModelMeta = $this->resolveCompetencyModelByLabel($organizationId, $generalModelLabel);
        $specificModelMeta = $this->resolveCompetencyModelByLabel($organizationId, $specificModelLabel);

        if ($generalModelMeta && !empty($generalModelMeta['title'])) {
            $generalModelLabel = $generalModelMeta['title'];
        }

        if ($specificModelMeta && !empty($specificModelMeta['title'])) {
            $specificModelLabel = $specificModelMeta['title'];
        }

        $generalCompetencies = [];
        if ($generalModelMeta && ($generalModelMeta['id'] ?? 0) > 0) {
            $generalCompetencies = $this->loadCompetenciesForModel($organizationId, (int) $generalModelMeta['id']);
        }

        $specificCompetencies = [];
        if ($specificModelMeta && ($specificModelMeta['id'] ?? 0) > 0) {
            $specificCompetencies = $this->loadCompetenciesForModel($organizationId, (int) $specificModelMeta['id']);
        }

        $competencyLookup = [];
        foreach ($generalCompetencies as $competency) {
            $competencyId = (int) ($competency['id'] ?? 0);
            if ($competencyId <= 0) {
                continue;
            }

            $competencyLookup[$competencyId] = [
                'id' => $competencyId,
                'code' => $competency['code'] ?? '',
                'title' => $competency['title'] ?? '',
                'dimension' => $competency['dimension'] ?? '',
                'groups' => ['general'],
            ];
        }

        foreach ($specificCompetencies as $competency) {
            $competencyId = (int) ($competency['id'] ?? 0);
            if ($competencyId <= 0) {
                continue;
            }

            if (!isset($competencyLookup[$competencyId])) {
                $competencyLookup[$competencyId] = [
                    'id' => $competencyId,
                    'code' => $competency['code'] ?? '',
                    'title' => $competency['title'] ?? '',
                    'dimension' => $competency['dimension'] ?? '',
                    'groups' => ['specific'],
                ];
            } elseif (!in_array('specific', $competencyLookup[$competencyId]['groups'], true)) {
                $competencyLookup[$competencyId]['groups'][] = 'specific';
            }
        }

        try {
            $toolCompetencyRows = DatabaseHelper::fetchAll(
                'SELECT competency_id, model_id FROM organization_evaluation_tool_competencies WHERE organization_id = :organization_id AND evaluation_tool_id = :tool_id',
                [
                    'organization_id' => $organizationId,
                    'tool_id' => $toolId,
                ]
            );
        } catch (Exception $exception) {
            $toolCompetencyRows = [];
        }

        $competencyIdsForTool = [];
        $competencyModelMap = [];
        foreach ($toolCompetencyRows as $row) {
            $competencyId = (int) ($row['competency_id'] ?? 0);
            if ($competencyId <= 0) {
                continue;
            }

            $competencyIdsForTool[$competencyId] = $competencyId;
            $modelId = (int) ($row['model_id'] ?? 0);
            if ($modelId > 0) {
                if (!isset($competencyModelMap[$competencyId])) {
                    $competencyModelMap[$competencyId] = [];
                }

                $competencyModelMap[$competencyId][$modelId] = $modelId;
            }
        }

        $additionalCompetencyIds = [];
        foreach ($competencyIdsForTool as $competencyId) {
            if (!isset($competencyLookup[$competencyId])) {
                $additionalCompetencyIds[$competencyId] = $competencyId;
            }
        }

        if (!empty($additionalCompetencyIds)) {
            $params = ['organization_id' => $organizationId];
            $placeholders = [];
            $index = 0;
            foreach (array_values($additionalCompetencyIds) as $competencyId) {
                $key = 'comp_' . $index++;
                $placeholders[] = ':' . $key;
                $params[$key] = $competencyId;
            }

            $sql = sprintf(
                'SELECT id, code, title FROM organization_competencies WHERE organization_id = :organization_id AND id IN (%s)',
                implode(', ', $placeholders)
            );

            try {
                $extraCompetencies = DatabaseHelper::fetchAll($sql, $params);
            } catch (Exception $exception) {
                $extraCompetencies = [];
            }

            foreach ($extraCompetencies as $extra) {
                $competencyId = (int) ($extra['id'] ?? 0);
                if ($competencyId <= 0) {
                    continue;
                }

                $competencyLookup[$competencyId] = [
                    'id' => $competencyId,
                    'code' => trim((string) ($extra['code'] ?? '')),
                    'title' => trim((string) ($extra['title'] ?? '')),
                    'dimension' => '',
                    'groups' => [],
                ];
            }
        }

        $modelScoringMap = [];
        if ($generalModelMeta && ($generalModelMeta['id'] ?? 0) > 0) {
            $modelScoringMap[(int) $generalModelMeta['id']] = $this->normalizeScoringType($generalModelMeta['scoring_type'] ?? '');
        }
        if ($specificModelMeta && ($specificModelMeta['id'] ?? 0) > 0) {
            $modelScoringMap[(int) $specificModelMeta['id']] = $this->normalizeScoringType($specificModelMeta['scoring_type'] ?? '');
        }

        $missingModelIds = [];
        foreach ($competencyModelMap as $modelList) {
            foreach ($modelList as $modelId) {
                if ($modelId <= 0 || isset($modelScoringMap[$modelId])) {
                    continue;
                }
                $missingModelIds[$modelId] = $modelId;
            }
        }

        if (!empty($missingModelIds)) {
            $params = [
                'organization_id' => $organizationId,
            ];
            $placeholders = [];
            $index = 0;
            foreach (array_values($missingModelIds) as $modelId) {
                $key = 'model_' . $index++;
                $placeholders[] = ':' . $key;
                $params[$key] = $modelId;
            }

            $sql = sprintf(
                'SELECT id, scoring_type FROM organization_competency_models WHERE organization_id = :organization_id AND id IN (%s)',
                implode(', ', $placeholders)
            );

            try {
                $modelRows = DatabaseHelper::fetchAll($sql, $params);
            } catch (Exception $exception) {
                $modelRows = [];
            }

            foreach ($modelRows as $modelRow) {
                $modelId = (int) ($modelRow['id'] ?? 0);
                if ($modelId <= 0) {
                    continue;
                }

                $modelScoringMap[$modelId] = $this->normalizeScoringType($modelRow['scoring_type'] ?? '');
            }
        }

        $competencyDetails = [];
        $competencyIdList = array_values($competencyIdsForTool);

        if (!empty($competencyIdList)) {
            $params = ['organization_id' => $organizationId];
            $placeholders = [];
            foreach ($competencyIdList as $index => $competencyId) {
                $key = 'comp_' . $index;
                $placeholders[] = ':' . $key;
                $params[$key] = $competencyId;
            }

            $sql = sprintf(
                'SELECT id, competency_id, behavior_example FROM organization_competency_examples WHERE organization_id = :organization_id AND competency_id IN (%s) ORDER BY competency_id ASC, id ASC',
                implode(', ', $placeholders)
            );

            try {
                $exampleRows = DatabaseHelper::fetchAll($sql, $params);
            } catch (Exception $exception) {
                $exampleRows = [];
            }

            $examplesByCompetency = [];
            foreach ($exampleRows as $exampleRow) {
                $competencyId = (int) ($exampleRow['competency_id'] ?? 0);
                if ($competencyId <= 0) {
                    continue;
                }

                if (!isset($examplesByCompetency[$competencyId])) {
                    $examplesByCompetency[$competencyId] = [];
                }

                $examplesByCompetency[$competencyId][] = [
                    'id' => (int) ($exampleRow['id'] ?? 0),
                    'text' => trim((string) ($exampleRow['behavior_example'] ?? '')),
                ];
            }
        } else {
            $examplesByCompetency = [];
        }

        $groupOrder = ['general' => 1, 'specific' => 2, 'additional' => 3];

        foreach ($competencyIdList as $competencyId) {
            $lookup = $competencyLookup[$competencyId] ?? null;
            if ($lookup === null) {
                continue;
            }

            $groups = $lookup['groups'] ?? [];
            $modelsForCompetencyRaw = $competencyModelMap[$competencyId] ?? [];
            $modelsForCompetency = [];
            foreach ($modelsForCompetencyRaw as $modelIdValue) {
                $modelIdValue = (int) $modelIdValue;
                if ($modelIdValue <= 0) {
                    continue;
                }

                if (!in_array($modelIdValue, $modelsForCompetency, true)) {
                    $modelsForCompetency[] = $modelIdValue;
                }
            }
            if (empty($groups) && !empty($modelsForCompetency)) {
                $generalModelId = (int) ($generalModelMeta['id'] ?? 0);
                $specificModelId = (int) ($specificModelMeta['id'] ?? 0);

                if ($generalModelId > 0 && in_array($generalModelId, $modelsForCompetency, true)) {
                    $groups[] = 'general';
                }

                if ($specificModelId > 0 && in_array($specificModelId, $modelsForCompetency, true)) {
                    $groups[] = 'specific';
                }
            }

            $primaryGroup = 'additional';
            if (in_array('general', $groups, true)) {
                $primaryGroup = 'general';
            } elseif (in_array('specific', $groups, true)) {
                $primaryGroup = 'specific';
            }

            $groupLabels = [];
            if (in_array('general', $groups, true)) {
                $groupLabels[] = 'مدل عمومی';
            }
            if (in_array('specific', $groups, true)) {
                $groupLabels[] = 'مدل اختصاصی';
            }
            if (empty($groupLabels)) {
                $groupLabels[] = 'سایر شایستگی‌ها';
            }

            $preferredModelIds = [];
            $generalModelId = (int) ($generalModelMeta['id'] ?? 0);
            $specificModelId = (int) ($specificModelMeta['id'] ?? 0);

            if ($generalModelId > 0 && !in_array($generalModelId, $preferredModelIds, true) && (in_array('general', $groups, true) || in_array($generalModelId, $modelsForCompetency, true))) {
                $preferredModelIds[] = $generalModelId;
            }
            if ($specificModelId > 0 && !in_array($specificModelId, $preferredModelIds, true) && (in_array('specific', $groups, true) || in_array($specificModelId, $modelsForCompetency, true))) {
                $preferredModelIds[] = $specificModelId;
            }
            foreach ($modelsForCompetency as $modelId) {
                if ($modelId > 0 && !in_array($modelId, $preferredModelIds, true)) {
                    $preferredModelIds[] = $modelId;
                }
            }

            $scoringType = '';
            foreach ($preferredModelIds as $modelId) {
                $candidate = $modelScoringMap[$modelId] ?? '';
                if ($candidate !== '') {
                    $scoringType = $candidate;
                    break;
                }
            }

            if ($scoringType === '' && in_array('specific', $groups, true) && !empty($specificModelMeta['scoring_type'] ?? '')) {
                $scoringType = $specificModelMeta['scoring_type'];
            }

            if ($scoringType === '' && in_array('general', $groups, true) && !empty($generalModelMeta['scoring_type'] ?? '')) {
                $scoringType = $generalModelMeta['scoring_type'];
            }

            if ($scoringType === '' && !empty($specificModelMeta['scoring_type'] ?? '')) {
                $scoringType = $specificModelMeta['scoring_type'];
            }

            if ($scoringType === '' && !empty($generalModelMeta['scoring_type'] ?? '')) {
                $scoringType = $generalModelMeta['scoring_type'];
            }

            if ($scoringType === '') {
                $scoringType = '0-5';
            }

            $scoringType = $this->normalizeScoringType($scoringType);

            $competencyDetails[] = [
                'id' => $competencyId,
                'title' => $lookup['title'] ?? 'شایستگی بدون عنوان',
                'code' => $lookup['code'] ?? '',
                'dimension' => $lookup['dimension'] ?? '',
                'groups' => $groups,
                'primary_group' => $primaryGroup,
                'group_label' => implode(' و ', $groupLabels),
                'scoring_type' => $scoringType,
                'scoring_type_label' => $this->translateScoringTypeLabel($scoringType),
                'scoring_range' => $this->resolveScoringRange($scoringType),
                'examples' => $examplesByCompetency[$competencyId] ?? [],
            ];
        }

        usort($competencyDetails, static function (array $a, array $b) use ($groupOrder): int {
            $groupA = $a['primary_group'] ?? 'additional';
            $groupB = $b['primary_group'] ?? 'additional';
            $orderA = $groupOrder[$groupA] ?? 99;
            $orderB = $groupOrder[$groupB] ?? 99;

            if ($orderA !== $orderB) {
                return $orderA <=> $orderB;
            }

            return strcmp($a['title'] ?? '', $b['title'] ?? '');
        });

        $pageMessages = [];
        if (!$hasMatrixRows) {
            $pageMessages[] = [
                'type' => 'info',
                'text' => 'ماتریس اختصاص ابزار برای این ارزیابی ثبت نشده است؛ تمامی ابزارهای غیرآزمون در دسترس هستند.',
            ];
        }

        if ($canSelectScorer && !empty($scorerOptions)) {
            $pageMessages[] = [
                'type' => 'info',
                'text' => 'در صورت ثبت امتیاز به نمایندگی از ارزیاب، ابتدا فرد مورد نظر را از بخش انتخاب ارزیاب تعیین کنید.',
            ];
        }

        return [
            'organization_id' => $organizationId,
            'user' => $user,
            'current_user_id' => $currentOrganizationUserId,
            'role_flags' => [
                'is_system_admin' => $isSystemAdmin,
                'is_manager' => $isManager,
                'is_evaluator' => $isEvaluator,
                'is_evaluatee' => $isEvaluatee,
            ],
            'evaluation' => $evaluationRow,
            'evaluators' => $evaluators,
            'evaluatees' => $evaluatees,
            'evaluatee_tabs' => $evaluateeTabs,
            'selected_evaluatee' => $selectedEvaluatee,
            'selected_evaluatee_id' => $selectedEvaluateeId,
            'tool' => $tool,
            'tool_order' => $assignmentOrder,
            'tool_evaluators' => $evaluatorLabels,
            'has_matrix_rows' => $hasMatrixRows,
            'score_base_link' => $scoreBaseLink,
            'tool_score_base_link' => $toolScoreBaseLink,
            'general_model_meta' => $generalModelMeta,
            'specific_model_meta' => $specificModelMeta,
            'general_model_label' => $generalModelLabel,
            'specific_model_label' => $specificModelLabel,
            'competencies' => $competencyDetails,
            'page_messages' => $pageMessages,
            'scorer_id' => $selectedScorerId,
            'scorer_selection' => [
                'options' => $scorerOptions,
                'selected_id' => $selectedScorerId,
                'can_select' => $canSelectScorer,
                'acting_as_own' => $actingAsOwnEvaluator,
            ],
        ];
    }

    private function resolveOrganizationRoleLabelFromUser(array $user): string
    {
        $label = trim((string)($user['role_label'] ?? ''));
        if ($label !== '') {
            return $label;
        }

        $roleName = trim((string)($user['organization_role_name'] ?? ''));
        if ($roleName !== '') {
            return $roleName;
        }

        $slug = trim((string)($user['role_slug'] ?? ''));
        if ($slug === '') {
            return 'کاربر سازمان';
        }

        $normalized = mb_strtolower($slug, 'UTF-8');

        $mapping = [
            'organization-owner' => 'مالک سازمان',
            'organization-admin' => 'مدیر سازمان',
            'organization-manager' => 'مدیر سازمان',
            'organization-user' => 'کاربر سازمان',
            'organization-operator' => 'اپراتور سازمان',
            'organization-supervisor' => 'ناظر سازمان',
        ];

        if (isset($mapping[$normalized])) {
            return $mapping[$normalized];
        }

        $clean = preg_replace('/^organization[-_\s]?/u', '', $normalized);
        $clean = str_replace(['-', '_'], ' ', (string)$clean);
        $clean = trim($clean);

        if ($clean === '') {
            return 'کاربر سازمان';
        }

        return function_exists('mb_convert_case')
            ? mb_convert_case($clean, MB_CASE_TITLE, 'UTF-8')
            : ucwords($clean);
    }

    private function translateOrganizationAccountSource(?string $accountSource): string
    {
        $source = mb_strtolower((string)$accountSource, 'UTF-8');

        $mapping = [
            'organizations' => 'مالک سازمان',
            'organization_users' => 'کاربر سازمان',
        ];

        return $mapping[$source] ?? 'کاربر سازمان';
    }

    private function ensureOrganizationSession($requiredPermissions = null): array
    {
        AuthHelper::startSession();

        if (!AuthHelper::isLoggedIn()) {
            ResponseHelper::flashError('لطفاً ابتدا وارد حساب سازمانی خود شوید.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/login'));
        }

        if ($this->cachedSessionData !== null) {
            $sessionData = $this->cachedSessionData;
            $user = $sessionData['user'];
            $organization = $sessionData['organization'];
        } else {
            $user = AuthHelper::getUser();

            if (!$this->isOrganizationAccount($user)) {
                AuthHelper::logout();
                AuthHelper::startSession();
                ResponseHelper::flashError('دسترسی حساب شما برای ورود به پنل سازمان مجاز نیست.');
                UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/login'));
            }

            $organizationId = (int) ($user['organization_id'] ?? 0);
            if ($organizationId <= 0) {
                AuthHelper::logout();
                AuthHelper::startSession();
                ResponseHelper::flashError('حساب شما به سازمانی متصل نشده است.');
                UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/login'));
            }

            $organization = $this->fetchOrganization($organizationId);
            if (!$organization) {
                AuthHelper::logout();
                AuthHelper::startSession();
                ResponseHelper::flashError('سازمان مرتبط با حساب شما یافت نشد.');
                UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/login'));
            }

            if (array_key_exists('is_active', $organization) && (int) $organization['is_active'] === 0) {
                AuthHelper::logout();
                AuthHelper::startSession();
                ResponseHelper::flashError('دسترسی این سازمان غیرفعال شده است.');
                UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/login'));
            }

            $sessionData = [
                'user' => $user,
                'organization' => $organization,
            ];

            $this->cachedSessionData = $sessionData;
        }

        $permissionsToCheck = $this->normalizeRequiredPermissions($requiredPermissions);

        if (!empty($permissionsToCheck) && !$this->userHasAnyRequiredPermission($user, $permissionsToCheck)) {
            ResponseHelper::flashError('شما به این بخش دسترسی ندارید.');
            UtilityHelper::redirect(UtilityHelper::baseUrl('organizations/dashboard'));
        }

        return $sessionData;
    }

    private function normalizeRequiredPermissions($requiredPermissions): array
    {
        if ($requiredPermissions === false) {
            return [];
        }

        if ($requiredPermissions === null) {
            if ($this->currentAction !== null && isset($this->methodPermissionMap[$this->currentAction])) {
                return $this->methodPermissionMap[$this->currentAction];
            }

            $caller = $this->detectCallingMethod();
            if ($caller !== null && isset($this->methodPermissionMap[$caller])) {
                return $this->methodPermissionMap[$caller];
            }

            return [];
        }

        if (is_string($requiredPermissions)) {
            $requiredPermissions = [$requiredPermissions];
        }

        if (!is_array($requiredPermissions)) {
            return [];
        }

        $normalized = [];

        foreach ($requiredPermissions as $permissionKey) {
            $key = trim((string) $permissionKey);
            if ($key !== '') {
                $normalized[] = $key;
            }
        }

        return array_values(array_unique($normalized));
    }

    private function detectCallingMethod(): ?string
    {
        $trace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 4);
        $caller = $trace[2]['function'] ?? null;

        return is_string($caller) ? $caller : null;
    }

    private function userHasAnyRequiredPermission(array $user, array $requiredPermissions): bool
    {
        if (empty($requiredPermissions)) {
            return true;
        }

        $accountSourceRaw = (string) ($user['account_source'] ?? '');
        $accountSource = $accountSourceRaw !== '' && function_exists('mb_strtolower')
            ? mb_strtolower($accountSourceRaw, 'UTF-8')
            : strtolower($accountSourceRaw);

        if ($accountSource === 'organizations') {
            return true;
        }

        $flags = isset($user['organization_user_flags']) && is_array($user['organization_user_flags'])
            ? $user['organization_user_flags']
            : [];

        if ((int) ($flags['is_system_admin'] ?? 0) === 1) {
            return true;
        }

        $grantedPermissions = [];

        if (isset($user['permissions']) && is_array($user['permissions'])) {
            if (class_exists('PermissionHelper')) {
                $grantedPermissions = PermissionHelper::normalizePermissions($user['permissions']);
            } else {
                foreach ($user['permissions'] as $permission) {
                    $permissionKey = trim((string) $permission);
                    if ($permissionKey !== '') {
                        $grantedPermissions[] = $permissionKey;
                    }
                }

                $grantedPermissions = array_values(array_unique($grantedPermissions));
            }
        }

        foreach ($requiredPermissions as $requiredPermission) {
            if (in_array($requiredPermission, $grantedPermissions, true)) {
                return true;
            }
        }

        return false;
    }

    private function isOrganizationAccount($user): bool
    {
        if (!is_array($user)) {
            return false;
        }

        $scopeType = $user['scope_type'] ?? '';
        $roleSlug = $user['role_slug'] ?? '';
        $organizationId = $user['organization_id'] ?? null;

        if ($this->isOrganizationScope($scopeType, $roleSlug) && $organizationId) {
            return true;
        }

        return false;
    }

    private function isOrganizationScope(?string $scopeType, ?string $roleSlug): bool
    {
        $scopeType = (string) $scopeType;
        $roleSlug = (string) $roleSlug;

        $normalizedScope = $scopeType !== '' ? mb_strtolower($scopeType, 'UTF-8') : '';
        $normalizedSlug = $roleSlug !== '' ? mb_strtolower($roleSlug, 'UTF-8') : '';

        if ($normalizedScope === 'organization') {
            return true;
        }

        $allowedSlugs = [
            'organization-admin',
            'organization-manager',
            'organization-user',
            'organization-operator',
            'organization-supervisor',
            'organization-owner',
        ];

        return $normalizedSlug !== '' && in_array($normalizedSlug, $allowedSlugs, true);
    }

    private function getCertificateBuilderDefaultState(): array
    {
        return [
            'version' => 1,
            'activePageId' => 'page-1',
            'pages' => [[
                'id' => 'page-1',
                'name' => 'صفحه ۱',
                'template' => 'classic',
                'size' => 'a4',
                'orientation' => 'portrait',
                'elements' => [
                    [
                        'id' => 'el-1',
                        'type' => 'hero_heading',
                        'props' => [
                            'text' => 'گواهی پایان دوره',
                            'align' => 'center',
                            'variant' => 'display',
                            'style' => 'plain',
                            'color' => '#111827',
                            'widthMode' => 'full',
                            'applyToAllPages' => 0,
                        ],
                    ],
                    [
                        'id' => 'el-2',
                        'type' => 'user_full_name',
                        'props' => [
                            'showLabel' => 0,
                            'alignment' => 'center',
                            'widthMode' => 'full',
                            'applyToAllPages' => 0,
                        ],
                    ],
                    [
                        'id' => 'el-3',
                        'type' => 'custom_paragraph',
                        'props' => [
                            'text' => 'این گواهی به پاس حضور فعال و موفقیت در برنامه ارزیابی صادر می‌شود.',
                            'align' => 'center',
                            'color' => '#334155',
                            'lineHeight' => 1.8,
                            'widthMode' => 'full',
                            'applyToAllPages' => 0,
                        ],
                    ],
                ],
            ]],
        ];
    }

    private function getCertificateBuilderTemplateOptions(): array
    {
        return [
            ['key' => 'classic', 'name' => 'کلاسیک', 'description' => 'قالب کلاسیک با حاشیه ساده و روبان طلایی'],
            ['key' => 'minimal', 'name' => 'مینیمال', 'description' => 'فضای سفید فراوان و تایپوگرافی مدرن'],
            ['key' => 'bordered', 'name' => 'قاب‌دار', 'description' => 'حاشیه رسمی برای گواهی‌های سازمانی'],
            ['key' => 'modern', 'name' => 'مدرن', 'description' => 'رنگ‌های گرادیانی و کارت‌های اطلاعاتی'],
            ['key' => 'elegant', 'name' => 'مینیمال تیره', 'description' => 'پس‌زمینه تیره با خطوط نوری ظریف'],
            ['key' => 'aurora', 'name' => 'آرورا', 'description' => 'گرادیان ملایم با نورهای رنگی شناور برای حس نوآوری'],
            ['key' => 'sunset', 'name' => 'غروب', 'description' => 'رنگ‌های گرم نارنجی و صورتی با هایلایت‌های نرم برای گواهی‌های صمیمی'],
            ['key' => 'royal', 'name' => 'رویال لوکس', 'description' => 'زمینه سرمه‌ای با حاشیه طلایی برای مراسم رسمی و تجلیل ویژه'],
            ['key' => 'paper', 'name' => 'کاغذ هنری', 'description' => 'بافت کاغذ دست‌ساز با قاب داخلی ظریف و خطوط چاپی'],
            
            // New professional certificate templates
            ['key' => 'emerald', 'name' => 'زمرد', 'description' => 'گرادیان سبز زمردی با المان‌های طلایی - مناسب برای دوره‌های تخصصی'],
            ['key' => 'sapphire', 'name' => 'یاقوت کبود', 'description' => 'آبی عمیق با لکه‌های نوری سفید - برای گواهی‌های آکادمیک'],
            ['key' => 'crimson', 'name' => 'زرشکی اشرافی', 'description' => 'قرمز شرابی با فریم طلایی و نقوش کلاسیک - برای گواهی‌های ممتاز'],
            ['key' => 'ocean', 'name' => 'اقیانوس', 'description' => 'گرادیان آبی اقیانوسی با امواج شیشه‌ای - حس آرامش و اعتماد'],
            ['key' => 'forest', 'name' => 'جنگل', 'description' => 'سبز تیره جنگلی با نورهای طبیعی - برای دوره‌های محیط زیست'],
            ['key' => 'gold_premium', 'name' => 'طلایی پرمیوم', 'description' => 'زمینه کرم با حاشیه طلایی براق و نقش‌های تزیینی - لوکس‌ترین قالب'],
            ['key' => 'midnight', 'name' => 'نیمه‌شب', 'description' => 'مشکی با ستاره‌های درخشان و خطوط نقره‌ای - مدرن و باشکوه'],
            ['key' => 'coral', 'name' => 'مرجانی', 'description' => 'صورتی مرجانی با عناصر فیروزه‌ای - شاد و متفاوت'],
            ['key' => 'lavender', 'name' => 'اسطوخودوس', 'description' => 'بنفش ملایم با زمینه کرم - نرم و خاص برای دوره‌های هنری'],
            ['key' => 'bronze', 'name' => 'برنزی', 'description' => 'قهوه‌ای برنزی با المان‌های مسی - کلاسیک و گرم'],
            ['key' => 'pearl', 'name' => 'مرواریدی', 'description' => 'سفید مرواریدی با سایه‌های نقره‌ای و بنفش - شیک و مینیمال'],
            ['key' => 'ruby', 'name' => 'یاقوت سرخ', 'description' => 'قرمز یاقوتی با جزئیات طلایی - برای دستاوردهای برتر'],
        ];
    }

    private function getCertificateBuilderComponentLibrary(): array
    {
        return [
            [
                'type' => 'hero_heading',
                'title' => 'عنوان بزرگ',
                'icon' => 'text-outline',
                'category' => 'متن',
                'description' => 'نمایش عنوان برجسته در ابتدای گواهی',
                'defaultProps' => [
                    'text' => 'گواهی پایان دوره',
                    'align' => 'center',
                    'fontSize' => 48,
                    'style' => 'plain',
                    'color' => '#111827',
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'text', 'label' => 'متن', 'type' => 'textarea', 'maxLength' => 400, 'placeholder' => 'مثلاً گواهی پایان دوره', 'help' => 'عنوان اصلی که در بالای گواهی نمایش داده می‌شود.'],
                    ['key' => 'align', 'label' => 'تراز متن', 'type' => 'select', 'options' => [
                        ['value' => 'right', 'label' => 'راست'],
                        ['value' => 'center', 'label' => 'وسط'],
                        ['value' => 'left', 'label' => 'چپ'],
                    ], 'help' => 'موقعیت متن نسبت به صفحه را تعیین می‌کند.'],
                    ['key' => 'fontSize', 'label' => 'اندازه فونت', 'type' => 'font_size', 'help' => 'اندازه فونت عنوان را مشخص کنید (6 تا 200 پیکسل).'],
                    ['key' => 'style', 'label' => 'طرح نمایشی', 'type' => 'select', 'options' => [
                        ['value' => 'plain', 'label' => 'ساده'],
                        ['value' => 'pill', 'label' => 'پس‌زمینه گرد'],
                        ['value' => 'outline', 'label' => 'قاب دور'],
                        ['value' => 'ribbon', 'label' => 'روبان تزیینی'],
                        ['value' => 'underline', 'label' => 'خط برجسته'],
                    ], 'help' => 'یک سبک گرافیکی برای نمایش عنوان انتخاب کنید.'],
                    ['key' => 'color', 'label' => 'رنگ متن', 'type' => 'color', 'help' => 'رنگ نمایش عنوان. از کد رنگی هگز یا RGBA استفاده کنید.'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ], 'help' => 'در حالت نیم‌عرض می‌توانید عنصر دیگری را در همان ردیف قرار دهید.'],
                ],
            ],
            [
                'type' => 'section_heading',
                'title' => 'سرفصل',
                'icon' => 'albums-outline',
                'category' => 'متن',
                'description' => 'جداسازی بخش‌های گواهی با تیتر برجسته',
                'defaultProps' => [
                    'text' => 'عنوان بخش',
                    'align' => 'right',
                    'color' => '#1f2937',
                    'showDivider' => 1,
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'text', 'label' => 'متن سرفصل', 'type' => 'text', 'maxLength' => 120, 'placeholder' => 'مثلاً اطلاعات دوره', 'help' => 'عنوان بخش را مشخص کنید.'],
                    ['key' => 'align', 'label' => 'تراز متن', 'type' => 'select', 'options' => [
                        ['value' => 'right', 'label' => 'راست'],
                        ['value' => 'center', 'label' => 'وسط'],
                        ['value' => 'left', 'label' => 'چپ'],
                    ], 'help' => 'موقعیت قرارگیری تیتر نسبت به صفحه.'],
                    ['key' => 'color', 'label' => 'رنگ متن', 'type' => 'color', 'help' => 'رنگ تیتر بخش.'],
                    ['key' => 'showDivider', 'label' => 'نمایش خط جداکننده', 'type' => 'toggle', 'help' => 'در صورت فعال بودن یک خط نازک زیر تیتر نمایش داده می‌شود.'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'user_full_name',
                'title' => 'نام ارزیاب‌شونده',
                'icon' => 'person-circle-outline',
                'category' => 'اطلاعات کاربر',
                'description' => 'نمایش نام کامل ارزیاب‌شونده با امکان افزودن برچسب',
                'defaultProps' => [
                    'showLabel' => 0,
                    'label' => 'نام ارزیاب‌شونده',
                    'alignment' => 'center',
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'showLabel', 'label' => 'نمایش عنوان', 'type' => 'toggle', 'help' => 'در صورت خاموش بودن فقط نام نمایش داده می‌شود.'],
                    ['key' => 'label', 'label' => 'عنوان سفارشی', 'type' => 'text', 'maxLength' => 80, 'placeholder' => 'مثلاً: شرکت‌کننده', 'dependsOn' => ['showLabel' => true]],
                    ['key' => 'alignment', 'label' => 'تراز', 'type' => 'select', 'options' => [
                        ['value' => 'right', 'label' => 'راست'],
                        ['value' => 'center', 'label' => 'وسط'],
                        ['value' => 'left', 'label' => 'چپ'],
                    ], 'help' => 'جهت‌گیری متن در صفحه را مشخص می‌کند.'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'user_job_title',
                'title' => 'عنوان شغلی',
                'icon' => 'briefcase-outline',
                'category' => 'اطلاعات کاربر',
                'description' => 'نمایش عنوان شغلی یا نقش سازمانی فرد',
                'defaultProps' => [
                    'showLabel' => 0,
                    'label' => 'عنوان شغلی',
                    'alignment' => 'center',
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'showLabel', 'label' => 'نمایش عنوان', 'type' => 'toggle', 'help' => 'با غیرفعال کردن، فقط عنوان شغلی نشان داده می‌شود.'],
                    ['key' => 'label', 'label' => 'عنوان سفارشی', 'type' => 'text', 'maxLength' => 80, 'dependsOn' => ['showLabel' => true]],
                    ['key' => 'alignment', 'label' => 'تراز', 'type' => 'select', 'options' => [
                        ['value' => 'right', 'label' => 'راست'],
                        ['value' => 'center', 'label' => 'وسط'],
                        ['value' => 'left', 'label' => 'چپ'],
                    ], 'help' => 'جهت نمایش آیتم نسبت به صفحه.'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'user_profile_field',
                'title' => 'فیلد مشخصات کاربر',
                'icon' => 'id-card-outline',
                'category' => 'اطلاعات کاربر',
                'description' => 'نمایش تکی یکی از فیلدهای هویتی مانند کد ملی یا کد پرسنلی',
                'defaultProps' => [
                    'field' => 'national_id',
                    'showLabel' => 1,
                    'customLabel' => '',
                    'alignment' => 'right',
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'field', 'label' => 'فیلد اطلاعاتی', 'type' => 'select', 'options' => [
                        ['value' => 'full_name', 'label' => 'نام و نام خانوادگی'],
                        ['value' => 'national_id', 'label' => 'کد ملی'],
                        ['value' => 'personnel_code', 'label' => 'کد پرسنلی'],
                        ['value' => 'job_title', 'label' => 'عنوان شغلی'],
                        ['value' => 'organization_post', 'label' => 'پست سازمانی'],
                        ['value' => 'department', 'label' => 'واحد سازمانی'],
                        ['value' => 'service_location', 'label' => 'محل خدمت'],
                        ['value' => 'username', 'label' => 'نام کاربری'],
                    ], 'help' => 'انتخاب کنید کدام فیلد از اطلاعات کاربر نمایش داده شود.'],
                    ['key' => 'showLabel', 'label' => 'نمایش عنوان', 'type' => 'toggle'],
                    ['key' => 'customLabel', 'label' => 'عنوان سفارشی', 'type' => 'text', 'maxLength' => 80, 'placeholder' => 'مثلاً کد پرسنلی', 'dependsOn' => ['showLabel' => true]],
                    ['key' => 'alignment', 'label' => 'تراز', 'type' => 'select', 'options' => [
                        ['value' => 'right', 'label' => 'راست'],
                        ['value' => 'center', 'label' => 'وسط'],
                        ['value' => 'left', 'label' => 'چپ'],
                    ]],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'user_profile_overview',
                'title' => 'کارت مشخصات کاربر',
                'icon' => 'reader-outline',
                'category' => 'اطلاعات کاربر',
                'description' => 'نمایش چندفیلدی مشخصات کاربر در قالب کارت یا لیست',
                'defaultProps' => [
                    'title' => 'مشخصات کاربر',
                    'alignment' => 'right',
                    'layout' => 'two-column',
                    'appearance' => 'card',
                    'showLabels' => 1,
                    'showFullName' => 1,
                    'showNationalId' => 1,
                    'showPersonnelCode' => 1,
                    'showJobTitle' => 1,
                    'showOrganizationPost' => 1,
                    'showDepartment' => 1,
                    'showServiceLocation' => 1,
                    'showUsername' => 0,
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'title', 'label' => 'عنوان بخش', 'type' => 'text', 'maxLength' => 120, 'placeholder' => 'مثلاً مشخصات کاربر'],
                    ['key' => 'alignment', 'label' => 'تراز', 'type' => 'select', 'options' => [
                        ['value' => 'right', 'label' => 'راست'],
                        ['value' => 'center', 'label' => 'وسط'],
                        ['value' => 'left', 'label' => 'چپ'],
                    ]],
                    ['key' => 'layout', 'label' => 'چیدمان', 'type' => 'select', 'options' => [
                        ['value' => 'list', 'label' => 'تک ستونه'],
                        ['value' => 'two-column', 'label' => 'دو ستونه'],
                    ], 'help' => 'در حالت دو ستونه اطلاعات به صورت جدولی نمایش داده می‌شود.'],
                    ['key' => 'appearance', 'label' => 'استایل نمایش', 'type' => 'select', 'options' => [
                        ['value' => 'card', 'label' => 'کارت'],
                        ['value' => 'subtle', 'label' => 'پس‌زمینه ملایم'],
                        ['value' => 'plain', 'label' => 'ساده بدون قاب'],
                    ]],
                    ['key' => 'showLabels', 'label' => 'نمایش عنوان هر فیلد', 'type' => 'toggle'],
                    ['key' => 'showFullName', 'label' => 'نام و نام خانوادگی', 'type' => 'toggle'],
                    ['key' => 'showNationalId', 'label' => 'کد ملی', 'type' => 'toggle'],
                    ['key' => 'showPersonnelCode', 'label' => 'کد پرسنلی', 'type' => 'toggle'],
                    ['key' => 'showJobTitle', 'label' => 'عنوان شغلی', 'type' => 'toggle'],
                    ['key' => 'showOrganizationPost', 'label' => 'پست سازمانی', 'type' => 'toggle'],
                    ['key' => 'showDepartment', 'label' => 'واحد سازمانی', 'type' => 'toggle'],
                    ['key' => 'showServiceLocation', 'label' => 'محل خدمت', 'type' => 'toggle'],
                    ['key' => 'showUsername', 'label' => 'نام کاربری', 'type' => 'toggle'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'user_avatar',
                'title' => 'تصویر ارزیاب‌شونده',
                'icon' => 'image-outline',
                'category' => 'اطلاعات کاربر',
                'description' => 'نمایش تصویر پروفایل یا جایگزین مبتنی بر حروف نام',
                'defaultProps' => [
                    'shape' => 'circle',
                    'size' => 'medium',
                    'showFrame' => 1,
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'shape', 'label' => 'فرم تصویر', 'type' => 'select', 'options' => [
                        ['value' => 'circle', 'label' => 'دایره'],
                        ['value' => 'rounded', 'label' => 'گوشه‌دار'],
                        ['value' => 'square', 'label' => 'مربع'],
                    ], 'help' => 'نحوه نمایش قاب تصویر.'],
                    ['key' => 'size', 'label' => 'اندازه', 'type' => 'select', 'options' => [
                        ['value' => 'small', 'label' => 'کوچک'],
                        ['value' => 'medium', 'label' => 'متوسط'],
                        ['value' => 'large', 'label' => 'بزرگ'],
                    ], 'help' => 'ابعاد تصویر نسبت به سایر اجزا.'],
                    ['key' => 'showFrame', 'label' => 'نمایش قاب', 'type' => 'toggle', 'help' => 'در صورت فعال بودن یک قاب ظریف اطراف تصویر نمایش داده می‌شود.'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'evaluation_summary',
                'title' => 'خلاصه ارزیابی',
                'icon' => 'list-circle-outline',
                'category' => 'نتایج',
                'description' => 'نمایش خلاصه‌ای از تاریخ، دوره و وضعیت ارزیابی',
                'defaultProps' => [
                    'headline' => 'جزئیات ارزیابی',
                    'layout' => 'two-column',
                    'showDates' => 1,
                    'showEvaluators' => 1,
                    'showEvaluatees' => 1,
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'headline', 'label' => 'عنوان بخش', 'type' => 'text', 'maxLength' => 120, 'help' => 'در صورت خالی بودن، عنوان نمایش داده نمی‌شود.'],
                    ['key' => 'layout', 'label' => 'چیدمان', 'type' => 'select', 'options' => [
                        ['value' => 'single-column', 'label' => 'تک ستونه'],
                        ['value' => 'two-column', 'label' => 'دو ستونه'],
                        ['value' => 'highlight', 'label' => 'جعبه برجسته'],
                    ], 'help' => 'نحوه نمایش اطلاعات در صفحه.'],
                    ['key' => 'showDates', 'label' => 'نمایش تاریخ‌ها', 'type' => 'toggle'],
                    ['key' => 'showEvaluators', 'label' => 'نمایش ارزیاب‌ها', 'type' => 'toggle'],
                    ['key' => 'showEvaluatees', 'label' => 'نمایش ارزیاب‌شونده‌ها', 'type' => 'toggle'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'score_badges',
                'title' => 'نشان‌های امتیاز',
                'icon' => 'ribbon-outline',
                'category' => 'نتایج',
                'description' => 'نمایش امتیاز کلی و شاخص‌های کلیدی به صورت نشان',
                'defaultProps' => [
                    'showOverallScore' => 1,
                    'showRanking' => 1,
                    'displayMode' => 'badges',
                    'accentColor' => '#0f766e',
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'showOverallScore', 'label' => 'نمایش امتیاز کلی', 'type' => 'toggle'],
                    ['key' => 'showRanking', 'label' => 'نمایش رتبه نسبی', 'type' => 'toggle'],
                    ['key' => 'displayMode', 'label' => 'حالت نمایش', 'type' => 'select', 'options' => [
                        ['value' => 'badges', 'label' => 'نشان'],
                        ['value' => 'progress', 'label' => 'نوار پیشرفت'],
                        ['value' => 'tiles', 'label' => 'کارت'],
                    ]],
                    ['key' => 'accentColor', 'label' => 'رنگ تاکید', 'type' => 'color', 'help' => 'برای هماهنگی نشان‌ها با رنگ برند.'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'custom_paragraph',
                'title' => 'متن سفارشی',
                'icon' => 'document-text-outline',
                'category' => 'متن',
                'description' => 'افزودن متن توضیحی با قابلیت تنظیم تراز',
                'defaultProps' => [
                    'text' => 'متن نمونه... این ناحیه برای وارد کردن توضیحات تکمیلی استفاده می‌شود.',
                    'align' => 'right',
                    'color' => '#334155',
                    'lineHeight' => 1.8,
                    'widthMode' => 'full',
                    'applyToAllPages' => 0,
                ],
                'configFields' => [
                    ['key' => 'text', 'label' => 'متن', 'type' => 'textarea', 'maxLength' => 1000, 'placeholder' => 'متن خود را اینجا بنویسید...', 'help' => 'متنی که روی گواهی نمایش داده می‌شود.'],
                    ['key' => 'align', 'label' => 'تراز', 'type' => 'select', 'options' => [
                        ['value' => 'right', 'label' => 'راست'],
                        ['value' => 'center', 'label' => 'وسط'],
                        ['value' => 'left', 'label' => 'چپ'],
                        ['value' => 'justify', 'label' => 'تراز دوطرفه'],
                    ], 'help' => 'نحوه چینش خطوط متن.'],
                    ['key' => 'color', 'label' => 'رنگ متن', 'type' => 'color'],
                    ['key' => 'lineHeight', 'label' => 'فاصله خطوط', 'type' => 'number', 'min' => 1.2, 'max' => 2.4, 'step' => 0.1],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'dynamic_table',
                'title' => 'جدول داده',
                'icon' => 'grid-outline',
                'category' => 'داده',
                'description' => 'ساخت جدول سفارشی یا نمایش داده‌های ارزیابی به صورت خودکار',
                'defaultProps' => [
                    'mode' => 'custom',
                    'title' => 'جدول اطلاعات',
                    'showTitle' => 1,
                    'showHeader' => 1,
                    'showRowNumbers' => 0,
                    'tableStyle' => 'grid',
                    'sizeBehavior' => 'auto_scale',
                    'tableData' => [
                        'columns' => ['ستون اول', 'ستون دوم'],
                        'rows' => [
                            ['مقدار ردیف ۱ - ستون ۱', 'مقدار ردیف ۱ - ستون ۲'],
                            ['مقدار ردیف ۲ - ستون ۱', 'مقدار ردیف ۲ - ستون ۲'],
                        ],
                    ],
                    'competencyShowDefinition' => 1,
                    'toolsShowDescription' => 1,
                    'widthMode' => 'full',
                    'applyToAllPages' => 0,
                ],
                'configFields' => [
                    ['key' => 'mode', 'label' => 'منبع داده', 'type' => 'select', 'options' => [
                        ['value' => 'custom', 'label' => 'جدول سفارشی'],
                        ['value' => 'competency_model', 'label' => 'جدول شایستگی‌ها (از پایگاه داده)'],
                        ['value' => 'evaluation_tools', 'label' => 'جدول ابزارهای ارزیابی (از پایگاه داده)'],
                    ], 'help' => 'انتخاب کنید جدول به صورت دستی پر شود یا از اطلاعات ارزیابی بارگذاری شود.'],
                    ['key' => 'title', 'label' => 'عنوان جدول', 'type' => 'text', 'maxLength' => 120, 'placeholder' => 'مثلاً جدول خلاصه شایستگی‌ها'],
                    ['key' => 'showTitle', 'label' => 'نمایش عنوان', 'type' => 'toggle'],
                    ['key' => 'showHeader', 'label' => 'نمایش سطر عنوان ستون‌ها', 'type' => 'toggle', 'dependsOn' => ['mode' => 'custom']],
                    ['key' => 'showRowNumbers', 'label' => 'نمایش شماره ردیف', 'type' => 'toggle'],
                        ['key' => 'tableStyle', 'label' => 'طرح جدول', 'type' => 'select', 'options' => [
                            ['value' => 'grid', 'label' => 'شبکه‌ای (خط‌کشی کامل)'],
                            ['value' => 'minimal', 'label' => 'مینیمال (خطوط ظریف)'],
                            ['value' => 'striped', 'label' => 'ردیف‌های راه‌راه'],
                            ['value' => 'soft', 'label' => 'کارتی نرم و مدرن'],
                        ], 'help' => 'یک طرح ظاهری برای جدول انتخاب کنید.'],
                        ['key' => 'sizeBehavior', 'label' => 'نحوه تطبیق با صفحه', 'type' => 'select', 'options' => [
                            ['value' => 'auto_scale', 'label' => 'کوچک‌سازی خودکار برای جا شدن در صفحه'],
                            ['value' => 'allow_split', 'label' => 'تقسیم جدول روی چند صفحه در صورت نیاز'],
                        ], 'help' => 'اگر جدول خیلی بزرگ شد، می‌توانید اجازه دهید روی صفحه بعدی ادامه پیدا کند.'],
                    ['key' => 'tableData', 'label' => 'محتوای جدول', 'type' => 'table_editor', 'dependsOn' => ['mode' => 'custom'], 'help' => 'ستون‌ها و ردیف‌های جدول را مدیریت کنید و مقادیر را وارد کنید.'],
                    ['key' => 'competencyShowDefinition', 'label' => 'نمایش تعریف شایستگی', 'type' => 'toggle', 'dependsOn' => ['mode' => 'competency_model']],
                    ['key' => 'toolsShowDescription', 'label' => 'نمایش توضیح ابزار', 'type' => 'toggle', 'dependsOn' => ['mode' => 'evaluation_tools']],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'assessment_tool_cards',
                'title' => 'کارت ابزارهای ارزیابی',
                'icon' => 'flask-outline',
                'category' => 'آزمون‌ها',
                'description' => 'نمایش کارت‌های معرفی ابزارهای آزمون به همراه توضیحات و مشخصات تکمیلی',
                'defaultProps' => [
                    'layout' => 'grid',
                    'showDescription' => 1,
                    'showCategory' => 1,
                    'showMeta' => 1,
                    'showIcons' => 1,
                    'categoryFilter' => '',
                    'maxItems' => 6,
                    'displayMode' => 'all',
                    'selectedToolIds' => [],
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'layout', 'label' => 'چیدمان کارت‌ها', 'type' => 'select', 'options' => [
                        ['value' => 'grid', 'label' => 'کارت‌های شبکه‌ای'],
                        ['value' => 'list', 'label' => 'فهرست خطی'],
                        ['value' => 'compact', 'label' => 'فشرده (دو ستونه)'],
                    ], 'help' => 'نحوه نمایش کارت‌ها را متناسب با صفحه انتخاب کنید.'],
                    ['key' => 'showIcons', 'label' => 'نمایش آیکن ابزار', 'type' => 'toggle'],
                    ['key' => 'showDescription', 'label' => 'نمایش توضیحات آزمون', 'type' => 'toggle'],
                    ['key' => 'showCategory', 'label' => 'نمایش دسته‌بندی/نوع', 'type' => 'toggle'],
                    ['key' => 'showMeta', 'label' => 'نمایش زمان و سطح سختی', 'type' => 'toggle'],
                    ['key' => 'categoryFilter', 'label' => 'فیلتر دسته‌بندی', 'type' => 'text', 'maxLength' => 80, 'placeholder' => 'مثلاً شخصیت یا شایستگی', 'help' => 'در صورت تعیین، فقط ابزارهایی که دسته‌بندی آن با این عبارت تطبیق دارد نمایش داده می‌شوند.'],
                    ['key' => 'displayMode', 'label' => 'نحوه انتخاب ابزارها', 'type' => 'select', 'options' => [
                        ['value' => 'all', 'label' => 'نمایش همه ابزارها'],
                        ['value' => 'selected', 'label' => 'فقط ابزارهای انتخاب‌شده'],
                    ], 'help' => 'می‌توانید همه ابزارها را نمایش دهید یا تنها ابزارهایی که انتخاب می‌کنید.'],
                    ['key' => 'selectedToolIds', 'label' => 'انتخاب ابزارها', 'type' => 'multi_select', 'optionsKey' => 'assessmentToolOptions', 'maxItems' => 12, 'dependsOn' => ['displayMode' => 'selected'], 'help' => 'ابزارهایی را که باید نمایش داده شوند انتخاب کنید. برای لغو انتخاب، تیک هر ابزار را بردارید.'],
                    ['key' => 'maxItems', 'label' => 'حداکثر کارت‌ها', 'type' => 'number', 'min' => 1, 'max' => 20, 'cast' => 'int', 'dependsOn' => ['displayMode' => 'all']],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'public_profile',
                'title' => 'پروفایل عمومی',
                'icon' => 'person-outline',
                'category' => 'آزمون‌ها',
                'description' => 'جمع‌بندی داده‌محور از سبک رفتاری، ترجیحات همکاری و تمرکزهای توسعه فرد بر اساس نتایج آزمون‌ها',
                'defaultProps' => [
                    'headline' => 'پروفایل رفتاری',
                    'layout' => 'split',
                    'style' => 'card',
                    'accentColor' => '#2563eb',
                    'showHeadline' => 1,
                    'showSummary' => 1,
                    'showGeneralTendencies' => 1,
                    'showWorkPreferences' => 1,
                    'showEffectivenessRequirements' => 1,
                    'showCompanionRequirements' => 0,
                    'showBehaviorOverview' => 1,
                    'showStrengthHighlights' => 1,
                    'showCollaborationTips' => 1,
                    'showDevelopmentFocus' => 1,
                    'showStressSignals' => 0,
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'headline', 'label' => 'عنوان بخش', 'type' => 'text', 'maxLength' => 120, 'placeholder' => 'مثلاً پروفایل رفتاری'],
                    ['key' => 'showHeadline', 'label' => 'نمایش عنوان', 'type' => 'toggle'],
                    ['key' => 'layout', 'label' => 'چیدمان', 'type' => 'select', 'options' => [
                        ['value' => 'split', 'label' => 'متن و نکات در دو ستون'],
                        ['value' => 'stacked', 'label' => 'چینش ستونی'],
                    ]],
                    ['key' => 'style', 'label' => 'استایل نمایش', 'type' => 'select', 'options' => [
                        ['value' => 'card', 'label' => 'کارت با پس‌زمینه'],
                        ['value' => 'panel', 'label' => 'پنل مرزبندی شده'],
                        ['value' => 'minimal', 'label' => 'مینیمال'],
                    ]],
                    ['key' => 'accentColor', 'label' => 'رنگ تأکیدی', 'type' => 'color'],
                    ['key' => 'showSummary', 'label' => 'نمایش خلاصه کلی', 'type' => 'toggle'],
                    ['key' => 'showGeneralTendencies', 'label' => 'گرایش‌های کلی', 'type' => 'toggle'],
                    ['key' => 'showWorkPreferences', 'label' => 'ترجیحات کاری', 'type' => 'toggle'],
                    ['key' => 'showEffectivenessRequirements', 'label' => 'نیازهای موفقیت', 'type' => 'toggle'],
                    ['key' => 'showCompanionRequirements', 'label' => 'انتظارات از دیگران', 'type' => 'toggle'],
                    ['key' => 'showBehaviorOverview', 'label' => 'الگوی رفتاری', 'type' => 'toggle'],
                    ['key' => 'showStrengthHighlights', 'label' => 'نمایش نقاط قوت کلیدی', 'type' => 'toggle'],
                    ['key' => 'showCollaborationTips', 'label' => 'نمایش توصیه‌های همکاری', 'type' => 'toggle'],
                    ['key' => 'showDevelopmentFocus', 'label' => 'نمایش تمرکزهای توسعه', 'type' => 'toggle'],
                    ['key' => 'showStressSignals', 'label' => 'نمایش علائم تنش', 'type' => 'toggle'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'mbti_profile',
                'title' => 'پروفایل MBTI',
                'icon' => 'sparkles-outline',
                'category' => 'آزمون‌ها',
                'description' => 'نمایش تیپ شخصیتی MBTI همراه با نقاط قوت، فرصت‌های رشد و نمودار ترجیحات',
                'defaultProps' => [
                    'headline' => 'پروفایل MBTI',
                    'showTypeOverview' => 1,
                    'showSummary' => 1,
                    'showStrengths' => 1,
                    'showGrowthAreas' => 1,
                    'showCollaborationStyle' => 1,
                    'showPreferenceBars' => 1,
                    'selectedFeatureCategories' => null,
                    'startOnNextPage' => 0,
                    'featureCategoryLabels' => [],
                    'accentColor' => '#4f46e5',
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    [
                        'key' => 'autoDataNotice',
                        'label' => 'منبع داده',
                        'type' => 'note',
                        'note' => 'محتوای تیپ، خلاصه، نقاط قوت و نمودار ترجیحات MBTI بر اساس پاسخ‌های آزمون هر ارزیاب‌شونده به صورت خودکار تکمیل می‌شود. فقط گزینه‌های نمایش و رنگ در این بخش قابل تنظیم هستند.',
                    ],
                    ['key' => 'headline', 'label' => 'عنوان بخش', 'type' => 'text', 'maxLength' => 120, 'placeholder' => 'مثلاً پروفایل شخصیتی MBTI'],
                    ['key' => 'showTypeOverview', 'label' => 'نمایش تیتر تیپ شخصیتی', 'type' => 'toggle', 'help' => 'در صورت خاموش بودن، کد تیپ، نام پرسونای MBTI و توضیحات ابتدایی نمایش داده نمی‌شود.'],
                    ['key' => 'showSummary', 'label' => 'نمایش متن خلاصه', 'type' => 'toggle', 'help' => 'در صورت فعال بودن، خلاصه تیپ از داده‌های آزمون نمایش داده می‌شود.'],
                    ['key' => 'showStrengths', 'label' => 'نمایش نقاط قوت', 'type' => 'toggle', 'help' => 'نقاط قوت از ویژگی‌های ثبت‌شده برای تیپ MBTI استخراج می‌شوند.'],
                    ['key' => 'showGrowthAreas', 'label' => 'نمایش فرصت‌های رشد', 'type' => 'toggle', 'help' => 'فرصت‌های رشد بر اساس ویژگی‌های تعریف‌شده برای تیپ MBTI نمایش داده می‌شود.'],
                    ['key' => 'showCollaborationStyle', 'label' => 'نمایش «سبک همکاری ترجیحی»', 'type' => 'toggle'],
                    ['key' => 'showPreferenceBars', 'label' => 'نمایش نمودار ترجیحات', 'type' => 'toggle', 'help' => 'نسبت ترجیحات چهارگانه بر اساس پاسخ‌های آزمون محاسبه می‌گردد.'],
                    ['key' => 'selectedFeatureCategories', 'label' => 'دسته‌های ویژگی', 'type' => 'mbti_feature_picker', 'help' => 'فقط دسته‌هایی که فعال باشند به همراه همه ویژگی‌های آن‌ها در گواهی نمایش داده می‌شوند.'],
                    ['key' => 'startOnNextPage', 'label' => 'شروع از صفحه بعد', 'type' => 'toggle', 'help' => 'در صورت فعال بودن، این بخش از ابتدای صفحه بعد نمایش داده می‌شود.'],
                    ['key' => 'featureCategoryLabels', 'label' => 'عنوان فارسی دسته‌ها', 'type' => 'mbti_feature_labels', 'help' => 'برای هر دسته عنوان فارسی بنویسید تا در گواهی نمایش داده شود. در صورت خالی بودن عنوان اصلی استفاده می‌شود.'],
                    ['key' => 'accentColor', 'label' => 'رنگ تأکیدی', 'type' => 'color'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'mbti_type_matrix',
                'title' => 'ماتریس تیپ‌های MBTI',
                'icon' => 'grid-outline',
                'category' => 'آزمون‌ها',
                'description' => 'نمایش جدول ۱۶ تیپ MBTI با برجسته‌سازی تیپ فعلی ارزیاب‌شونده',
                'defaultProps' => [
                    'headline' => 'ماتریس تیپ‌های MBTI',
                    'showLegend' => 1,
                    'accentColor' => '#2563eb',
                    'inactiveColor' => 'rgba(15, 23, 42, 0.16)',
                    'startOnNextPage' => 0,
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'headline', 'label' => 'عنوان بخش', 'type' => 'text', 'maxLength' => 120, 'placeholder' => 'مثلاً ماتریس تیپ‌های شخصیتی'],
                    ['key' => 'showLegend', 'label' => 'نمایش توضیح تیپ فعلی', 'type' => 'toggle'],
                    ['key' => 'accentColor', 'label' => 'رنگ تیپ فعلی', 'type' => 'color', 'help' => 'برای برجسته کردن خانه مربوط به تیپ، رنگ دلخواه را انتخاب کنید.'],
                    ['key' => 'inactiveColor', 'label' => 'رنگ حاشیه خانه‌ها', 'type' => 'color'],
                    ['key' => 'startOnNextPage', 'label' => 'شروع از صفحه بعد', 'type' => 'toggle'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'disc_profile_chart',
                'title' => 'نمودار DISC',
                'icon' => 'analytics-outline',
                'category' => 'نتایج',
                'description' => 'نمایش شدت مؤلفه‌های Dominance، Influence، Steadiness و Conscientiousness همراه با نکات کلیدی',
                'defaultProps' => [
                    'headline' => 'پروفایل DISC',
                    'summaryText' => 'ترکیب نمرات DISC نشان می‌دهد سبک غالب فرد در رهبری و تعامل چگونه است.',
                    'showSummary' => 1,
                    'showHighlights' => 1,
                    'accentColor' => '#f97316',
                    'scoreD' => 78,
                    'scoreI' => 64,
                    'scoreS' => 55,
                    'scoreC' => 42,
                    'highlights' => ['در شرایط فشار تمرکز بر نتیجه بالاست.', 'برای پایداری تیم لازم است بر شنیدن فعال کار شود.'],
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'headline', 'label' => 'عنوان بخش', 'type' => 'text', 'maxLength' => 120],
                    ['key' => 'showSummary', 'label' => 'نمایش متن خلاصه', 'type' => 'toggle'],
                    ['key' => 'summaryText', 'label' => 'خلاصه تحلیلی', 'type' => 'textarea', 'maxLength' => 400, 'rows' => 3, 'dependsOn' => ['showSummary' => 1]],
                    ['key' => 'showHighlights', 'label' => 'نمایش نکات کلیدی', 'type' => 'toggle'],
                    ['key' => 'highlights', 'label' => 'نکات کلیدی', 'type' => 'list', 'maxItems' => 6, 'itemMaxLength' => 160, 'dependsOn' => ['showHighlights' => 1]],
                    ['key' => 'accentColor', 'label' => 'رنگ تأکیدی', 'type' => 'color'],
                    ['key' => 'scoreD', 'label' => 'نمره Dominance (D)', 'type' => 'number', 'min' => 0, 'max' => 100, 'cast' => 'int'],
                    ['key' => 'scoreI', 'label' => 'نمره Influence (I)', 'type' => 'number', 'min' => 0, 'max' => 100, 'cast' => 'int'],
                    ['key' => 'scoreS', 'label' => 'نمره Steadiness (S)', 'type' => 'number', 'min' => 0, 'max' => 100, 'cast' => 'int'],
                    ['key' => 'scoreC', 'label' => 'نمره Conscientiousness (C)', 'type' => 'number', 'min' => 0, 'max' => 100, 'cast' => 'int'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'disc_profile_overview',
                'title' => 'تحلیل جامع DISC',
                'icon' => 'people-circle-outline',
                'category' => 'نتایج',
                'description' => 'جمع‌بندی سبک غالب، نکات برجسته و ترجیحات رفتاری DISC در قالب یک نمای متنی کامل',
                'defaultProps' => [
                    'headline' => 'تحلیل جامع DISC',
                    'showHeadline' => 1,
                    'showSummary' => 1,
                    'summaryText' => '',
                    'showHighlights' => 1,
                    'highlightTitle' => 'نکات برجسته',
                    'showSecondary' => 1,
                    'showCounts' => 1,
                    'countsHeadline' => 'مقایسه پاسخ‌ها',
                    'showSections' => 1,
                    'visibleSections' => ['general_tendencies', 'work_preferences', 'effectiveness_requirements', 'companion_requirements'],
                    'sectionsDisplay' => 'two-column',
                    'accentColor' => '#f97316',
                    'supportColor' => '#0f172a',
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'showHeadline', 'label' => 'نمایش عنوان بخش', 'type' => 'toggle'],
                    ['key' => 'headline', 'label' => 'عنوان بخش', 'type' => 'text', 'maxLength' => 120, 'dependsOn' => ['showHeadline' => 1]],
                    ['key' => 'showSummary', 'label' => 'نمایش خلاصه تحلیلی', 'type' => 'toggle'],
                    ['key' => 'summaryText', 'label' => 'متن خلاصه', 'type' => 'textarea', 'rows' => 3, 'maxLength' => 400, 'dependsOn' => ['showSummary' => 1]],
                    ['key' => 'showHighlights', 'label' => 'نمایش نکات برجسته', 'type' => 'toggle'],
                    ['key' => 'highlightTitle', 'label' => 'عنوان نکات برجسته', 'type' => 'text', 'maxLength' => 120, 'dependsOn' => ['showHighlights' => 1]],
                    ['key' => 'showSecondary', 'label' => 'نمایش سبک پشتیبان', 'type' => 'toggle'],
                    ['key' => 'showCounts', 'label' => 'نمایش جدول پاسخ‌ها', 'type' => 'toggle'],
                    ['key' => 'countsHeadline', 'label' => 'عنوان جدول پاسخ‌ها', 'type' => 'text', 'maxLength' => 120, 'dependsOn' => ['showCounts' => 1]],
                    ['key' => 'showSections', 'label' => 'نمایش سرفصل‌های رفتاری', 'type' => 'toggle'],
                    ['key' => 'visibleSections', 'label' => 'سرفصل‌های قابل نمایش', 'type' => 'multi_select', 'options' => [
                        ['value' => 'general_tendencies', 'label' => 'گرایش‌های کلی'],
                        ['value' => 'work_preferences', 'label' => 'ترجیحات کاری'],
                        ['value' => 'effectiveness_requirements', 'label' => 'نیازهای موفقیت'],
                        ['value' => 'companion_requirements', 'label' => 'انتظارات از همکاران'],
                    ], 'maxItems' => 4, 'dependsOn' => ['showSections' => 1]],
                    ['key' => 'sectionsDisplay', 'label' => 'چیدمان سرفصل‌ها', 'type' => 'select', 'options' => [
                        ['value' => 'two-column', 'label' => 'دو ستونه'],
                        ['value' => 'stacked', 'label' => 'زیر هم'],
                    ], 'dependsOn' => ['showSections' => 1]],
                    ['key' => 'accentColor', 'label' => 'رنگ تأکیدی', 'type' => 'color'],
                    ['key' => 'supportColor', 'label' => 'رنگ کمکی', 'type' => 'color'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'disc_triple_graphs',
                'title' => 'نمودار سه‌گانه DISC',
                'icon' => 'stats-chart-outline',
                'category' => 'نتایج',
                'description' => 'نمایش سه نمودار استاندارد DISC (طبیعی، تطبیق‌یافته، اجتماعی) همراه با توضیحات مفهومی',
                'defaultProps' => [
                    'showHeadline' => 1,
                    'headline' => 'نمودارهای استاندارد DISC',
                    'graphsJson' => json_encode([
                        [
                            'title' => 'Graph I',
                            'subtitle' => 'سبک رفتاری تطبیق‌یافته',
                            'points' => ['D' => 68, 'I' => 52, 'S' => 28, 'C' => 64],
                            'summary' => 'نمودار اول نشان می‌دهد فرد در محیط‌های رسمی تمایل دارد با سرعت بالا تصمیم بگیرد و ساختار را حفظ کند.',
                            'notes' => ['Intensity' => '++', 'Segment' => 'نتیجه‌محور'],
                        ],
                        [
                            'title' => 'Graph II',
                            'subtitle' => 'سبک رفتاری طبیعی',
                            'points' => ['D' => 62, 'I' => 47, 'S' => 36, 'C' => 58],
                            'summary' => 'در حالت طبیعی، تعادل بیشتری میان تصمیم‌گیری سریع و تعامل روابطی حفظ می‌شود.',
                            'notes' => ['Intensity' => '+', 'Segment' => 'پیش‌برنده روابط'],
                        ],
                        [
                            'title' => 'Graph III',
                            'subtitle' => 'سبک رفتاری اجتماعی',
                            'points' => ['D' => 42, 'I' => 58, 'S' => 46, 'C' => 38],
                            'summary' => 'بازخورد دیگران نشان می‌دهد فرد در جمع‌های اجتماعی نفوذ کلام بالاتری دارد.',
                            'notes' => ['Intensity' => 'متوسط', 'Segment' => 'الهام‌بخش'],
                        ],
                    ], JSON_UNESCAPED_UNICODE),
                    'descriptionHeadline' => 'مفهوم نمودارها',
                    'descriptionList' => [
                        'Graph I (تطبیق‌یافته): نحوه بروز رفتار هنگام نیاز به نتیجه‌گیری سریع و هماهنگی با ساختار رسمی سازمان.',
                        'Graph II (طبیعی): ترجیحات رفتاری ذاتی فرد که در نبود فشار بیرونی ظاهر می‌شود.',
                        'Graph III (اجتماعی): تصویری که دیگران از سبک رفتاری فرد در تعاملات روزمره دارند.',
                    ],
                    'accentColor' => '#2563eb',
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'showHeadline', 'label' => 'نمایش عنوان', 'type' => 'toggle'],
                    ['key' => 'headline', 'label' => 'عنوان بخش', 'type' => 'text', 'maxLength' => 120, 'dependsOn' => ['showHeadline' => 1]],
                    ['key' => 'graphsJson', 'label' => 'اطلاعات نمودارها (JSON)', 'type' => 'textarea', 'rows' => 8, 'maxLength' => 1600, 'help' => 'چهار مقدار D، I، S و C را برای هر نمودار مشخص کنید. مثال: [{"title":"Graph I","points":{"D":70,"I":45,"S":30,"C":60}}]'],
                    ['key' => 'descriptionHeadline', 'label' => 'عنوان بخش توضیحات', 'type' => 'text', 'maxLength' => 160],
                    ['key' => 'descriptionList', 'label' => 'متن‌های توضیحی', 'type' => 'list', 'maxItems' => 6, 'itemMaxLength' => 220],
                    ['key' => 'accentColor', 'label' => 'رنگ نمودار', 'type' => 'color'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'disc_single_graph',
                'title' => 'نمودار خطی DISC',
                'icon' => 'analytics-outline',
                'category' => 'نتایج',
                'description' => 'نمایش شدت مؤلفه‌های DISC در قالب یک نمودار خطی مشابه گزارش‌های استاندارد',
                'defaultProps' => [
                    'showHeadline' => 1,
                    'headline' => 'نمودار شدت DISC',
                    'accentColor' => '#f97316',
                    'showValues' => 1,
                    'scoreD' => 78,
                    'scoreI' => 64,
                    'scoreS' => 55,
                    'scoreC' => 42,
                    'showSummary' => 1,
                    'summaryText' => 'این نمودار شدت نسبی هر یک از سبک‌های DISC را برای ارزیاب‌شونده نشان می‌دهد.',
                    'chartSize' => 'medium',
                    'align' => 'center',
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'showHeadline', 'label' => 'نمایش عنوان', 'type' => 'toggle'],
                    ['key' => 'headline', 'label' => 'عنوان بخش', 'type' => 'text', 'maxLength' => 120, 'dependsOn' => ['showHeadline' => 1]],
                    ['key' => 'accentColor', 'label' => 'رنگ نمودار', 'type' => 'color'],
                    ['key' => 'showValues', 'label' => 'نمایش جدول مقادیر', 'type' => 'toggle'],
                    ['key' => 'scoreD', 'label' => 'نمره D', 'type' => 'number', 'min' => 0, 'max' => 100, 'cast' => 'int'],
                    ['key' => 'scoreI', 'label' => 'نمره I', 'type' => 'number', 'min' => 0, 'max' => 100, 'cast' => 'int'],
                    ['key' => 'scoreS', 'label' => 'نمره S', 'type' => 'number', 'min' => 0, 'max' => 100, 'cast' => 'int'],
                    ['key' => 'scoreC', 'label' => 'نمره C', 'type' => 'number', 'min' => 0, 'max' => 100, 'cast' => 'int'],
                    ['key' => 'showSummary', 'label' => 'نمایش متن توضیحی', 'type' => 'toggle'],
                    ['key' => 'summaryText', 'label' => 'متن توضیحی', 'type' => 'textarea', 'rows' => 3, 'maxLength' => 400, 'dependsOn' => ['showSummary' => 1]],
                    ['key' => 'chartSize', 'label' => 'اندازه نمودار', 'type' => 'select', 'options' => [
                        ['value' => 'small', 'label' => 'کوچک'],
                        ['value' => 'medium', 'label' => 'متوسط'],
                        ['value' => 'large', 'label' => 'بزرگ'],
                    ]],
                    ['key' => 'align', 'label' => 'تراز قرارگیری', 'type' => 'select', 'options' => [
                        ['value' => 'right', 'label' => 'راست'],
                        ['value' => 'center', 'label' => 'وسط'],
                        ['value' => 'left', 'label' => 'چپ'],
                    ]],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'gauge_indicator',
                'title' => 'نشانگر گیج',
                'icon' => 'speedometer-outline',
                'category' => 'نتایج',
                'description' => 'نمایش یک شاخص کلیدی عملکرد یا مهارت به صورت گیج نیم‌دایره‌ای',
                'defaultProps' => [
                    'headline' => 'شاخص مهارتی',
                    'label' => 'تفکر تحلیلی',
                    'unit' => 'از ۱۰۰',
                    'value' => 82,
                    'maxValue' => 100,
                    'size' => 'medium',
                    'accentColor' => '#0ea5e9',
                    'showDescription' => 1,
                    'description' => 'امتیاز به‌دست‌آمده نشان می‌دهد فرد در تحلیل داده‌ها و ارائه توصیه‌های مبتنی بر شواهد عملکرد قوی دارد.',
                    'sourceKey' => 'analytical_thinking',
                    'widthMode' => 'half',
                ],
                'configFields' => [
                    ['key' => 'headline', 'label' => 'عنوان شاخص', 'type' => 'text', 'maxLength' => 120],
                    ['key' => 'label', 'label' => 'برچسب گیج', 'type' => 'text', 'maxLength' => 120],
                    ['key' => 'unit', 'label' => 'واحد نمایش', 'type' => 'text', 'maxLength' => 60, 'placeholder' => 'مثلاً از ۱۰۰'],
                    ['key' => 'value', 'label' => 'مقدار فعلی', 'type' => 'number', 'min' => 0, 'max' => 1000],
                    ['key' => 'maxValue', 'label' => 'حداکثر مقدار', 'type' => 'number', 'min' => 1, 'max' => 1000],
                    ['key' => 'size', 'label' => 'اندازه', 'type' => 'select', 'options' => [
                        ['value' => 'small', 'label' => 'کوچک'],
                        ['value' => 'medium', 'label' => 'متوسط'],
                        ['value' => 'large', 'label' => 'بزرگ'],
                    ]],
                    ['key' => 'accentColor', 'label' => 'رنگ گیج', 'type' => 'color'],
                    ['key' => 'showDescription', 'label' => 'نمایش توضیحات', 'type' => 'toggle'],
                    ['key' => 'description', 'label' => 'توضیح تکمیلی', 'type' => 'textarea', 'maxLength' => 400, 'rows' => 3, 'dependsOn' => ['showDescription' => 1]],
                    ['key' => 'sourceKey', 'label' => 'کلید منبع داده', 'type' => 'text', 'maxLength' => 80, 'placeholder' => 'مثلاً analytical_thinking', 'help' => 'در صورت تطبیق با داده‌های سامانه، مقدار واقعی به‌صورت خودکار جایگزین می‌شود.'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'analytical_thinking_insight',
                'title' => 'تحلیل تفکر تحلیلی',
                'icon' => 'trending-up-outline',
                'category' => 'نتایج',
                'description' => 'نمایش امتیاز آزمون تفکر تحلیلی به صورت گیج با تفسیر متنی مبتنی بر بازه امتیاز',
                'defaultProps' => [
                    'showHeadline' => 1,
                    'headline' => 'نتیجه تفکر تحلیلی',
                    'analysisHeadline' => 'تفسیر عملکرد',
                    'accentColor' => '#0ea5e9',
                    'alignment' => 'center',
                    'showDetails' => 1,
                    'showBreakdown' => 1,
                    'showAnalysisText' => 1,
                    'lowThreshold' => 50,
                    'mediumThreshold' => 60,
                    'lowText' => 'این امتیاز نشان می‌دهد لازم است با تمرین‌های هدفمند، مهارت در تحلیل داده‌های پیچیده تقویت شود.',
                    'mediumText' => 'عملکرد در محدوده متوسط قرار دارد و با به‌کارگیری چارچوب‌های تحلیلی منظم می‌توان به سرعت رشد کرد.',
                    'highText' => 'سطح تفکر تحلیلی بالاتر از میانگین و نشانگر تصمیم‌گیری مبتنی بر شواهد است.',
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'showHeadline', 'label' => 'نمایش عنوان', 'type' => 'toggle'],
                    ['key' => 'headline', 'label' => 'عنوان بخش', 'type' => 'text', 'maxLength' => 120, 'dependsOn' => ['showHeadline' => 1]],
                    ['key' => 'analysisHeadline', 'label' => 'عنوان تفسیر', 'type' => 'text', 'maxLength' => 160],
                    ['key' => 'accentColor', 'label' => 'رنگ تاکید', 'type' => 'color'],
                    ['key' => 'alignment', 'label' => 'تراز عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'right', 'label' => 'راست'],
                        ['value' => 'center', 'label' => 'وسط'],
                        ['value' => 'left', 'label' => 'چپ'],
                    ]],
                    ['key' => 'showDetails', 'label' => 'نمایش مقادیر پاسخ‌ها', 'type' => 'toggle'],
                    ['key' => 'showBreakdown', 'label' => 'نمایش جدول درست/نادرست', 'type' => 'toggle'],
                    ['key' => 'showAnalysisText', 'label' => 'نمایش متن تفسیر', 'type' => 'toggle'],
                    ['key' => 'lowThreshold', 'label' => 'آستانه بازه متوسط', 'type' => 'number', 'min' => 0, 'max' => 100, 'cast' => 'int', 'help' => 'امتیاز کمتر از این مقدار در بازه نیاز به توسعه قرار می‌گیرد.'],
                    ['key' => 'mediumThreshold', 'label' => 'آستانه بازه پیشرفته', 'type' => 'number', 'min' => 0, 'max' => 100, 'cast' => 'int', 'help' => 'امتیاز برابر یا بالاتر از این مقدار در بازه پیشرفته قرار می‌گیرد.'],
                    ['key' => 'lowText', 'label' => 'متن بازه نیاز به توسعه', 'type' => 'textarea', 'rows' => 3, 'maxLength' => 400, 'dependsOn' => ['showAnalysisText' => 1]],
                    ['key' => 'mediumText', 'label' => 'متن بازه در حال توسعه', 'type' => 'textarea', 'rows' => 3, 'maxLength' => 400, 'dependsOn' => ['showAnalysisText' => 1]],
                    ['key' => 'highText', 'label' => 'متن بازه پیشرفته', 'type' => 'textarea', 'rows' => 3, 'maxLength' => 400, 'dependsOn' => ['showAnalysisText' => 1]],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'washup_agreed_competencies',
                'title' => 'شایستگی‌های Wash-Up',
                'icon' => 'clipboard-outline',
                'category' => 'نتایج',
                'description' => 'نمایش شایستگی‌هایی که در جلسه Wash-Up برای آنها امتیاز توافقی ثبت شده است.',
                'defaultProps' => [
                    'showHeadline' => 1,
                    'headline' => 'شایستگی‌های دارای امتیاز توافقی',
                    'showSummary' => 1,
                    'summary' => 'این بخش شایستگی‌هایی را نمایش می‌دهد که در Wash-Up به توافق نهایی رسیده‌اند.',
                    'layout' => 'cards',
                    'maxItems' => 6,
                    'showScore' => 1,
                    'showGauges' => 1,
                    'gaugeMax' => '',
                    'gaugeSize' => 42,
                    'maxPerTool' => 0,
                    'eachToolOnNewPage' => 1,
                    'toolHeaderAlign' => 'auto',
                    'toolHeaderSize' => 'auto',
                    'scoreInline' => 1,
                    'scoreOrder' => 'score_first',
                    'groupedItemAppearance' => 'cards',
                    'groupedCardsPerRow' => 2,
                    'groupedCardBorder' => 1,
                    'groupedCardShadow' => 0,
                    'groupedCardInnerLayout' => 'vertical',
                    'showDimension' => 1,
                    'showCompetencyCode' => 0,
                    'showCompetencyNature' => 1,
                    // Example notes table under each tool group
                    'showExampleNotes' => 1,
                    'exampleNotesTitle' => 'مصداق‌ها و توضیحات ارزیاب',
                    'exampleNotesShowEvaluator' => 1,
                    'showTools' => 1,
                    'showUpdatedInfo' => 1,
                    'showFooter' => 0,
                    'footerNote' => '',
                    'emptyMessage' => 'برای این ارزیابی هنوز امتیاز توافقی ثبت نشده است.',
                    'accentColor' => '#2563eb',
                    'alignment' => 'right',
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'showHeadline', 'label' => 'نمایش عنوان', 'type' => 'toggle'],
                    ['key' => 'headline', 'label' => 'عنوان بخش', 'type' => 'text', 'maxLength' => 160, 'dependsOn' => ['showHeadline' => 1]],
                    ['key' => 'accentColor', 'label' => 'رنگ تاکید', 'type' => 'color'],
                    ['key' => 'alignment', 'label' => 'تراز عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'right', 'label' => 'راست'],
                        ['value' => 'center', 'label' => 'وسط'],
                        ['value' => 'left', 'label' => 'چپ'],
                    ]],
                    ['key' => 'layout', 'label' => 'طرح نمایش', 'type' => 'select', 'options' => [
                        ['value' => 'cards', 'label' => 'کارت‌ها'],
                        ['value' => 'list', 'label' => 'فهرست'],
                        ['value' => 'table', 'label' => 'جدول'],
                        ['value' => 'grouped_by_tool', 'label' => 'گروه‌بندی بر اساس ابزار'],
                    ]],
                    ['key' => 'maxItems', 'label' => 'حداکثر آیتم‌ها', 'type' => 'number', 'min' => 1, 'max' => 12, 'cast' => 'int'],
                    ['key' => 'showGauges', 'label' => 'نمایش گیج کنار امتیاز', 'type' => 'toggle'],
                    ['key' => 'gaugeMax', 'label' => 'سقف گیج (۵/۱۰/۱۰۰)', 'type' => 'number', 'min' => 0, 'max' => 100, 'help' => 'اگر ۰ یا خالی باشد به صورت خودکار از روی داده‌ها ۵/۱۰/۱۰۰ تشخیص داده می‌شود.'],
                    ['key' => 'gaugeSize', 'label' => 'اندازه گیج (px)', 'type' => 'number', 'min' => 24, 'max' => 120, 'cast' => 'int'],
                    ['key' => 'maxPerTool', 'label' => 'حداکثر آیتم در هر ابزار', 'type' => 'number', 'min' => 0, 'max' => 50, 'cast' => 'int', 'help' => '۰ یعنی بدون محدودیت در هر گروه ابزار.'],
                    ['key' => 'eachToolOnNewPage', 'label' => 'هر ابزار در صفحه جدا', 'type' => 'toggle', 'dependsOn' => ['layout' => 'grouped_by_tool']],
                    // Grouped-by-tool presentation
                    ['key' => 'toolHeaderAlign', 'label' => 'تراز عنوان ابزار', 'type' => 'select', 'options' => [
                        ['value' => 'auto', 'label' => 'خودکار'],
                        ['value' => 'right', 'label' => 'راست'],
                        ['value' => 'center', 'label' => 'وسط'],
                        ['value' => 'left', 'label' => 'چپ'],
                    ], 'dependsOn' => ['layout' => 'grouped_by_tool']],
                    ['key' => 'toolHeaderSize', 'label' => 'اندازه عنوان ابزار', 'type' => 'select', 'options' => [
                        ['value' => 'auto', 'label' => 'خودکار'],
                        ['value' => 'normal', 'label' => 'عادی'],
                        ['value' => 'large', 'label' => 'بزرگ'],
                        ['value' => 'xlarge', 'label' => 'خیلی بزرگ'],
                    ], 'dependsOn' => ['layout' => 'grouped_by_tool']],
                    ['key' => 'scoreInline', 'label' => 'نمایش امتیاز و گیج در یک ردیف', 'type' => 'toggle', 'dependsOn' => ['layout' => 'grouped_by_tool']],
                    ['key' => 'scoreOrder', 'label' => 'ترتیب نمایش', 'type' => 'select', 'options' => [
                        ['value' => 'score_first', 'label' => 'ابتدا امتیاز سپس گیج'],
                        ['value' => 'gauge_first', 'label' => 'ابتدا گیج سپس امتیاز'],
                    ], 'dependsOn' => ['layout' => 'grouped_by_tool']],
                    ['key' => 'groupedItemAppearance', 'label' => 'نمایش آیتم‌ها', 'type' => 'select', 'options' => [
                        ['value' => 'cards', 'label' => 'کارتی (شبکه‌ای)'],
                        ['value' => 'list', 'label' => 'فهرست ساده'],
                    ], 'dependsOn' => ['layout' => 'grouped_by_tool']],
                    ['key' => 'groupedCardsPerRow', 'label' => 'تعداد ستون کارت‌ها', 'type' => 'number', 'min' => 1, 'max' => 4, 'cast' => 'int', 'dependsOn' => ['groupedItemAppearance' => 'cards']],
                    ['key' => 'groupedCardBorder', 'label' => 'نمایش کادر دور کارت', 'type' => 'toggle', 'dependsOn' => ['groupedItemAppearance' => 'cards']],
                    ['key' => 'groupedCardShadow', 'label' => 'سایه کارت', 'type' => 'toggle', 'dependsOn' => ['groupedItemAppearance' => 'cards']],
                    ['key' => 'groupedCardInnerLayout', 'label' => 'چیدمان داخل کارت', 'type' => 'select', 'options' => [
                        ['value' => 'vertical', 'label' => 'عمودی (گیج، امتیاز، سپس عنوان)'],
                        ['value' => 'horizontal', 'label' => 'افقی (پیش‌فرض قبلی)'],
                    ], 'dependsOn' => ['groupedItemAppearance' => 'cards']],
                    // Example notes table under grouped-by-tool
                    ['key' => 'showExampleNotes', 'label' => 'نمایش جدول توضیحات مصادیق', 'type' => 'toggle', 'dependsOn' => ['layout' => 'grouped_by_tool']],
                    ['key' => 'exampleNotesTitle', 'label' => 'عنوان جدول توضیحات', 'type' => 'text', 'maxLength' => 160, 'dependsOn' => ['layout' => 'grouped_by_tool', 'showExampleNotes' => 1]],
                    ['key' => 'exampleNotesShowEvaluator', 'label' => 'نمایش ستون ارزیاب', 'type' => 'toggle', 'dependsOn' => ['layout' => 'grouped_by_tool', 'showExampleNotes' => 1]],
                    ['key' => 'showSummary', 'label' => 'نمایش خلاصه', 'type' => 'toggle'],
                    ['key' => 'summary', 'label' => 'متن خلاصه', 'type' => 'textarea', 'rows' => 3, 'maxLength' => 400, 'dependsOn' => ['showSummary' => 1]],
                    ['key' => 'showScore', 'label' => 'نمایش امتیاز', 'type' => 'toggle'],
                    ['key' => 'showDimension', 'label' => 'نمایش حوزه شایستگی', 'type' => 'toggle'],
                    ['key' => 'showCompetencyCode', 'label' => 'نمایش کد شایستگی', 'type' => 'toggle'],
                    ['key' => 'showCompetencyNature', 'label' => 'نمایش نوع شایستگی (عمومی/اختصاصی)', 'type' => 'toggle'],
                    ['key' => 'showTools', 'label' => 'نمایش ابزارهای موثر', 'type' => 'toggle'],
                    ['key' => 'showUpdatedInfo', 'label' => 'نمایش اطلاعات به‌روزرسانی', 'type' => 'toggle'],
                    ['key' => 'showFooter', 'label' => 'نمایش یادداشت پایانی', 'type' => 'toggle'],
                    ['key' => 'footerNote', 'label' => 'متن یادداشت پایانی', 'type' => 'textarea', 'rows' => 2, 'maxLength' => 300, 'dependsOn' => ['showFooter' => 1]],
                    ['key' => 'emptyMessage', 'label' => 'پیام حالت خالی', 'type' => 'text', 'maxLength' => 200],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'custom_image',
                'title' => 'تصویر سفارشی',
                'icon' => 'images-outline',
                'category' => 'رسانه',
                'description' => 'نمایش تصویر از منابع پویا یا URL ثابت',
                'defaultProps' => [
                    'mode' => 'dynamic',
                    'dynamicSource' => 'evaluation_cover',
                    'staticUrl' => '',
                    'width' => '100%',
                    'borderRadius' => '16px',
                    'altText' => 'تصویر گواهی',
                    'align' => 'center',
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'mode', 'label' => 'منبع تصویر', 'type' => 'select', 'options' => [
                        ['value' => 'dynamic', 'label' => 'پویا (بر اساس داده)'],
                        ['value' => 'static', 'label' => 'آدرس ثابت'],
                    ], 'help' => 'در حالت پویا تصویر از داده‌های سیستم دریافت می‌شود.'],
                    ['key' => 'dynamicSource', 'label' => 'منبع پویا', 'type' => 'select', 'options' => [
                        ['value' => 'evaluation_cover', 'label' => 'تصویر کاور ارزیابی'],
                        ['value' => 'organization_logo', 'label' => 'لوگوی سازمان'],
                        ['value' => 'participant_avatar', 'label' => 'تصویر ارزیاب‌شونده'],
                        ['value' => 'competency_model', 'label' => 'تصویر مدل شایستگی'],
                    ], 'dependsOn' => ['mode' => 'dynamic']],
                    ['key' => 'staticUrl', 'label' => 'آدرس تصویر ثابت', 'type' => 'text', 'maxLength' => 255, 'placeholder' => 'https://example.com/image.png', 'help' => 'می‌توانید تصویر دلخواه را آپلود کنید یا آدرس اینترنتی آن را وارد نمایید.', 'allowUpload' => true, 'accept' => 'image/*', 'maxFileSize' => 5242880, 'dependsOn' => ['mode' => 'static']],
                    ['key' => 'width', 'label' => 'عرض (مثلاً 80% یا 260px)', 'type' => 'text', 'maxLength' => 32],
                    ['key' => 'borderRadius', 'label' => 'گردی گوشه‌ها', 'type' => 'text', 'maxLength' => 32],
                    ['key' => 'altText', 'label' => 'متن جایگزین', 'type' => 'text', 'maxLength' => 120, 'help' => 'برای دسترس‌پذیری و زمانی که تصویر لود نمی‌شود.'],
                    ['key' => 'align', 'label' => 'تراز تصویر', 'type' => 'select', 'options' => [
                        ['value' => 'right', 'label' => 'راست'],
                        ['value' => 'center', 'label' => 'وسط'],
                        ['value' => 'left', 'label' => 'چپ'],
                    ], 'help' => 'موقعیت قرارگیری تصویر در عرض صفحه را مشخص کنید.'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'logo_display',
                'title' => 'لوگو',
                'icon' => 'shield-outline',
                'category' => 'رسانه',
                'description' => 'نمایش لوگوی سازمان یا سامانه با اندازه‌های مختلف',
                'defaultProps' => [
                    'source' => 'organization',
                    'align' => 'center',
                    'size' => 'medium',
                    'sizePercent' => '',
                    'showLabel' => 0,
                    'customLabel' => '',
                    'showBorder' => 0,
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'source', 'label' => 'منبع لوگو', 'type' => 'select', 'options' => [
                        ['value' => 'organization', 'label' => 'لوگوی سازمان'],
                        ['value' => 'system', 'label' => 'لوگوی سامانه'],
                    ], 'help' => 'انتخاب کنید لوگوی سازمان نمایش داده شود یا لوگوی سامانه.'],
                    ['key' => 'align', 'label' => 'تراز', 'type' => 'select', 'options' => [
                        ['value' => 'right', 'label' => 'راست'],
                        ['value' => 'center', 'label' => 'وسط'],
                        ['value' => 'left', 'label' => 'چپ'],
                    ], 'help' => 'موقعیت قرارگیری لوگو در صفحه.'],
                    ['key' => 'size', 'label' => 'اندازه لوگو', 'type' => 'select', 'options' => [
                        ['value' => 'small', 'label' => 'کوچک'],
                        ['value' => 'medium', 'label' => 'متوسط'],
                        ['value' => 'large', 'label' => 'بزرگ'],
                    ], 'help' => 'اندازه نمایش لوگو را مشخص می‌کند.'],
                    ['key' => 'sizePercent', 'label' => 'اندازه (درصد)', 'type' => 'number', 'min' => 5, 'max' => 100, 'step' => 1, 'help' => 'عرض لوگو نسبت به عرض بخش به صورت درصد. اگر خالی باشد از اندازه پیش‌فرض (کوچک/متوسط/بزرگ) استفاده می‌شود.'],
                    ['key' => 'showLabel', 'label' => 'نمایش عنوان', 'type' => 'toggle', 'help' => 'در صورت فعال بودن متنی در زیر لوگو نمایش داده می‌شود.'],
                    ['key' => 'customLabel', 'label' => 'عنوان سفارشی', 'type' => 'text', 'maxLength' => 120, 'placeholder' => 'مثلاً: لوگوی سازمان شما', 'dependsOn' => ['showLabel' => true]],
                    ['key' => 'showBorder', 'label' => 'نمایش قاب دور لوگو', 'type' => 'toggle'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ], 'help' => 'برای نمایش دو لوگو در کنار هم، گزینه نیم‌عرض را انتخاب کنید.'],
                ],
            ],
            [
                'type' => 'signature_block',
                'title' => 'بلوک امضا',
                'icon' => 'pencil-outline',
                'category' => 'امضا و تایید',
                'description' => 'نمایش جایگاه امضای مدیران یا مهر سازمان',
                'defaultProps' => [
                    'headline' => 'تاییدیه سازمان',
                    'showFirstSigner' => 1,
                    'firstSignerLabel' => 'نماینده اول',
                    'showSecondSigner' => 0,
                    'secondSignerLabel' => 'نماینده دوم',
                    'showSeal' => 1,
                    'sealLabel' => 'مهر سازمان',
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'headline', 'label' => 'عنوان بخش', 'type' => 'text', 'maxLength' => 120],
                    ['key' => 'showFirstSigner', 'label' => 'امضای مدیر اول', 'type' => 'toggle'],
                    ['key' => 'firstSignerLabel', 'label' => 'عنوان امضا ۱', 'type' => 'text', 'maxLength' => 120, 'dependsOn' => ['showFirstSigner' => true]],
                    ['key' => 'showSecondSigner', 'label' => 'امضای مدیر دوم', 'type' => 'toggle'],
                    ['key' => 'secondSignerLabel', 'label' => 'عنوان امضا ۲', 'type' => 'text', 'maxLength' => 120, 'dependsOn' => ['showSecondSigner' => true]],
                    ['key' => 'showSeal', 'label' => 'نمایش مهر سازمان', 'type' => 'toggle'],
                    ['key' => 'sealLabel', 'label' => 'عنوان مهر', 'type' => 'text', 'maxLength' => 120, 'dependsOn' => ['showSeal' => true]],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'divider',
                'title' => 'خط جداکننده',
                'icon' => 'remove-outline',
                'category' => 'چیدمان',
                'description' => 'ایجاد مرز بصری بین بخش‌ها',
                'defaultProps' => [
                    'style' => 'solid',
                    'thickness' => 2,
                    'color' => 'rgba(15, 23, 42, 0.16)',
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'style', 'label' => 'نوع خط', 'type' => 'select', 'options' => [
                        ['value' => 'solid', 'label' => 'یکنواخت'],
                        ['value' => 'dashed', 'label' => 'خط چین'],
                        ['value' => 'double', 'label' => 'دوتایی'],
                    ]],
                    ['key' => 'thickness', 'label' => 'ضخامت', 'type' => 'number', 'min' => 1, 'max' => 12, 'cast' => 'int'],
                    ['key' => 'color', 'label' => 'کد رنگ', 'type' => 'text', 'maxLength' => 32],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'spacer',
                'title' => 'فاصله عمودی',
                'icon' => 'ellipsis-vertical-outline',
                'category' => 'چیدمان',
                'description' => 'تنظیم فاصله بین عناصر',
                'defaultProps' => [
                    'height' => 32,
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'height', 'label' => 'ارتفاع (پیکسل)', 'type' => 'number', 'min' => 8, 'max' => 160, 'cast' => 'int'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'chart_placeholder',
                'title' => 'نمایه نمودار',
                'icon' => 'stats-chart-outline',
                'category' => 'نتایج',
                'description' => 'بخش مخصوص قرارگیری نمودارهای نتایج آزمون',
                'defaultProps' => [
                    'chartType' => 'radar',
                    'showLegend' => 1,
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'chartType', 'label' => 'نوع نمودار', 'type' => 'select', 'options' => [
                        ['value' => 'radar', 'label' => 'رادار شایستگی'],
                        ['value' => 'bar', 'label' => 'میله‌ای'],
                        ['value' => 'line', 'label' => 'خطی'],
                    ]],
                    ['key' => 'showLegend', 'label' => 'نمایش راهنما', 'type' => 'toggle'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
            [
                'type' => 'washup_final_result',
                'title' => 'نتیجه نهایی WashUp',
                'icon' => 'checkmark-done-circle-outline',
                'category' => 'نتایج',
                'description' => 'جمع‌بندی نهایی، توصیه‌ها و پیشنهادات توسعه از WashUp',
                'defaultProps' => [
                    'title' => 'نتیجه نهایی و جمع‌بندی',
                    'showSummary' => 1,
                    'showRecommendations' => 1,
                    'showDevelopmentSuggestions' => 1,
                    'showNextSteps' => 1,
                    'appearance' => 'card',
                    'widthMode' => 'full',
                ],
                'configFields' => [
                    ['key' => 'title', 'label' => 'عنوان بخش', 'type' => 'text', 'maxLength' => 120, 'placeholder' => 'مثلاً نتیجه نهایی'],
                    ['key' => 'showSummary', 'label' => 'نمایش جمع‌بندی کلی', 'type' => 'toggle', 'help' => 'خلاصه نتایج و ارزیابی کلی'],
                    ['key' => 'showRecommendations', 'label' => 'نمایش توصیه‌ها', 'type' => 'toggle', 'help' => 'توصیه‌های بهبود عملکرد'],
                    ['key' => 'showDevelopmentSuggestions', 'label' => 'نمایش پیشنهادات توسعه', 'type' => 'toggle', 'help' => 'پیشنهادهای توسعه مهارت‌ها (اختیاری)'],
                    ['key' => 'showNextSteps', 'label' => 'نمایش گام‌های بعدی', 'type' => 'toggle', 'help' => 'اقدامات و گام‌های پیشنهادی بعدی (اختیاری)'],
                    ['key' => 'appearance', 'label' => 'استایل نمایش', 'type' => 'select', 'options' => [
                        ['value' => 'card', 'label' => 'کارت برجسته'],
                        ['value' => 'boxed', 'label' => 'قاب‌دار'],
                        ['value' => 'minimal', 'label' => 'مینیمال'],
                    ], 'help' => 'نحوه نمایش بصری اطلاعات'],
                    ['key' => 'widthMode', 'label' => 'عرض عنصر', 'type' => 'select', 'options' => [
                        ['value' => 'full', 'label' => 'تمام عرض'],
                        ['value' => 'half', 'label' => 'نیم‌عرض (دو ستون)'],
                    ]],
                ],
            ],
        ];
    }

    private function getCertificatePreviewSampleData(array $organization, array $user): array
    {
        $organizationName = isset($organization['name']) && $organization['name'] !== ''
            ? (string) $organization['name']
            : 'سازمان نمونه';

        return [
            'organization_name' => $organizationName,
            'user_first_name' => 'سمانه',
            'user_last_name' => 'جعفری',
            'user_full_name' => 'سمانه جعفری',
            'user_job_title' => 'کارشناس توسعه منابع انسانی',
            'user_organization_post' => 'سرپرست واحد توسعه',
            'user_department' => 'معاونت سرمایه انسانی',
            'user_personnel_code' => '۱۲۳۴۵۶',
            'user_national_id' => '۰۰۱۲۳۴۵۶۷۸',
            'user_service_location' => 'اداره کل منابع انسانی',
            'user_username' => 's.jafari',
            'user_initials' => 'SJ',
            'organization_logo_url' => UtilityHelper::baseUrl('public/assets/images/thumbs/invoice-logo3.png'),
            'system_logo_url' => UtilityHelper::baseUrl('public/assets/images/logo/logo.png'),
            'evaluation_title' => 'برنامه توسعه رهبری ۱۴۰۴',
            'evaluation_period' => '۱۴۰۴/۰۷/۱۰ تا ۱۴۰۴/۰۷/۲۵',
            'issued_at' => '۱۴۰۴/۰۸/۰۱',
            'overall_score' => '۸۶',
            'overall_score_suffix' => 'از ۱۰۰',
            'overall_score_numeric' => 86,
            'ranking_value' => '۱۰ از ۱۲۰',
            'ranking_position' => 10,
            'ranking_total' => 120,
            'evaluators_count' => '۶ ارزیاب',
            'evaluatees_count' => '۱ ارزیاب‌شونده',
            'signers' => [
                ['name' => 'کتایون محمدی', 'title' => 'مدیر توسعه منابع انسانی'],
                ['name' => 'رضا احمدی', 'title' => 'مدیرعامل'],
            ],
            'evaluation_cover_image_url' => UtilityHelper::baseUrl('public/assets/images/thumbs/mentor-cover-img4.png'),
            'participant_avatar_url' => UtilityHelper::baseUrl('public/assets/images/thumbs/avatar-img4.png'),
            'competency_model_name' => 'مدل شایستگی رهبران آینده',
            'competency_model_image_url' => UtilityHelper::baseUrl('public/assets/images/thumbs/mentor-cover-img7.png'),
            'competencies' => [
                ['name' => 'رهبری تحول‌آفرین', 'definition' => 'توانایی الهام‌بخشی و هدایت تیم در مسیر تغییرات سازمانی.'],
                ['name' => 'تفکر استراتژیک', 'definition' => 'تحلیل آینده کسب‌وکار و ترجمه آن به اولویت‌های اجرایی.'],
                ['name' => 'توسعه کارکنان', 'definition' => 'حمایت از رشد حرفه‌ای اعضای تیم با بازخورد و مربیگری.'],
            ],
            'evaluation_tools' => [
                ['name' => 'ارزیابی ۳۶۰ درجه', 'description' => 'جمع‌آوری بازخورد از مدیر، همکار و زیردست برای فرایند یادگیری.'],
                ['name' => 'آزمون MBTI', 'description' => 'سنجش ترجیحات شخصیتی و سبک تصمیم‌گیری.'],
                ['name' => 'مصاحبه رفتاری ساختارمند', 'description' => 'تحلیل تجربه‌های واقعی فرد برای ارزیابی شایستگی‌ها.'],
            ],
            'assessment_tools' => [
                [
                    'id' => 'sample_mbti',
                    'name' => 'MBTI',
                    'category' => 'شخصیت‌شناسی',
                    'description' => 'سنجش ترجیحات شخصیتی بر اساس چهار بعد اصلی و ارائه تیپ رفتاری.',
                    'estimatedTime' => '۱۵ دقیقه',
                    'difficulty' => 'ساده',
                    'icon' => 'sparkles-outline',
                ],
                [
                    'id' => 'sample_disc',
                    'name' => 'DISC',
                    'category' => 'سبک ارتباطی',
                    'description' => 'تحلیل سبک غالب رفتاری در محیط کار و نحوه تعامل با دیگران.',
                    'estimatedTime' => '۱۲ دقیقه',
                    'difficulty' => 'متوسط',
                    'icon' => 'analytics-outline',
                ],
                [
                    'id' => 'sample_analytical',
                    'name' => 'آزمون تفکر تحلیلی',
                    'category' => 'مهارت‌های شناختی',
                    'description' => 'ارزیابی توانایی تحلیل داده‌ها، حل مسئله و تصمیم‌گیری مبتنی بر شواهد.',
                    'estimatedTime' => '۲۰ دقیقه',
                    'difficulty' => 'چالش‌برانگیز',
                    'icon' => 'speedometer-outline',
                ],
            ],
            'mbti_profile' => [
                'type_code' => 'ENFP-A',
                'type_title' => 'الهام‌بخش خلاق',
                'type_category' => 'دیپلومات‌ها',
                'type_summary' => 'افراد این تیپ با ترکیب انرژی بالای هیجانی و نگاه آینده‌نگر، دیگران را با ایده‌های نو همراه می‌کنند.',
                'type_short_description' => 'ترکیبی از شهود و احساس که به ایجاد انگیزه، همدلی و نوآفرینی کمک می‌کند.',
                'type_description' => 'تیپ ENFP به‌عنوان الهام‌بخش خلاق، با تمرکز بر فرصت‌ها و امکان‌های نو وارد میدان می‌شود و ترجیح می‌دهد با استقلال عمل و شبکه‌ای گسترده از ارتباطات ایده‌های تازه را به اجرا درآورد.',
                'cognitive_functions' => 'Ne → Fi → Te → Si',
                'persona_name' => 'الهام‌بخش خلاق',
                'summary' => 'این تیپ شخصیتی با رویکرد خلاقانه، انرژی بالایی در ایجاد انگیزه و پیشبرد تغییرات دارد و در تیم‌ها الهام‌بخش است.',
                'strengths' => ['ایده‌پردازی و نوآوری', 'ارتباطات بین‌فردی قوی', 'سازگار با تغییرات'],
                'growth_areas' => ['نیاز به برنامه‌ریزی دقیق‌تر', 'مدیریت زمان و اولویت‌بندی'],
                'feature_groups' => [
                    ['category' => 'نقاط قوت اصلی', 'items' => ['ایده‌پردازی و نوآوری', 'ارتباطات بین‌فردی قوی', 'سازگار با تغییرات']],
                    ['category' => 'فرصت‌های رشد', 'items' => ['نیاز به برنامه‌ریزی دقیق‌تر', 'مدیریت زمان و اولویت‌بندی']],
                    ['category' => 'سبک همکاری ترجیحی', 'items' => ['ترجیح تعاملات منعطف و غیررسمی', 'بهترین عملکرد در تیم‌های چندوظیفه‌ای و متنوع']],
                ],
                'features' => [
                    'نقاط قوت اصلی' => ['ایده‌پردازی و نوآوری', 'ارتباطات بین‌فردی قوی', 'سازگار با تغییرات'],
                    'فرصت‌های رشد' => ['نیاز به برنامه‌ریزی دقیق‌تر', 'مدیریت زمان و اولویت‌بندی'],
                    'سبک همکاری ترجیحی' => ['ترجیح تعاملات منعطف و غیررسمی', 'بهترین عملکرد در تیم‌های چندوظیفه‌ای و متنوع'],
                ],
                'preferences' => [
                    ['axis' => 'برون‌گرایی (E)', 'value' => 72],
                    ['axis' => 'شهود (N)', 'value' => 68],
                    ['axis' => 'احساس (F)', 'value' => 74],
                    ['axis' => 'ادراک (P)', 'value' => 66],
                ],
                'preferenceEI' => 72,
                'preferenceSN' => 68,
                'preferenceTF' => 74,
                'preferenceJP' => 66,
            ],
            'disc_profile' => [
                'has_disc' => true,
                'D' => 78,
                'I' => 64,
                'S' => 55,
                'C' => 42,
                'primary_code' => 'D',
                'primary_label' => 'Dominance',
                'secondary_code' => 'D/I',
                'secondary_label' => 'Dominance / Influence',
                'best_counts' => ['D' => 39, 'I' => 32, 'S' => 28, 'C' => 21],
                'least_counts' => ['D' => 12, 'I' => 18, 'S' => 22, 'C' => 16],
                'primary_meta' => [
                    'disc_type_code' => 'D',
                    'title' => 'رهبر نتیجه‌گرا',
                    'short_description' => 'هدایت پروژه‌ها با تمرکز بر نتیجه سریع و مشخص.',
                    'general_tendencies' => "تمایل به تصمیم‌گیری سریع و پیشبرد پروژه‌ها.\nتمرکز بر دستیابی به نتیجه در کوتاه‌ترین زمان.",
                    'work_preferences' => "آزادی عمل در تعیین روش انجام کار.\nتیم‌های چابک با نقش‌های مشخص.",
                    'effectiveness_requirements' => "اهداف شفاف و قابل اندازه‌گیری.\nاختیار کافی برای اعمال تصمیمات.",
                    'companion_requirements' => "همکارانی که بازخورد مستقیم ارائه می‌کنند.\nتیمی که در مواجهه با چالش‌ها همراه بماند.",
                ],
                'secondary_meta' => [
                    'disc_type_code' => 'DI',
                    'title' => 'الهام‌بخش پرانرژی',
                    'short_description' => 'با انرژی و نفوذ اجتماعی بالا فعالیت‌ها را آغاز می‌کند.',
                    'general_tendencies' => "ایجاد انگیزه در دیگران با انرژی بالا.\nاهمیت به دیده شدن پیشرفت‌ها و جشن گرفتن موفقیت.",
                    'work_preferences' => "تعامل مستمر با ذی‌نفعان متنوع.\nجلسات کوتاه و پرانرژی برای مرور پیشرفت.",
                ],
                'highlights' => ['سبک رهبری نتیجه‌گرا و قاطع', 'تمرکز بر سرعت در تصمیم‌گیری', 'نیاز به تقویت گوش‌دادن فعال'],
                'summary' => 'پروفایل DISC نشان می‌دهد فرد در نقش‌های نیازمند قاطعیت و پیشرانی پروژه‌ها عملکرد قوی دارد و لازم است روی ثبات و مشارکت تیمی بیشتر سرمایه‌گذاری کند.',
                'triple_graphs' => [
                    'graphs' => [
                        [
                            'title' => 'Graph I',
                            'subtitle' => 'سبک رفتاری تطبیق‌یافته',
                            'points' => ['D' => 68, 'I' => 52, 'S' => 28, 'C' => 64],
                            'summary' => 'نمودار اول نشان می‌دهد فرد در محیط‌های رسمی تمایل دارد با سرعت بالا تصمیم بگیرد و ساختار را حفظ کند.',
                            'notes' => ['Intensity' => '++', 'Segment' => 'نتیجه‌محور'],
                        ],
                        [
                            'title' => 'Graph II',
                            'subtitle' => 'سبک رفتاری طبیعی',
                            'points' => ['D' => 62, 'I' => 47, 'S' => 36, 'C' => 58],
                            'summary' => 'در حالت طبیعی، تعادل بیشتری میان تصمیم‌گیری سریع و تعامل روابطی حفظ می‌شود.',
                            'notes' => ['Intensity' => '+', 'Segment' => 'پیش‌برنده روابط'],
                        ],
                        [
                            'title' => 'Graph III',
                            'subtitle' => 'سبک رفتاری اجتماعی',
                            'points' => ['D' => 42, 'I' => 58, 'S' => 46, 'C' => 38],
                            'summary' => 'بازخورد دیگران نشان می‌دهد فرد در جمع‌های اجتماعی نفوذ کلام بالاتری دارد.',
                            'notes' => ['Intensity' => 'متوسط', 'Segment' => 'الهام‌بخش'],
                        ],
                    ],
                    'descriptions' => [
                        'Graph I (تطبیق‌یافته): نحوه بروز رفتار هنگام نیاز به نتیجه‌گیری سریع و هماهنگی با ساختار رسمی سازمان.',
                        'Graph II (طبیعی): ترجیحات رفتاری ذاتی فرد که در نبود فشار بیرونی ظاهر می‌شود.',
                        'Graph III (اجتماعی): تصویری که دیگران از سبک رفتاری فرد در تعاملات روزمره دارند.',
                    ],
                ],
            ],
            'analytical' => [
                'has_analytical' => true,
                'score' => 68,
                'percent' => 68,
                'answered' => 25,
                'correct' => 17,
                'incorrect' => 8,
                'band' => 'high',
                'band_label' => 'عملکرد قوی',
                'analysis_text' => 'امتیاز به‌دست‌آمده نشان می‌دهد توان تحلیل داده‌ها و استخراج الگوهای معنادار در سطح بالایی قرار دارد و تصمیم‌ها بر پایه شواهد اتخاذ می‌شود.',
                'analysis_headline' => 'تفسیر عملکرد تحلیلی',
                'analysis_texts' => [
                    'low' => 'این امتیاز حاکی از نیاز به تمرین بیشتر در تحلیل داده‌های پیچیده و تقویت روش‌های ساختاردهی مسئله است.',
                    'medium' => 'عملکرد در محدوده متوسط قرار دارد؛ تمرکز بر مستندسازی منظم یافته‌ها و بررسی مجدد فرضیات می‌تواند منجر به رشد محسوس شود.',
                    'high' => 'توان تفکر تحلیلی بالاتر از میانگین است و نشان می‌دهد تصمیم‌ها بر اساس جمع‌آوری اطلاعات، مقایسه گزینه‌ها و نتیجه‌گیری دقیق اتخاذ می‌شوند.',
                ],
                'thresholds' => [
                    'low' => 50,
                    'medium' => 60,
                ],
                'range_labels' => [
                    'low' => 'نیاز به توسعه',
                    'medium' => 'در مسیر رشد',
                    'high' => 'سطح پیشرفته',
                ],
                'accentColor' => '#0ea5e9',
            ],
            'washup_agreed' => [
                'has_washup' => true,
                'headline' => 'شایستگی‌های دارای امتیاز توافقی',
                'summary' => 'این بخش شایستگی‌هایی را نشان می‌دهد که در جلسه Wash-Up برای آنها امتیاز توافقی ثبت شده است.',
                'accentColor' => '#2563eb',
                'footer_note' => 'امتیازها پس از جمع‌بندی نهایی Wash-Up تایید شده‌اند.',
                'empty_message' => 'برای این ارزیابی هنوز امتیاز توافقی ثبت نشده است.',
                'items' => [
                    [
                        'competency_id' => 101,
                        'competency_title' => 'رهبری تحول‌آفرین',
                        'competency_code' => 'LEAD-01',
                        'dimension' => 'رهبری',
                        'agreed_score' => 4.6,
                        'score_label' => '۴٫۶ از ۵',
                        'tools' => ['ارزیابی ۳۶۰ درجه', 'مصاحبه رفتاری ساختارمند'],
                        'updated_at' => '۱۴۰۴/۰۷/۲۸',
                        'updated_by' => 'کتایون محمدی',
                    ],
                    [
                        'competency_id' => 108,
                        'competency_title' => 'تفکر استراتژیک',
                        'competency_code' => 'STR-02',
                        'dimension' => 'تفکر',
                        'agreed_score' => 4.2,
                        'score_label' => '۴٫۲ از ۵',
                        'tools' => ['ارزیابی ۳۶۰ درجه'],
                        'updated_at' => '۱۴۰۴/۰۷/۲۷',
                        'updated_by' => 'رضا احمدی',
                    ],
                    [
                        'competency_id' => 115,
                        'competency_title' => 'توسعه کارکنان',
                        'competency_code' => 'DEV-07',
                        'dimension' => 'سرپرستی',
                        'agreed_score' => 3.9,
                        'score_label' => '۳٫۹ از ۵',
                        'tools' => ['مصاحبه رفتاری ساختارمند'],
                        'updated_at' => '۱۴۰۴/۰۷/۲۶',
                        'updated_by' => 'نگین حدادی',
                    ],
                ],
            ],
            'public_profile' => [
                'headline' => 'پروفایل عمومی ارزیاب‌شونده',
                'persona_name' => 'رهبر تحول‌آفرین',
                'style_name' => 'سبک ارتباطی نتیجه‌محور',
                'summary' => 'این پروفایل تصویری یکپارچه از سبک رفتاری، ترجیحات همکاری و تمرکزهای توسعه فرد را ارائه می‌دهد تا تیم بتواند تعاملات اثربخش‌تری با او داشته باشد.',
                'sections' => [
                    'general_tendencies' => [
                        'title' => 'گرایش‌های کلی',
                        'text' => 'در تعاملات حرفه‌ای با انرژی و انگیزه بالا ظاهر می‌شود، تغییر را فرصت می‌بیند و برای آغاز پروژه‌های نو مشتاق است.',
                    ],
                    'work_preferences' => [
                        'title' => 'ترجیحات کاری',
                        'text' => 'فضاهای کاری منعطف، امکان تصمیم‌گیری سریع و دسترسی به اطلاعات کافی برای برنامه‌ریزی مرحله‌ای را ترجیح می‌دهد.',
                        'bullets' => [
                            'به بازخورد سریع و مشخص واکنش بهتری نشان می‌دهد.',
                            'رویه‌های ساده و واضح را به فرآیندهای پیچیده ترجیح می‌دهد.',
                        ],
                    ],
                    'effectiveness_requirements' => [
                        'title' => 'نیازهای موفقیت',
                        'text' => 'برای حفظ عملکرد بالا به اهداف شفاف، اختیار کافی برای تصمیم‌گیری و دسترسی به شبکه‌ای از همکاران کلیدی تکیه می‌کند.',
                    ],
                    'behavior_overview' => [
                        'title' => 'الگوی رفتاری',
                        'text' => 'در شرایط فشار همچنان ارتباط مستقیم را حفظ می‌کند، اما ممکن است به‌سرعت از جزئیات عبور کند و نیازمند همراهی حوصله‌مندانه تیم است.',
                    ],
                    'companion_requirements' => [
                        'title' => 'انتظارات از همکاران',
                        'text' => 'به همکارانی پاسخ مثبت می‌دهد که ایده‌های او را به اجرا نزدیک کنند، بازخورد سازنده بدهند و در برابر سرعت بالای تصمیم‌گیری منعطف باشند.',
                    ],
                ],
                'strengths' => [
                    'قابلیت الهام‌بخشی و ایجاد انگیزه در تیم‌های بین‌وظیفه‌ای',
                    'هدایت جلسات تصمیم‌گیری با نگاه کلان و آینده‌نگر',
                    'توانایی شناسایی سریع فرصت‌های رشد و نوآوری',
                ],
                'collaboration_tips' => [
                    'اهداف را در ابتدای همکاری به زبان نتایج و شاخص‌های موفقیت تعریف کنید.',
                    'در تصمیم‌گیری‌ها جمع‌بندی مختصر ارائه کنید تا سرعت عمل حفظ شود.',
                    'برای طرح نقد یا بازخورد، ابتدا دستاوردها را به رسمیت بشناسید و سپس پیشنهاد مشخص بدهید.',
                ],
                'development_focus' => [
                    'تقویت مهارت مستندسازی و پیگیری ساختارمند پیشرفت‌ها',
                    'توجه بیشتر به شنیدن فعال دیدگاه‌های متفاوت پیش از جمع‌بندی',
                    'تمرکز بر ایجاد تعادل میان سرعت عمل و توجه به جزئیات اجرایی',
                ],
                'stress_signals' => [
                    'در مواجهه با فشار زمانی ممکن است به‌صورت شتاب‌زده تصمیم بگیرد.',
                    'کاهش تمایل به مشارکت جمعی و تمرکز صرف بر نتیجه فوری.',
                ],
                'source_tool' => 'پروفایل عمومی داده‌محور',
                'updated_at_formatted' => '۱۴۰۴/۰۸/۰۱',
            ],
            'skills' => [
                ['key' => 'analytical_thinking', 'label' => 'تفکر تحلیلی', 'score' => 82, 'max' => 100],
                ['key' => 'problem_solving', 'label' => 'حل مسئله', 'score' => 76, 'max' => 100],
            ],
        ];
    }

    private function getCertificatePreviewAssessmentTools(int $organizationId): array
    {
        if ($organizationId <= 0) {
            return [];
        }

        try {
            $rows = DatabaseHelper::fetchAll(
                'SELECT id, code, name, question_type, description, guide, duration_minutes, is_optional, is_exam
                 FROM organization_evaluation_tools
                 WHERE organization_id = :organization_id
                 ORDER BY name ASC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            return [];
        }

        if (empty($rows)) {
            return [];
        }

        $tools = [];
        foreach ($rows as $row) {
            if (!is_array($row)) {
                continue;
            }

            $id = isset($row['id']) ? trim((string) $row['id']) : '';
            if ($id === '') {
                continue;
            }

            $name = isset($row['name']) ? trim((string) $row['name']) : '';
            if ($name === '') {
                continue;
            }

            $description = isset($row['description']) ? trim((string) $row['description']) : '';
            if ($description === '' && isset($row['guide'])) {
                $description = trim((string) $row['guide']);
            }

            $durationMinutes = isset($row['duration_minutes']) && is_numeric($row['duration_minutes'])
                ? max(0, (int) $row['duration_minutes'])
                : 0;
            $estimatedTime = '';
            if ($durationMinutes > 0) {
                $estimatedTime = UtilityHelper::englishToPersian((string) $durationMinutes) . ' دقیقه';
            }

            $questionType = isset($row['question_type']) ? trim((string) $row['question_type']) : '';
            if ($questionType === '') {
                $questionType = ((int) ($row['is_exam'] ?? 0) === 1) ? 'آزمون' : 'ابزار ارزیابی';
            }

            $difficulty = '';
            if (isset($row['is_optional'])) {
                $difficulty = ((int) $row['is_optional'] === 1) ? 'اختیاری' : 'اجباری';
            }

            $icon = ((int) ($row['is_exam'] ?? 0) === 1) ? 'clipboard-outline' : 'document-text-outline';

            $tools[] = [
                'id' => $id,
                'code' => isset($row['code']) ? (string) $row['code'] : '',
                'name' => $name,
                'category' => $questionType,
                'description' => $description,
                'estimatedTime' => $estimatedTime,
                'difficulty' => $difficulty,
                'icon' => $icon,
            ];
        }

        return $tools;
    }

    private function resolveCertificatePreviewSubjectIds(): array
    {
        $evaluationId = 0;
        $evaluateeId = 0;

        $evaluationKeys = ['evaluation_id', 'evaluation', 'evaluationId', 'evaluationID'];
        foreach ($evaluationKeys as $key) {
            if (!isset($_GET[$key])) {
                continue;
            }
            $candidate = UtilityHelper::persianToEnglish(trim((string) $_GET[$key]));
            if ($candidate === '' || !preg_match('/^-?\d+$/', $candidate)) {
                continue;
            }
            $value = (int) $candidate;
            if ($value > 0) {
                $evaluationId = $value;
                break;
            }
        }

        $evaluateeKeys = ['evaluatee_id', 'evaluatee', 'evaluateeId', 'user_id', 'user', 'participant_id', 'participant'];
        foreach ($evaluateeKeys as $key) {
            if (!isset($_GET[$key])) {
                continue;
            }
            $candidate = UtilityHelper::persianToEnglish(trim((string) $_GET[$key]));
            if ($candidate === '' || !preg_match('/^-?\d+$/', $candidate)) {
                continue;
            }
            $value = (int) $candidate;
            if ($value > 0) {
                $evaluateeId = $value;
                break;
            }
        }

        return [
            'evaluation_id' => $evaluationId,
            'evaluatee_id' => $evaluateeId,
        ];
    }

    private function getCertificatePreviewEvaluationContext(int $organizationId, int $requestedEvaluationId, int $requestedEvaluateeId): array
    {
        $result = [
            'evaluation_options' => [],
            'evaluatee_options' => [],
            'selected_evaluation' => null,
            'selected_evaluation_id' => 0,
            'selected_evaluatee' => null,
            'selected_evaluatee_id' => 0,
            'evaluation_count' => 0,
        ];

        if ($organizationId <= 0) {
            return $result;
        }

        try {
            $evaluationRows = DatabaseHelper::fetchAll(
                'SELECT id, title, evaluation_date, evaluatees_json
                 FROM organization_evaluations
                 WHERE organization_id = :organization_id
                 ORDER BY (evaluation_date IS NULL) ASC, evaluation_date DESC, id DESC',
                ['organization_id' => $organizationId]
            );
        } catch (Exception $exception) {
            $evaluationRows = [];
        }

        if (empty($evaluationRows)) {
            return $result;
        }

        $evaluationCandidates = [];
        $uniqueUserIds = [];

        foreach ($evaluationRows as $row) {
            $evaluationId = (int) ($row['id'] ?? 0);
            if ($evaluationId <= 0) {
                continue;
            }

            $evaluateeIds = [];
            $rawEvaluatees = $row['evaluatees_json'] ?? null;
            if (is_string($rawEvaluatees) && trim($rawEvaluatees) !== '') {
                $decoded = json_decode((string) $rawEvaluatees, true);
                if (is_array($decoded)) {
                    foreach ($decoded as $entry) {
                        $uid = 0;
                        if (is_array($entry)) {
                            $uid = (int) ($entry['id'] ?? 0);
                        } else {
                            $uid = (int) $entry;
                        }
                        if ($uid > 0) {
                            $evaluateeIds[$uid] = true;
                            $uniqueUserIds[$uid] = true;
                        }
                    }
                }
            }

            $evaluationCandidates[] = [
                'row' => $row,
                'id' => $evaluationId,
                'evaluatee_ids' => array_keys($evaluateeIds),
            ];
        }

        if (empty($evaluationCandidates)) {
            return $result;
        }

        $userRecords = [];
        $userLabelMap = [];

        if (!empty($uniqueUserIds)) {
            $placeholders = implode(',', array_fill(0, count($uniqueUserIds), '?'));
            $params = array_merge([$organizationId], array_keys($uniqueUserIds));

            try {
                $userRows = DatabaseHelper::fetchAll(
                    "SELECT id, username, national_code, personnel_code, first_name, last_name, display_name, job_title, organization_post, department, service_location
                     FROM organization_users
                     WHERE organization_id = ? AND id IN ({$placeholders})",
                    $params
                );
            } catch (Exception $exception) {
                $userRows = [];
            }

            if (!empty($userRows)) {
                foreach ($userRows as $userRow) {
                    $userId = (int) ($userRow['id'] ?? 0);
                    if ($userId <= 0) {
                        continue;
                    }

                    $firstName = trim((string) ($userRow['first_name'] ?? ''));
                    $lastName = trim((string) ($userRow['last_name'] ?? ''));
                    $displayName = trim((string) ($userRow['display_name'] ?? ''));
                    $fullName = trim($firstName . ' ' . $lastName);
                    $username = trim((string) ($userRow['username'] ?? ''));

                    $label = $displayName !== '' ? $displayName : ($fullName !== '' ? $fullName : $username);
                    if ($label === '') {
                        $label = 'ارزیاب‌شونده #' . UtilityHelper::englishToPersian((string) $userId);
                    }

                    $userRecords[$userId] = [
                        'id' => $userId,
                        'first_name' => $firstName,
                        'last_name' => $lastName,
                        'display_name' => $displayName,
                        'username' => $username,
                        'national_code' => trim((string) ($userRow['national_code'] ?? '')),
                        'personnel_code' => trim((string) ($userRow['personnel_code'] ?? '')),
                        'job_title' => trim((string) ($userRow['job_title'] ?? '')),
                        'organization_post' => trim((string) ($userRow['organization_post'] ?? '')),
                        'department' => trim((string) ($userRow['department'] ?? '')),
                        'service_location' => trim((string) ($userRow['service_location'] ?? '')),
                    ];

                    $userLabelMap[$userId] = $label;
                }
            }
        }

        $evaluationOptions = [
            [
                'value' => '',
                'label' => 'انتخاب برنامه ارزیابی',
            ],
        ];

        $evaluationsIndexed = [];
        $selectedEvaluation = null;
        $selectedEvaluatee = null;

        $buildDisplayName = static function (array $userDetails, string $fallbackLabel, int $userId): string {
            $displayName = trim((string) ($userDetails['display_name'] ?? ''));
            if ($displayName !== '') {
                return $displayName;
            }

            $first = trim((string) ($userDetails['first_name'] ?? ''));
            $last = trim((string) ($userDetails['last_name'] ?? ''));
            $username = trim((string) ($userDetails['username'] ?? ''));
            $fullName = trim($first . ' ' . $last);
            if ($fullName !== '') {
                return $fullName;
            }
            if ($fallbackLabel !== '') {
                return $fallbackLabel;
            }
            if ($username !== '') {
                return $username;
            }
            return 'ارزیاب‌شونده #' . UtilityHelper::englishToPersian((string) $userId);
        };

        foreach ($evaluationCandidates as $candidate) {
            $row = $candidate['row'];
            $evaluationId = $candidate['id'];

            $title = isset($row['title']) ? trim((string) $row['title']) : '';
            if ($title === '') {
                $title = 'برنامه ارزیابی #' . UtilityHelper::englishToPersian((string) $evaluationId);
            }

            $evaluationOptions[] = [
                'value' => $evaluationId,
                'label' => $title,
            ];

            $decodedEvaluatees = $this->decodeUserList($row['evaluatees_json'] ?? null, $userLabelMap);
            $evaluatees = [];
            foreach ($decodedEvaluatees as $decodedEvaluatee) {
                if (!is_array($decodedEvaluatee)) {
                    continue;
                }
                $userId = (int) ($decodedEvaluatee['id'] ?? 0);
                if ($userId <= 0) {
                    continue;
                }

                $userDetails = $userRecords[$userId] ?? [];
                $label = isset($decodedEvaluatee['label']) ? trim((string) $decodedEvaluatee['label']) : '';
                $displayName = $buildDisplayName($userDetails, $label, $userId);

                $evaluatees[] = [
                    'id' => $userId,
                    'label' => $displayName,
                    'display_name' => $displayName,
                    'user' => $userDetails,
                ];
            }

            $dateMeta = $this->formatEvaluationPersianDate($row['evaluation_date'] ?? null);

            $evaluationsIndexed[$evaluationId] = [
                'id' => $evaluationId,
                'title' => $title,
                'evaluation_date' => $row['evaluation_date'] ?? null,
                'date_display' => $dateMeta['display'] ?? '—',
                'date_meta' => $dateMeta,
                'evaluatees' => $evaluatees,
            ];

            if ($selectedEvaluation === null && $requestedEvaluationId > 0 && $requestedEvaluationId === $evaluationId) {
                $selectedEvaluation = $evaluationsIndexed[$evaluationId];
            }
        }

        $evaluationCount = count($evaluationsIndexed);
        $result['evaluation_count'] = $evaluationCount;
        $result['evaluation_options'] = $evaluationOptions;

        if ($selectedEvaluation === null && $requestedEvaluationId > 0 && !isset($evaluationsIndexed[$requestedEvaluationId])) {
            $requestedEvaluationId = 0;
        }

        if ($selectedEvaluation === null && $requestedEvaluationId > 0 && isset($evaluationsIndexed[$requestedEvaluationId])) {
            $selectedEvaluation = $evaluationsIndexed[$requestedEvaluationId];
        }

        if ($selectedEvaluation !== null) {
            $selectedEvaluationId = (int) $selectedEvaluation['id'];
            $evaluateeOptions = [];
            $evaluateeIndex = [];

            foreach ($selectedEvaluation['evaluatees'] as $evaluatee) {
                if (!is_array($evaluatee)) {
                    continue;
                }
                $uid = (int) ($evaluatee['id'] ?? 0);
                if ($uid <= 0) {
                    continue;
                }
                $label = isset($evaluatee['display_name']) ? (string) $evaluatee['display_name'] : ((string) ($evaluatee['label'] ?? ''));
                if ($label === '') {
                    $label = 'ارزیاب‌شونده #' . UtilityHelper::englishToPersian((string) $uid);
                }

                $evaluateeOptions[] = [
                    'value' => $uid,
                    'label' => $label,
                ];
                $evaluateeIndex[$uid] = $evaluatee;
            }

            if ($requestedEvaluateeId > 0 && isset($evaluateeIndex[$requestedEvaluateeId])) {
                $selectedEvaluatee = $evaluateeIndex[$requestedEvaluateeId];
            }

            $result['selected_evaluation'] = $selectedEvaluation;
            $result['selected_evaluation_id'] = $selectedEvaluationId;
            $result['evaluatee_options'] = $evaluateeOptions;
        }

        if ($selectedEvaluatee !== null) {
            $result['selected_evaluatee'] = $selectedEvaluatee;
            $result['selected_evaluatee_id'] = (int) ($selectedEvaluatee['id'] ?? 0);
        }

        return $result;
    }

    private function getCertificatePreviewEvaluateeAssessmentTools(int $organizationId, int $evaluationId, int $evaluateeId): array
    {
        if ($organizationId <= 0 || $evaluationId <= 0 || $evaluateeId <= 0) {
            return [];
        }

        $this->ensureOrganizationEvaluationExamParticipationsTableExists();

        try {
            $rows = DatabaseHelper::fetchAll(
                'SELECT
                    p.tool_id,
                    p.tool_code,
                    p.tool_name,
                    p.question_type AS participation_question_type,
                    p.is_disc,
                    p.is_optional AS participation_optional,
                    p.total_questions,
                    p.answered_questions,
                    p.is_completed,
                    p.completed_at,
                    p.created_at,
                    t.name AS tool_title,
                    t.code AS tool_code_db,
                    t.question_type AS tool_question_type,
                    t.calculation_formula,
                    t.description AS tool_description,
                    t.guide AS tool_guide,
                    t.duration_minutes,
                    t.is_optional AS tool_optional,
                    t.is_exam,
                    t.updated_at AS tool_updated_at
                 FROM organization_evaluation_exam_participations p
                 LEFT JOIN organization_evaluation_tools t
                   ON t.organization_id = p.organization_id AND t.id = p.tool_id
                 WHERE p.organization_id = :organization_id
                   AND p.evaluation_id = :evaluation_id
                   AND p.evaluatee_id = :evaluatee_id
                 ORDER BY (p.completed_at IS NULL) ASC,
                          p.completed_at DESC,
                          COALESCE(t.name, p.tool_name, "") ASC',
                [
                    'organization_id' => $organizationId,
                    'evaluation_id' => $evaluationId,
                    'evaluatee_id' => $evaluateeId,
                ]
            ) ?: [];
        } catch (Exception $exception) {
            return [];
        }

        if (empty($rows)) {
            return [];
        }

        $scoreMap = [];
        try {
            $scoreRows = DatabaseHelper::fetchAll(
                'SELECT tool_id, AVG(score_value) AS avg_score
                 FROM organization_evaluation_tool_scores
                 WHERE organization_id = :organization_id
                   AND evaluation_id = :evaluation_id
                   AND evaluatee_id = :evaluatee_id
                 GROUP BY tool_id',
                [
                    'organization_id' => $organizationId,
                    'evaluation_id' => $evaluationId,
                    'evaluatee_id' => $evaluateeId,
                ]
            ) ?: [];

            foreach ($scoreRows as $scoreRow) {
                $toolId = (int) ($scoreRow['tool_id'] ?? 0);
                $avgScore = isset($scoreRow['avg_score']) ? (float) $scoreRow['avg_score'] : null;
                if ($toolId > 0 && $avgScore !== null) {
                    $scoreMap[$toolId] = $avgScore;
                }
            }
        } catch (Exception $exception) {
            // Ignore score aggregation failures; cards will simply omit score data.
        }

        $formatNumber = static function ($value): string {
            $normalized = rtrim(rtrim(number_format((float) $value, 2, '.', ''), '0'), '.');
            if ($normalized === '') {
                $normalized = '0';
            }
            return UtilityHelper::englishToPersian($normalized);
        };

        $mapQuestionType = static function (?string $questionType, ?string $formula, bool $isExam): array {
            $type = is_string($questionType) ? strtolower(trim($questionType)) : '';
            $formula = is_string($formula) ? strtolower(trim($formula)) : '';

            if (strpos($formula, 'mbti') !== false || strpos($type, 'mbti') !== false) {
                return ['label' => 'MBTI', 'icon' => 'sparkles-outline'];
            }
            if (strpos($formula, 'disc') !== false || strpos($type, 'disc') !== false) {
                return ['label' => 'DISC', 'icon' => 'analytics-outline'];
            }
            if (strpos($formula, 'wash') !== false || strpos($type, 'wash') !== false) {
                return ['label' => 'Wash-Up', 'icon' => 'color-palette-outline'];
            }
            if (strpos($formula, 'analytical') !== false || strpos($type, 'analytical') !== false) {
                return ['label' => 'تفکر تحلیلی', 'icon' => 'speedometer-outline'];
            }
            if (strpos($type, '360') !== false || strpos($type, '۳۶۰') !== false) {
                return ['label' => 'ارزیابی ۳۶۰ درجه', 'icon' => 'people-circle-outline'];
            }

            return [
                'label' => $isExam ? 'آزمون' : 'ابزار ارزیابی',
                'icon' => $isExam ? 'clipboard-outline' : 'document-text-outline',
            ];
        };

        $results = [];
        foreach ($rows as $row) {
            $toolId = (int) ($row['tool_id'] ?? 0);
            $toolCode = trim((string) ($row['tool_code'] ?? ($row['tool_code_db'] ?? '')));
            $nameCandidates = [
                $row['tool_title'] ?? null,
                $row['tool_name'] ?? null,
            ];

            $name = '';
            foreach ($nameCandidates as $candidate) {
                if (is_string($candidate) && trim($candidate) !== '') {
                    $name = trim((string) $candidate);
                    break;
                }
            }
            if ($name === '') {
                $name = $toolId > 0
                    ? 'ابزار #' . UtilityHelper::englishToPersian((string) $toolId)
                    : 'ابزار ارزیابی';
            }

            $isoCompletedAt = trim((string) ($row['completed_at'] ?? ''));
            $completedAtLabel = '';
            if ($isoCompletedAt !== '') {
                try {
                    $date = new DateTime($isoCompletedAt, new DateTimeZone('Asia/Tehran'));
                    $completedAtLabel = UtilityHelper::englishToPersian($date->format('Y/m/d H:i'));
                    $isoCompletedAt = $date->format(DateTime::ATOM);
                } catch (Exception $exception) {
                    $completedAtLabel = UtilityHelper::englishToPersian(date('Y/m/d H:i', strtotime($isoCompletedAt)));
                }
            } else {
                $isoCompletedAt = null;
            }

            $answered = max(0, (int) ($row['answered_questions'] ?? 0));
            $total = max(0, (int) ($row['total_questions'] ?? 0));
            $progressLabel = '';
            $progressPercent = null;
            if ($total > 0) {
                $progressLabel = UtilityHelper::englishToPersian((string) $answered)
                    . ' از '
                    . UtilityHelper::englishToPersian((string) $total)
                    . ' پرسش';
                $progressPercent = (int) round(($answered * 100) / max(1, $total));
            } elseif ($answered > 0) {
                $progressLabel = UtilityHelper::englishToPersian((string) $answered) . ' پاسخ ثبت شده';
            }

            $isCompleted = (int) ($row['is_completed'] ?? 0) === 1;
            $statusLabel = $isCompleted ? 'تکمیل شده' : 'در انتظار تکمیل';
            $statusCode = $isCompleted ? 'completed' : 'pending';

            $scoreLabel = '';
            if ($toolId > 0 && isset($scoreMap[$toolId])) {
                $scoreLabel = $formatNumber($scoreMap[$toolId]) . ' امتیاز';
            }

            $durationMinutes = (int) ($row['duration_minutes'] ?? 0);
            $estimatedTime = '';
            if ($durationMinutes > 0) {
                $estimatedTime = UtilityHelper::englishToPersian((string) $durationMinutes) . ' دقیقه';
            }

            $toolOptional = (int) ($row['tool_optional'] ?? 0) === 1;
            $participationOptional = (int) ($row['participation_optional'] ?? 0) === 1;
            $isOptional = $toolOptional || $participationOptional;
            $difficulty = $isOptional ? 'اختیاری' : 'اجباری';
            $description = '';
            if (isset($row['tool_description']) && is_string($row['tool_description'])) {
                $description = trim((string) $row['tool_description']);
            }
            if ($description === '' && isset($row['tool_guide']) && is_string($row['tool_guide'])) {
                $description = trim((string) $row['tool_guide']);
            }

            $isExam = (int) ($row['is_exam'] ?? 0) === 1;
            $typeMeta = $mapQuestionType(
                $row['tool_question_type'] ?? $row['participation_question_type'] ?? null,
                $row['calculation_formula'] ?? null,
                $isExam
            );

            $identifier = $toolId > 0
                ? (string) $toolId
                : ($toolCode !== '' ? $toolCode : md5($name . ($row['created_at'] ?? '')));

            $results[] = [
                'id' => $identifier,
                'tool_id' => $toolId,
                'name' => $name,
                'category' => $typeMeta['label'] ?? 'ابزار ارزیابی',
                'description' => $description,
                'estimatedTime' => $estimatedTime,
                'difficulty' => $difficulty,
                'icon' => $typeMeta['icon'] ?? 'document-text-outline',
                'status_label' => $statusLabel,
                'status_code' => $statusCode,
                'progress_label' => $progressLabel,
                'progress_percent' => $progressPercent,
                'score_label' => $scoreLabel,
                'completed_at_label' => $completedAtLabel,
                'completed_at_iso' => $isoCompletedAt,
            ];
        }

        return $results;
    }

    private function getCertificatePreviewDiscDataset(int $organizationId, array $sampleData): array
    {
        if ($organizationId <= 0) {
            return [];
        }

        $context = $this->resolveCertificatePreviewSubjectIds();
        $evaluationId = (int) ($context['evaluation_id'] ?? 0);
        $evaluateeId = (int) ($context['evaluatee_id'] ?? 0);

        if ($evaluationId <= 0 || $evaluateeId <= 0) {
            return [];
        }

        try {
            $rows = DatabaseHelper::fetchAll(
                'SELECT a.disc_best_answer_code, a.disc_least_answer_code
                 FROM organization_evaluation_exam_answers a
                 INNER JOIN organization_evaluation_tools t ON t.id = a.tool_id
                 WHERE a.organization_id = :organization_id
                   AND a.evaluation_id = :evaluation_id
                   AND a.evaluatee_id = :evaluatee_id
                   AND (
                        LOWER(t.calculation_formula) LIKE "%disc%"
                        OR LOWER(t.question_type) LIKE "%disc%"
                   )',
                [
                    'organization_id' => $organizationId,
                    'evaluation_id' => $evaluationId,
                    'evaluatee_id' => $evaluateeId,
                ]
            ) ?: [];
        } catch (Exception $exception) {
            $rows = [];
        }

        if (empty($rows)) {
            return [];
        }

        $bestCounts = ['D' => 0, 'I' => 0, 'S' => 0, 'C' => 0];
        $leastCounts = ['D' => 0, 'I' => 0, 'S' => 0, 'C' => 0];

        foreach ($rows as $row) {
            $bestCode = $this->normalizeDiscTypeCode((string) ($row['disc_best_answer_code'] ?? ''));
            if (preg_match('/^[DISC]$/', $bestCode)) {
                $bestCounts[$bestCode]++;
            }

            $leastCode = $this->normalizeDiscTypeCode((string) ($row['disc_least_answer_code'] ?? ''));
            if (preg_match('/^[DISC]$/', $leastCode)) {
                $leastCounts[$leastCode]++;
            }
        }

        $bestTotal = (int) array_sum($bestCounts);
        if ($bestTotal <= 0) {
            return [];
        }

        $percentScores = [];
        $intensityScores = [];
        foreach (['D', 'I', 'S', 'C'] as $letter) {
            $bestValue = (int) ($bestCounts[$letter] ?? 0);
            $percentScores[$letter] = round(($bestValue * 100) / max(1, $bestTotal), 2);
            $intensityScores[$letter] = max(0, min(100, (float) ($bestValue * 2)));
        }

        $orderPref = ['D', 'I', 'S', 'C'];
        $sorted = $bestCounts;
        uksort($sorted, static function (string $a, string $b) use ($sorted, $orderPref): int {
            $diff = $sorted[$b] <=> $sorted[$a];
            if ($diff !== 0) {
                return $diff;
            }
            return array_search($a, $orderPref, true) <=> array_search($b, $orderPref, true);
        });
        $codes = array_keys($sorted);
        $primaryCode = $codes[0] ?? '';
        $secondaryLetter = $codes[1] ?? '';
        $secondaryCombo = '';
        if ($primaryCode !== '' && $secondaryLetter !== '' && ($sorted[$secondaryLetter] ?? 0) > 0) {
            $secondaryCombo = $primaryCode . '/' . $secondaryLetter;
        }

        $this->ensureOrganizationDiscPersonalityTypesTableExists();

        $primaryLabel = $primaryCode !== '' ? $this->getDiscTypeLabel($primaryCode) : '';
        $secondaryLabel = $secondaryCombo !== '' ? $this->getDiscTypeLabel($secondaryCombo) : '';

        $primaryMeta = null;
        if ($primaryCode !== '') {
            try {
                $primaryMeta = DatabaseHelper::fetchOne(
                    'SELECT * FROM organization_disc_personality_types
                     WHERE organization_id = :organization_id AND scope = :scope AND disc_type_code = :code
                     LIMIT 1',
                    [
                        'organization_id' => $organizationId,
                        'scope' => 'primary',
                        'code' => $primaryCode,
                    ]
                );
            } catch (Exception $exception) {
                $primaryMeta = null;
            }
        }

        $secondaryMeta = null;
        if ($secondaryCombo !== '') {
            try {
                $secondaryMeta = DatabaseHelper::fetchOne(
                    'SELECT * FROM organization_disc_personality_types
                     WHERE organization_id = :organization_id AND scope = :scope AND disc_type_code = :code
                     LIMIT 1',
                    [
                        'organization_id' => $organizationId,
                        'scope' => 'secondary',
                        'code' => $secondaryCombo,
                    ]
                );
            } catch (Exception $exception) {
                $secondaryMeta = null;
            }
        }

        $summary = '';
        if ($primaryMeta && isset($primaryMeta['short_description'])) {
            $summary = trim((string) $primaryMeta['short_description']);
        }
        if ($summary === '' && isset($sampleData['disc_profile']['summary'])) {
            $summary = (string) $sampleData['disc_profile']['summary'];
        }

        $extractHighlights = static function ($value): array {
            if (!is_string($value)) {
                return [];
            }
            $normalized = preg_replace("/[\r\n]+/u", "\n", $value);
            $parts = array_map('trim', explode("\n", (string) $normalized));
            $filtered = [];
            foreach ($parts as $part) {
                if ($part !== '') {
                    $filtered[] = $part;
                }
            }
            return $filtered;
        };

        $highlights = [];
        if ($primaryMeta) {
            foreach (['general_tendencies', 'work_preferences', 'effectiveness_requirements', 'companion_requirements'] as $field) {
                if (!isset($primaryMeta[$field])) {
                    continue;
                }
                $highlights = array_merge($highlights, $extractHighlights($primaryMeta[$field]));
            }
        }
        if (empty($highlights) && isset($sampleData['disc_profile']['highlights']) && is_array($sampleData['disc_profile']['highlights'])) {
            $highlights = $sampleData['disc_profile']['highlights'];
        }
        $highlights = array_values(array_unique(array_map('trim', array_filter($highlights, static function ($item) {
            return is_string($item) && trim($item) !== '';
        }))));
        if (count($highlights) > 6) {
            $highlights = array_slice($highlights, 0, 6);
        }

        $sampleDiscTriple = [];
        if (isset($sampleData['disc_profile']['triple_graphs']) && is_array($sampleData['disc_profile']['triple_graphs'])) {
            $sampleDiscTriple = $sampleData['disc_profile']['triple_graphs'];
        }

        $dataset = [
            'has_disc' => true,
            'D' => $intensityScores['D'],
            'I' => $intensityScores['I'],
            'S' => $intensityScores['S'],
            'C' => $intensityScores['C'],
            'primary_code' => $primaryCode,
            'primary_label' => $primaryLabel,
            'secondary_code' => $secondaryCombo,
            'secondary_label' => $secondaryLabel,
            'summary' => $summary,
            'highlights' => $highlights,
            'best_total' => $bestTotal,
            'least_total' => (int) array_sum($leastCounts),
        ];

        $dataset['intensity_scores'] = $intensityScores;
        $dataset['percent_scores'] = $percentScores;

        if (!empty($bestCounts)) {
            $dataset['best_counts'] = $bestCounts;
        }
        if (!empty($leastCounts)) {
            $dataset['least_counts'] = $leastCounts;
        }
        if ($primaryMeta) {
            $dataset['primary_meta'] = $primaryMeta;
        }
        if ($secondaryMeta) {
            $dataset['secondary_meta'] = $secondaryMeta;
        }

    $tripleGraphs = $this->buildDiscTripleGraphsDataset($percentScores, $bestCounts, $leastCounts, $sampleDiscTriple);
        if (!empty($tripleGraphs)) {
            $dataset['triple_graphs'] = $tripleGraphs;
        }

        return $dataset;
    }

    private function buildDiscTripleGraphsDataset(array $percentScores, array $bestCounts, array $leastCounts, array $sampleTriple): array
    {
        $letters = ['D', 'I', 'S', 'C'];

        $graphs = [];
        $sampleGraphs = isset($sampleTriple['graphs']) && is_array($sampleTriple['graphs'])
            ? $sampleTriple['graphs']
            : [];

        $bestTotal = array_sum($bestCounts);
        $leastTotal = array_sum($leastCounts);

        $graphTemplates = [
            [
                'title' => 'Graph I',
                'subtitle' => 'سبک رفتاری تطبیق‌یافته',
                'source' => 'percent',
            ],
            [
                'title' => 'Graph II',
                'subtitle' => 'سبک رفتاری طبیعی',
                'source' => 'best',
            ],
            [
                'title' => 'Graph III',
                'subtitle' => 'سبک رفتاری اجتماعی',
                'source' => 'least',
            ],
        ];

        foreach ($graphTemplates as $index => $template) {
            $sampleGraph = $sampleGraphs[$index] ?? [];
            $points = [];

            switch ($template['source']) {
                case 'percent':
                    foreach ($letters as $letter) {
                        $points[$letter] = round((float) ($percentScores[$letter] ?? 0), 2);
                    }
                    break;
                case 'best':
                    if ($bestTotal > 0) {
                        foreach ($letters as $letter) {
                            $points[$letter] = round((($bestCounts[$letter] ?? 0) * 100) / $bestTotal, 2);
                        }
                    }
                    break;
                case 'least':
                    if ($leastTotal > 0) {
                        foreach ($letters as $letter) {
                            $points[$letter] = round((($leastCounts[$letter] ?? 0) * 100) / $leastTotal, 2);
                        }
                    }
                    break;
            }

            if (empty($points)) {
                $points = isset($sampleGraph['points']) && is_array($sampleGraph['points'])
                    ? array_intersect_key($sampleGraph['points'], array_flip($letters))
                    : [];
            }

            if (empty($points)) {
                continue;
            }

            $graph = [
                'title' => $sampleGraph['title'] ?? $template['title'],
                'subtitle' => $sampleGraph['subtitle'] ?? $template['subtitle'],
                'points' => $points,
            ];

            if (isset($sampleGraph['summary'])) {
                $graph['summary'] = (string) $sampleGraph['summary'];
            }
            if (isset($sampleGraph['notes']) && is_array($sampleGraph['notes'])) {
                $graph['notes'] = $sampleGraph['notes'];
            }

            $graphs[] = $graph;
        }

        $descriptions = [];
        if (isset($sampleTriple['descriptions']) && is_array($sampleTriple['descriptions'])) {
            foreach ($sampleTriple['descriptions'] as $description) {
                if (is_string($description) && trim($description) !== '') {
                    $descriptions[] = trim($description);
                }
            }
        }

        if (empty($graphs)) {
            return [];
        }

        $result = ['graphs' => $graphs];
        if (!empty($descriptions)) {
            $result['descriptions'] = $descriptions;
        }

        return $result;
    }

    private function getCertificatePreviewAnalyticalDataset(int $organizationId, array $sampleData): array
    {
        if ($organizationId <= 0) {
            return [];
        }

        $context = $this->resolveCertificatePreviewSubjectIds();
        $evaluationId = (int) ($context['evaluation_id'] ?? 0);
        $evaluateeId = (int) ($context['evaluatee_id'] ?? 0);

        if ($evaluationId <= 0 || $evaluateeId <= 0) {
            return [];
        }

        try {
            $rows = DatabaseHelper::fetchAll(
                'SELECT a.answer_id, a.answer_code, ans.is_correct
                 FROM organization_evaluation_exam_answers a
                 INNER JOIN organization_evaluation_tools t ON t.id = a.tool_id
                 LEFT JOIN organization_evaluation_tool_answers ans
                   ON ans.id = a.answer_id AND ans.evaluation_tool_id = a.tool_id AND ans.question_id = a.question_id
                 WHERE a.organization_id = :organization_id
                   AND a.evaluation_id = :evaluation_id
                   AND a.evaluatee_id = :evaluatee_id
                   AND (
                        LOWER(t.calculation_formula) LIKE "%analytical%"
                        OR LOWER(t.question_type) LIKE "%analytical%"
                   )',
                [
                    'organization_id' => $organizationId,
                    'evaluation_id' => $evaluationId,
                    'evaluatee_id' => $evaluateeId,
                ]
            ) ?: [];
        } catch (Exception $exception) {
            $rows = [];
        }

        if (empty($rows)) {
            return [];
        }

        $answered = 0;
        $correct = 0;
        foreach ($rows as $row) {
            $answerId = $row['answer_id'] ?? null;
            $answerCode = $row['answer_code'] ?? null;
            if ($answerId !== null || ($answerCode !== null && trim((string) $answerCode) !== '')) {
                $answered++;
                if ((int) ($row['is_correct'] ?? 0) === 1) {
                    $correct++;
                }
            }
        }

        if ($answered <= 0) {
            return [];
        }

        $incorrect = max(0, $answered - $correct);
        $percent = (int) round(($correct * 100) / max(1, $answered));
        $percent = max(0, min(100, $percent));

        $sampleAnalytical = isset($sampleData['analytical']) && is_array($sampleData['analytical'])
            ? $sampleData['analytical']
            : [];

        $thresholds = isset($sampleAnalytical['thresholds']) && is_array($sampleAnalytical['thresholds'])
            ? $sampleAnalytical['thresholds']
            : [];

        $lowThreshold = (int) ($thresholds['low'] ?? 50);
        $mediumThreshold = (int) ($thresholds['medium'] ?? 60);
        if ($mediumThreshold <= $lowThreshold) {
            $mediumThreshold = $lowThreshold + 10;
        }

        $band = 'low';
        if ($percent >= $mediumThreshold) {
            $band = 'high';
        } elseif ($percent >= $lowThreshold) {
            $band = 'medium';
        }

        $defaultRangeLabels = [
            'low' => 'نیاز به توسعه',
            'medium' => 'در مسیر رشد',
            'high' => 'سطح پیشرفته',
        ];

        $rangeLabels = isset($sampleAnalytical['range_labels']) && is_array($sampleAnalytical['range_labels'])
            ? array_merge($defaultRangeLabels, array_filter($sampleAnalytical['range_labels'], static function ($value) {
                return is_string($value) && trim($value) !== '';
            }))
            : $defaultRangeLabels;

        $analysisTexts = isset($sampleAnalytical['analysis_texts']) && is_array($sampleAnalytical['analysis_texts'])
            ? $sampleAnalytical['analysis_texts']
            : [];

        $analysisText = '';
        if (!empty($analysisTexts[$band])) {
            $analysisText = (string) $analysisTexts[$band];
        } elseif (!empty($sampleAnalytical['analysis_text'])) {
            $analysisText = (string) $sampleAnalytical['analysis_text'];
        }

        $analysisHeadline = isset($sampleAnalytical['analysis_headline']) && is_string($sampleAnalytical['analysis_headline'])
            ? trim($sampleAnalytical['analysis_headline'])
            : 'تفسیر عملکرد تحلیلی';
        if (isset($sampleAnalytical['analysisHeadline']) && is_string($sampleAnalytical['analysisHeadline'])) {
            $analysisHeadline = trim($sampleAnalytical['analysisHeadline']) !== ''
                ? trim($sampleAnalytical['analysisHeadline'])
                : $analysisHeadline;
        }

        $accentColor = isset($sampleAnalytical['accentColor']) && is_string($sampleAnalytical['accentColor'])
            ? trim($sampleAnalytical['accentColor'])
            : '#0ea5e9';

        return [
            'has_analytical' => true,
            'answered' => $answered,
            'correct' => $correct,
            'incorrect' => $incorrect,
            'percent' => $percent,
            'score' => $percent,
            'band' => $band,
            'band_label' => $rangeLabels[$band] ?? $band,
            'analysis_text' => $analysisText,
            'analysis_texts' => $analysisTexts,
            'analysis_headline' => $analysisHeadline,
            'range_labels' => $rangeLabels,
            'thresholds' => [
                'low' => $lowThreshold,
                'medium' => $mediumThreshold,
            ],
            'accentColor' => $accentColor,
        ];
    }

    private function getCertificatePreviewWashupDataset(int $organizationId, array $sampleData): array
    {
        if ($organizationId <= 0) {
            return [];
        }

        $context = $this->resolveCertificatePreviewSubjectIds();
        $evaluationId = (int) ($context['evaluation_id'] ?? 0);
        $evaluateeId = (int) ($context['evaluatee_id'] ?? 0);

        if ($evaluationId <= 0 || $evaluateeId <= 0) {
            return [];
        }

        $this->ensureOrganizationEvaluationAgreedScoresTableExists();
        $this->ensureOrganizationCompetenciesTableExists();
        $this->ensureOrganizationCompetencyDimensionsTableExists();
    $this->ensureOrganizationEvaluationToolAssignmentsTableExists();
        $this->ensureOrganizationEvaluationToolsTableExists();
        $this->ensureOrganizationEvaluationToolCompetenciesTableExists();
    $this->ensureOrganizationEvaluationToolScoresTableExists();
    $this->ensureOrganizationCompetencyExamplesTableExists();
        $this->ensureOrganizationUsersTableExists();
        $this->ensureOrganizationEvaluationFinalRecommendationsTableExists();

        try {
            $rows = DatabaseHelper::fetchAll(
                'SELECT competency_id, agreed_score, updated_at, updated_by
                 FROM organization_evaluation_agreed_scores
                 WHERE organization_id = :organization_id
                   AND evaluation_id = :evaluation_id
                   AND evaluatee_id = :evaluatee_id
                   AND agreed_score IS NOT NULL',
                [
                    'organization_id' => $organizationId,
                    'evaluation_id' => $evaluationId,
                    'evaluatee_id' => $evaluateeId,
                ]
            ) ?: [];
        } catch (Exception $exception) {
            $rows = [];
        }

        if (empty($rows)) {
            return [];
        }

        $competencyIds = [];
        $updatedByCandidates = [];
        foreach ($rows as $row) {
            $competencyId = (int) ($row['competency_id'] ?? 0);
            if ($competencyId <= 0) {
                continue;
            }
            $competencyIds[$competencyId] = true;

            $updatedByRaw = trim((string) ($row['updated_by'] ?? ''));
            if ($updatedByRaw !== '' && preg_match('/^\d+$/', $updatedByRaw)) {
                $updatedByCandidates[(int) $updatedByRaw] = true;
            }
        }

        if (empty($competencyIds)) {
            return [];
        }

        $competencyParams = ['organization_id' => $organizationId];
        $competencyPlaceholders = [];
        $index = 0;
        foreach (array_keys($competencyIds) as $competencyId) {
            $placeholder = ':comp_' . $index++;
            $competencyPlaceholders[] = $placeholder;
            $competencyParams[$placeholder] = $competencyId;
        }

        $competencyMap = [];
        try {
            $competencySql = sprintf(
                'SELECT oc.id, oc.code, oc.title, ocd.name AS dimension_name
                 FROM organization_competencies oc
                 LEFT JOIN organization_competency_dimensions ocd
                   ON ocd.id = oc.competency_dimension_id AND ocd.organization_id = oc.organization_id
                 WHERE oc.organization_id = :organization_id
                   AND oc.id IN (%s)',
                     implode(', ', $competencyPlaceholders)
            );

            $competencyRows = DatabaseHelper::fetchAll($competencySql, $competencyParams) ?: [];
        } catch (Exception $exception) {
            $competencyRows = [];
        }

        foreach ($competencyRows as $competencyRow) {
            $compId = (int) ($competencyRow['id'] ?? 0);
            if ($compId <= 0) {
                continue;
            }

            $competencyMap[$compId] = [
                'id' => $compId,
                'code' => trim((string) ($competencyRow['code'] ?? '')),
                'title' => trim((string) ($competencyRow['title'] ?? '')),
                'dimension' => trim((string) ($competencyRow['dimension_name'] ?? '')),
            ];
        }

        $assignmentToolIds = [];
        try {
            $assignmentRows = DatabaseHelper::fetchAll(
                'SELECT tool_id
                 FROM organization_evaluation_tool_assignments
                 WHERE evaluation_id = :evaluation_id
                 ORDER BY sort_order ASC, id ASC',
                ['evaluation_id' => $evaluationId]
            ) ?: [];
        } catch (Exception $exception) {
            $assignmentRows = [];
        }

        foreach ($assignmentRows as $assignmentRow) {
            $toolId = (int) ($assignmentRow['tool_id'] ?? 0);
            if ($toolId > 0) {
                $assignmentToolIds[$toolId] = true;
            }
        }

    $toolNames = [];
        if (!empty($assignmentToolIds)) {
            $toolParams = ['organization_id' => $organizationId];
            $toolPlaceholders = [];
            $toolIndex = 0;
            foreach (array_keys($assignmentToolIds) as $toolId) {
                $placeholder = ':tool_' . $toolIndex++;
                $toolPlaceholders[] = $placeholder;
                $toolParams[$placeholder] = $toolId;
            }

            try {
                $toolSql = sprintf(
                    'SELECT id, name
                     FROM organization_evaluation_tools
                     WHERE organization_id = :organization_id
                       AND id IN (%s)',
                                        implode(', ', $toolPlaceholders)
                );

                $toolRows = DatabaseHelper::fetchAll($toolSql, $toolParams) ?: [];
            } catch (Exception $exception) {
                $toolRows = [];
            }

            foreach ($toolRows as $toolRow) {
                $toolId = (int) ($toolRow['id'] ?? 0);
                if ($toolId <= 0) {
                    continue;
                }
                $toolNames[$toolId] = trim((string) ($toolRow['name'] ?? ''));
            }
        }

        $toolsByCompetency = [];
        if (!empty($assignmentToolIds)) {
            $toolCompParams = ['organization_id' => $organizationId];
            $toolCompPlaceholders = [];
            $paramIndex = 0;
            foreach (array_keys($assignmentToolIds) as $toolId) {
                $placeholder = ':assign_' . $paramIndex++;
                $toolCompPlaceholders[] = $placeholder;
                $toolCompParams[$placeholder] = $toolId;
            }

            $competencyParamsInline = ['organization_id' => $organizationId];
            $competencyPlaceholdersInline = [];
            $inlineIndex = 0;
            foreach (array_keys($competencyIds) as $compId) {
                $placeholder = ':competency_' . $inlineIndex++;
                $competencyPlaceholdersInline[] = $placeholder;
                $competencyParamsInline[$placeholder] = $compId;
            }

            $joinedParams = array_merge($toolCompParams, $competencyParamsInline);

            try {
                $toolCompSql = sprintf(
                    'SELECT evaluation_tool_id, competency_id
                     FROM organization_evaluation_tool_competencies
                     WHERE organization_id = :organization_id
                       AND evaluation_tool_id IN (%s)
                       AND competency_id IN (%s)',
                                        implode(', ', $toolCompPlaceholders),
                                        implode(', ', $competencyPlaceholdersInline)
                );

                $toolCompRows = DatabaseHelper::fetchAll($toolCompSql, $joinedParams) ?: [];
            } catch (Exception $exception) {
                $toolCompRows = [];
            }

            foreach ($toolCompRows as $toolCompRow) {
                $toolId = (int) ($toolCompRow['evaluation_tool_id'] ?? 0);
                $compId = (int) ($toolCompRow['competency_id'] ?? 0);
                if ($toolId <= 0 || $compId <= 0 || !isset($toolNames[$toolId])) {
                    continue;
                }

                if (!isset($toolsByCompetency[$compId])) {
                    $toolsByCompetency[$compId] = [];
                }

                $toolsByCompetency[$compId][$toolId] = $toolNames[$toolId];
            }
        }

        $updatedByMap = [];
        if (!empty($updatedByCandidates)) {
            $userParams = ['organization_id' => $organizationId];
            $userPlaceholders = [];
            $userIndex = 0;
            foreach (array_keys($updatedByCandidates) as $userId) {
                $placeholder = ':user_' . $userIndex++;
                $userPlaceholders[] = $placeholder;
                $userParams[$placeholder] = $userId;
            }

            try {
                $userSql = sprintf(
                    'SELECT id, first_name, last_name, display_name
                     FROM organization_users
                     WHERE organization_id = :organization_id
                       AND id IN (%s)',
                                        implode(', ', $userPlaceholders)
                );

                $userRows = DatabaseHelper::fetchAll($userSql, $userParams) ?: [];
            } catch (Exception $exception) {
                $userRows = [];
            }

            foreach ($userRows as $userRow) {
                $userId = (int) ($userRow['id'] ?? 0);
                if ($userId <= 0) {
                    continue;
                }

                $displayName = trim((string) ($userRow['display_name'] ?? ''));
                if ($displayName === '') {
                    $first = trim((string) ($userRow['first_name'] ?? ''));
                    $last = trim((string) ($userRow['last_name'] ?? ''));
                    $displayName = trim($first . ' ' . $last);
                }

                if ($displayName === '') {
                    $displayName = 'کاربر ' . UtilityHelper::englishToPersian((string) $userId);
                }

                $updatedByMap[$userId] = $displayName;
            }
        }

        $sampleWashup = isset($sampleData['washup_agreed']) && is_array($sampleData['washup_agreed'])
            ? $sampleData['washup_agreed']
            : [];

        $accentColor = isset($sampleWashup['accentColor']) && is_string($sampleWashup['accentColor'])
            ? trim($sampleWashup['accentColor'])
            : '#2563eb';
        $headline = isset($sampleWashup['headline']) ? (string) $sampleWashup['headline'] : '';
        $summary = isset($sampleWashup['summary']) ? (string) $sampleWashup['summary'] : '';
        $footerNote = isset($sampleWashup['footer_note']) ? (string) $sampleWashup['footer_note'] : '';
        $emptyMessage = isset($sampleWashup['empty_message']) ? (string) $sampleWashup['empty_message'] : 'برای این ارزیابی هنوز امتیاز توافقی ثبت نشده است.';

    $items = [];
        foreach ($rows as $row) {
            $competencyId = (int) ($row['competency_id'] ?? 0);
            if ($competencyId <= 0 || !isset($competencyMap[$competencyId])) {
                continue;
            }

            $score = isset($row['agreed_score']) ? (float) $row['agreed_score'] : null;
            if ($score === null) {
                continue;
            }

            $tools = isset($toolsByCompetency[$competencyId]) && is_array($toolsByCompetency[$competencyId])
                ? array_values(array_unique(array_filter($toolsByCompetency[$competencyId], static function ($value) {
                    return is_string($value) && trim($value) !== '';
                })))
                : [];

            $updatedByRaw = trim((string) ($row['updated_by'] ?? ''));
            $updatedByDisplay = $updatedByRaw;
            if ($updatedByRaw !== '' && preg_match('/^\d+$/', $updatedByRaw)) {
                $updatedByDisplay = $updatedByMap[(int) $updatedByRaw] ?? ('کاربر ' . UtilityHelper::englishToPersian($updatedByRaw));
            }

            $updatedAt = trim((string) ($row['updated_at'] ?? ''));
            $updatedAtIso = $updatedAt !== '' ? $updatedAt : null;
            $updatedAtDisplay = '';
            if ($updatedAt !== '') {
                try {
                    $date = new DateTime($updatedAt, new DateTimeZone('Asia/Tehran'));
                    $updatedAtDisplay = UtilityHelper::englishToPersian($date->format('Y/m/d'));
                    $updatedAtIso = $date->format(DateTime::ATOM);
                } catch (Exception $exception) {
                    $updatedAtDisplay = UtilityHelper::englishToPersian(date('Y/m/d', strtotime($updatedAt)));
                }
            }

            $scoreFormatted = rtrim(rtrim(number_format($score, 2, '.', ''), '0'), '.');
            if ($scoreFormatted === '') {
                $scoreFormatted = '0';
            }

            $items[] = [
                'competency_id' => $competencyId,
                'competency_title' => $competencyMap[$competencyId]['title'] ?? '',
                'competency_code' => $competencyMap[$competencyId]['code'] ?? '',
                'dimension' => $competencyMap[$competencyId]['dimension'] ?? '',
                'agreed_score' => $score,
                'score_label' => UtilityHelper::englishToPersian($scoreFormatted),
                'tools' => $tools,
                'tool_count' => count($tools),
                'updated_by' => $updatedByDisplay,
                'updated_at_display' => $updatedAtDisplay,
                'updated_at_iso' => $updatedAtIso,
            ];
        }

        if (empty($items)) {
            return [];
        }

        usort($items, static function (array $a, array $b): int {
            $scoreA = (float) ($a['agreed_score'] ?? 0.0);
            $scoreB = (float) ($b['agreed_score'] ?? 0.0);
            $diff = $scoreB <=> $scoreA;
            if ($diff !== 0) {
                return $diff;
            }
            $titleA = trim((string) ($a['competency_title'] ?? ''));
            $titleB = trim((string) ($b['competency_title'] ?? ''));
            return strcmp($titleA, $titleB);
        });

        $toolSummary = [];
        foreach ($toolsByCompetency as $compTools) {
            foreach ($compTools as $toolName) {
                if (!is_string($toolName) || trim($toolName) === '') {
                    continue;
                }
                $toolSummary[$toolName] = true;
            }
        }

        // Build example-level notes grouped by tool
        $examplesByTool = [];
        if (!empty($assignmentToolIds)) {
            try {
                $scoreRows = DatabaseHelper::fetchAll(
                    'SELECT s.tool_id, s.competency_id, s.example_id, s.score_note, s.scorer_id
                     FROM organization_evaluation_tool_scores s
                     WHERE s.organization_id = :organization_id
                       AND s.evaluation_id = :evaluation_id
                       AND s.evaluatee_id = :evaluatee_id
                       AND s.score_note IS NOT NULL
                       AND TRIM(s.score_note) <> ""',
                    [
                        'organization_id' => $organizationId,
                        'evaluation_id' => $evaluationId,
                        'evaluatee_id' => $evaluateeId,
                    ]
                ) ?: [];
            } catch (Exception $exception) {
                $scoreRows = [];
            }

            $exampleIds = [];
            $scorerIds = [];
            foreach ($scoreRows as $sr) {
                $eid = isset($sr['example_id']) ? (int) $sr['example_id'] : 0;
                if ($eid > 0) { $exampleIds[$eid] = true; }
                $scid = isset($sr['scorer_id']) ? (int) $sr['scorer_id'] : 0;
                if ($scid > 0) { $scorerIds[$scid] = true; }
            }

            $exampleTextMap = [];
            if (!empty($exampleIds)) {
                $exParams = ['organization_id' => $organizationId];
                $ph = [];
                $idx = 0;
                foreach (array_keys($exampleIds) as $id) {
                    $p = ':ex_' . $idx++;
                    $ph[] = $p;
                    $exParams[$p] = $id;
                }
                try {
                    $exSql = sprintf(
                        'SELECT id, behavior_example FROM organization_competency_examples WHERE organization_id = :organization_id AND id IN (%s)',
                        implode(', ', $ph)
                    );
                    $exRows = DatabaseHelper::fetchAll($exSql, $exParams) ?: [];
                } catch (Exception $exception) {
                    $exRows = [];
                }
                foreach ($exRows as $er) {
                    $eid = (int) ($er['id'] ?? 0);
                    if ($eid > 0) {
                        $exampleTextMap[$eid] = trim((string) ($er['behavior_example'] ?? ''));
                    }
                }
            }

            $scorerNameMap = [];
            if (!empty($scorerIds)) {
                $uParams = ['organization_id' => $organizationId];
                $uph = [];
                $uix = 0;
                foreach (array_keys($scorerIds) as $uid) {
                    $p = ':uid_' . $uix++;
                    $uph[] = $p;
                    $uParams[$p] = $uid;
                }
                try {
                    $uSql = sprintf(
                        'SELECT id, first_name, last_name, display_name FROM organization_users WHERE organization_id = :organization_id AND id IN (%s)',
                        implode(', ', $uph)
                    );
                    $uRows = DatabaseHelper::fetchAll($uSql, $uParams) ?: [];
                } catch (Exception $exception) {
                    $uRows = [];
                }
                foreach ($uRows as $ur) {
                    $uid = (int) ($ur['id'] ?? 0);
                    if ($uid <= 0) continue;
                    $dn = trim((string) ($ur['display_name'] ?? ''));
                    if ($dn === '') {
                        $fn = trim((string) ($ur['first_name'] ?? ''));
                        $ln = trim((string) ($ur['last_name'] ?? ''));
                        $dn = trim($fn . ' ' . $ln);
                    }
                    if ($dn === '') { $dn = 'کاربر ' . UtilityHelper::englishToPersian((string) $uid); }
                    $scorerNameMap[$uid] = $dn;
                }
            }

            // Map competency id to title for table display
            $compTitleMap = [];
            foreach ($items as $it) {
                $cid = (int) ($it['competency_id'] ?? 0);
                if ($cid > 0) { $compTitleMap[$cid] = (string) ($it['competency_title'] ?? ''); }
            }

            foreach ($scoreRows as $sr) {
                $toolId = (int) ($sr['tool_id'] ?? 0);
                $toolName = $toolNames[$toolId] ?? '';
                if ($toolName === '') { continue; }
                $compId = (int) ($sr['competency_id'] ?? 0);
                $exampleId = (int) ($sr['example_id'] ?? 0);
                $note = trim((string) ($sr['score_note'] ?? ''));
                if ($note === '') { continue; }
                $exampleText = $exampleId > 0 ? ($exampleTextMap[$exampleId] ?? '') : '';
                $evaluatorId = (int) ($sr['scorer_id'] ?? 0);
                $evaluator = $evaluatorId > 0 ? ($scorerNameMap[$evaluatorId] ?? '') : '';
                $competencyTitle = $compTitleMap[$compId] ?? '';

                if (!isset($examplesByTool[$toolName])) { $examplesByTool[$toolName] = []; }
                $examplesByTool[$toolName][] = [
                    'competency_id' => $compId,
                    'competency_title' => $competencyTitle,
                    'example_id' => $exampleId,
                    'example_text' => $exampleText,
                    'note' => $note,
                    'evaluator' => $evaluator,
                ];
            }

            // Sort entries within each tool by competency then example
            foreach ($examplesByTool as $tname => $entries) {
                usort($entries, static function (array $a, array $b): int {
                    $cmp = strcmp(trim((string) ($a['competency_title'] ?? '')), trim((string) ($b['competency_title'] ?? '')));
                    if ($cmp !== 0) return $cmp;
                    $ea = trim((string) ($a['example_text'] ?? ''));
                    $eb = trim((string) ($b['example_text'] ?? ''));
                    return strcmp($ea, $eb);
                });
                $examplesByTool[$tname] = $entries;
            }
        }

        // Fetch final recommendations
        $recommendationText = '';
        $developmentText = '';
        try {
            $finalRec = DatabaseHelper::fetchOne(
                'SELECT recommendation_text, development_text
                 FROM organization_evaluation_final_recommendations
                 WHERE organization_id = :organization_id
                   AND evaluation_id = :evaluation_id
                   AND evaluatee_id = :evaluatee_id
                 LIMIT 1',
                [
                    'organization_id' => $organizationId,
                    'evaluation_id' => $evaluationId,
                    'evaluatee_id' => $evaluateeId,
                ]
            );
            
            if ($finalRec) {
                $recommendationText = trim((string) ($finalRec['recommendation_text'] ?? ''));
                $developmentText = trim((string) ($finalRec['development_text'] ?? ''));
            }
        } catch (Exception $exception) {
            // If table doesn't exist or query fails, keep empty strings
        }

        return [
            'has_washup' => true,
            'headline' => $headline,
            'summary' => $summary,
            'footer_note' => $footerNote,
            'empty_message' => $emptyMessage,
            'accentColor' => $accentColor,
            'items' => $items,
            'items_count' => count($items),
            'tool_names' => array_values(array_keys($toolSummary)),
            'tool_count' => count($toolSummary),
            'examples_by_tool' => $examplesByTool,
            'recommendation_text' => $recommendationText,
            'development_text' => $developmentText,
        ];
    }

    private function buildMbtiDatasetFromAnswers(int $organizationId, int $evaluationId, int $evaluateeId): array
    {
        $mbtiData = [
            'has_mbti' => false,
            'type_code' => '',
            'counts' => [],
            'axes' => [],
            'type_title' => '',
            'type_summary' => '',
            'type_description' => '',
            'cognitive_functions' => '',
            'features' => [],
            'persona_name' => '',
            'summary' => '',
        ];

        if ($organizationId <= 0 || $evaluationId <= 0 || $evaluateeId <= 0) {
            return $mbtiData;
        }

        try {
            $rows = DatabaseHelper::fetchAll(
                'SELECT a.tool_id, a.question_id, a.answer_id
                 FROM organization_evaluation_exam_answers a
                 INNER JOIN organization_evaluation_tools t ON t.id = a.tool_id
                 WHERE a.organization_id = :organization_id
                   AND a.evaluation_id = :evaluation_id
                   AND a.evaluatee_id = :evaluatee_id
                   AND (
                        LOWER(t.calculation_formula) LIKE "%mbti%"
                        OR LOWER(t.question_type) LIKE "%mbti%"
                   )',
                [
                    'organization_id' => $organizationId,
                    'evaluation_id' => $evaluationId,
                    'evaluatee_id' => $evaluateeId,
                ]
            );
        } catch (Exception $exception) {
            $rows = [];
        }

        if (empty($rows)) {
            return $mbtiData;
        }

        $optionsByTool = [];
        $counts = [];

        foreach ($rows as $row) {
            $toolId = (int) ($row['tool_id'] ?? 0);
            $questionId = (int) ($row['question_id'] ?? 0);
            $answerId = (int) ($row['answer_id'] ?? 0);

            if ($toolId <= 0 || $questionId <= 0 || $answerId <= 0) {
                continue;
            }

            if (!isset($optionsByTool[$toolId])) {
                $optionsByTool[$toolId] = $this->loadToolAnswerOptions($organizationId, $toolId);
            }

            $option = $optionsByTool[$toolId][$questionId][$answerId] ?? null;
            if (!$option) {
                continue;
            }

            $score = strtoupper((string) ($option['character_score'] ?? ''));
            if ($score === '') {
                continue;
            }

            $letters = preg_split('//u', $score, -1, PREG_SPLIT_NO_EMPTY);
            foreach ($letters as $letter) {
                if (preg_match('/^[EISNTFJP]$/u', $letter)) {
                    $counts[$letter] = ($counts[$letter] ?? 0) + 1;
                }
            }
        }

        if (empty($counts)) {
            return $mbtiData;
        }

        $typeCode = $this->deriveMbtiTypeFromCounts($counts);
        $axes = [];
        $pairs = [['E', 'I'], ['S', 'N'], ['T', 'F'], ['J', 'P']];
        foreach ($pairs as $pair) {
            [$a, $b] = $pair;
            $countA = (int) ($counts[$a] ?? 0);
            $countB = (int) ($counts[$b] ?? 0);
            $total = max(1, $countA + $countB);
            $axes[$a . $b] = [
                $a => $countA,
                $b => $countB,
                $a . '_pct' => (int) round($countA * 100 / $total),
                $b . '_pct' => (int) round($countB * 100 / $total),
            ];
        }

        $mbtiData['has_mbti'] = $typeCode !== '';
        $mbtiData['type_code'] = $typeCode;
        $mbtiData['counts'] = $counts;
        $mbtiData['axes'] = $axes;

        if ($typeCode === '') {
            return $mbtiData;
        }

        try {
            $typeRow = DatabaseHelper::fetchOne(
                'SELECT *
                 FROM organization_mbti_types
                 WHERE organization_id = :organization_id AND UPPER(type_code) = :type_code
                 LIMIT 1',
                ['organization_id' => $organizationId, 'type_code' => strtoupper($typeCode)]
            );
        } catch (Exception $exception) {
            $typeRow = null;
        }

        if ($typeRow) {
            $mbtiData = $this->enrichMbtiDatasetWithTypeRow($mbtiData, $typeRow, $organizationId);
        }

        return $mbtiData;
    }

    private function loadMbtiTypeFeaturesByCategory(int $organizationId, int $mbtiTypeId): array
    {
        if ($organizationId <= 0 || $mbtiTypeId <= 0) {
            return [];
        }

        try {
            $rows = DatabaseHelper::fetchAll(
                'SELECT category, feature_text, sort_order, id
                 FROM organization_mbti_type_features
                 WHERE organization_id = :organization_id AND mbti_type_id = :mbti_type_id
                 ORDER BY category ASC, sort_order ASC, id ASC',
                ['organization_id' => $organizationId, 'mbti_type_id' => $mbtiTypeId]
            );
        } catch (Exception $exception) {
            $rows = [];
        }

        if (empty($rows)) {
            return [];
        }

        $featuresByCategory = [];
        foreach ($rows as $row) {
            if (!is_array($row)) {
                continue;
            }

            $category = trim((string) ($row['category'] ?? ''));
            if ($category === '') {
                $category = 'ویژگی‌ها';
            }

            $text = trim((string) ($row['feature_text'] ?? ''));
            if ($text === '') {
                continue;
            }

            if (!isset($featuresByCategory[$category])) {
                $featuresByCategory[$category] = [];
            }

            if (!in_array($text, $featuresByCategory[$category], true)) {
                $featuresByCategory[$category][] = $text;
            }
        }

        return $featuresByCategory;
    }

    private function enrichMbtiDatasetWithTypeRow(array $mbtiData, array $typeRow, int $organizationId): array
    {
        $typeCode = strtoupper(trim((string) ($typeRow['type_code'] ?? '')));
        if ($typeCode !== '') {
            $mbtiData['type_code'] = $mbtiData['type_code'] ?? $typeCode;
            $mbtiData['has_mbti'] = true;
        }

        $title = trim((string) ($typeRow['title'] ?? ''));
        if ($title !== '') {
            $mbtiData['type_title'] = $title;
            if (empty($mbtiData['persona_name'])) {
                $mbtiData['persona_name'] = $title;
            }
        }

        $summary = trim((string) ($typeRow['summary'] ?? ''));
        if ($summary !== '') {
            $mbtiData['type_summary'] = $summary;
            if (empty($mbtiData['summary'])) {
                $mbtiData['summary'] = $summary;
            }
        }

        $shortDescription = trim((string) ($typeRow['short_description'] ?? ''));
        if ($shortDescription === '' && $summary !== '') {
            $shortDescription = $summary;
        }
        if ($shortDescription !== '') {
            $mbtiData['type_short_description'] = $shortDescription;
            if (empty($mbtiData['summary'])) {
                $mbtiData['summary'] = $shortDescription;
            }
        }

        $description = trim((string) ($typeRow['description'] ?? ''));
        if ($description !== '') {
            $mbtiData['type_description'] = $description;
            if (empty($mbtiData['summary'])) {
                $mbtiData['summary'] = $description;
            }
        }

        $functions = trim((string) ($typeRow['cognitive_functions'] ?? ''));
        if ($functions !== '') {
            $mbtiData['cognitive_functions'] = $functions;
        }

        $categoryValue = '';
        if (isset($typeRow['type_category'])) {
            $categoryValue = trim((string) $typeRow['type_category']);
        }
        if ($categoryValue === '' && isset($typeRow['category'])) {
            $categoryValue = trim((string) $typeRow['category']);
        }
        if ($categoryValue === '' && isset($typeRow['categories'])) {
            $categoriesList = $this->decodeMbtiCategories((string) $typeRow['categories']);
            if (!empty($categoriesList)) {
                $categoryValue = implode('، ', array_slice($categoriesList, 0, 2));
            }
        }
        if ($categoryValue !== '') {
            $mbtiData['type_category'] = $categoryValue;
        }

        $mbtiTypeId = (int) ($typeRow['id'] ?? 0);
        if ($mbtiTypeId > 0) {
            $featuresByCategory = $this->loadMbtiTypeFeaturesByCategory($organizationId, $mbtiTypeId);
            if (!empty($featuresByCategory)) {
                $mbtiData['features'] = $featuresByCategory;
            }
        }

        if (!isset($mbtiData['summary'])) {
            $mbtiData['summary'] = '';
        }

        return $mbtiData;
    }

    private function normalizeMbtiDatasetForPreview(array $mbtiData): array
    {
        if (empty($mbtiData) || empty($mbtiData['has_mbti'])) {
            return [];
        }

        $typeCode = trim((string) ($mbtiData['type_code'] ?? ''));
        $typeTitle = trim((string) ($mbtiData['type_title'] ?? ''));
        $personaName = trim((string) ($mbtiData['persona_name'] ?? ($typeTitle !== '' ? $typeTitle : '')));
        $summary = trim((string) ($mbtiData['summary'] ?? ''));
        $typeSummary = trim((string) ($mbtiData['type_summary'] ?? ''));
        $typeShort = trim((string) ($mbtiData['type_short_description'] ?? ''));
        $typeDescription = trim((string) ($mbtiData['type_description'] ?? ''));
        $typeCategory = trim((string) ($mbtiData['type_category'] ?? ''));
        $cognitiveFunctions = trim((string) ($mbtiData['cognitive_functions'] ?? ''));

        if ($summary === '' && $typeSummary !== '') {
            $summary = $typeSummary;
        }
        if ($summary === '' && $typeShort !== '') {
            $summary = $typeShort;
        }
        if ($summary === '' && $typeDescription !== '') {
            $summary = $typeDescription;
        }

        $cleanupList = static function (array $list): array {
            $filtered = [];
            foreach ($list as $item) {
                $text = trim((string) $item);
                if ($text !== '') {
                    $filtered[] = $text;
                }
            }
            return array_values(array_unique($filtered));
        };

        $strengths = [];
        $growthAreas = [];
        $featureGroups = [];

        if (!empty($mbtiData['features']) && is_array($mbtiData['features'])) {
            foreach ($mbtiData['features'] as $category => $items) {
                $title = trim((string) $category);
                $sourceItems = [];
                if (is_array($items)) {
                    $sourceItems = $items;
                } elseif ($items !== null) {
                    $sourceItems = [$items];
                }

                $normalizedItems = $cleanupList($sourceItems);
                if (empty($normalizedItems)) {
                    continue;
                }

                $classification = $this->classifyMbtiFeatureCategory($title);
                if ($classification === 'strengths') {
                    $strengths = array_merge($strengths, $normalizedItems);
                } elseif ($classification === 'growth') {
                    $growthAreas = array_merge($growthAreas, $normalizedItems);
                }

                if ($title === '') {
                    $title = 'ویژگی‌ها';
                }

                $featureGroups[] = [
                    'category' => $title,
                    'items' => $normalizedItems,
                ];
            }
        }

        $strengths = $cleanupList($strengths);
        $growthAreas = $cleanupList($growthAreas);

        if (empty($strengths) && !empty($featureGroups)) {
            $firstGroup = $featureGroups[0]['items'] ?? [];
            if (!empty($firstGroup)) {
                $strengths = $cleanupList($firstGroup);
            }
        }

        $preferenceEI = $this->resolveMbtiPreferencePercent($mbtiData, 'EI', 'E');
        $preferenceSN = $this->resolveMbtiPreferencePercent($mbtiData, 'SN', 'S');
        $preferenceTF = $this->resolveMbtiPreferencePercent($mbtiData, 'TF', 'T');
        $preferenceJP = $this->resolveMbtiPreferencePercent($mbtiData, 'JP', 'J');

        $result = [
            'has_mbti' => true,
            'type_code' => $typeCode,
            'persona_name' => $personaName,
            'summary' => $summary,
            'strengths' => $strengths,
            'growth_areas' => $growthAreas,
            'preferenceEI' => $preferenceEI,
            'preferenceSN' => $preferenceSN,
            'preferenceTF' => $preferenceTF,
            'preferenceJP' => $preferenceJP,
        ];

        if ($typeTitle !== '') {
            $result['type_title'] = $typeTitle;
        }
        if ($typeSummary !== '' && $typeSummary !== $summary) {
            $result['type_summary'] = $typeSummary;
        }
        if ($typeShort !== '' && $typeShort !== $summary) {
            $result['type_short_description'] = $typeShort;
        }
        if ($typeDescription !== '' && $typeDescription !== $summary) {
            $result['type_description'] = $typeDescription;
        }
        if ($typeCategory !== '') {
            $result['type_category'] = $typeCategory;
        }
        if ($cognitiveFunctions !== '') {
            $result['cognitive_functions'] = $cognitiveFunctions;
        }
        if (!empty($featureGroups)) {
            $result['feature_groups'] = $featureGroups;
        }
        if (!empty($mbtiData['features']) && is_array($mbtiData['features'])) {
            $result['features'] = $mbtiData['features'];
        }

        if ($typeCode === '') {
            unset($result['type_code']);
        }
        if ($personaName === '') {
            unset($result['persona_name']);
        }
        if ($summary === '') {
            unset($result['summary']);
        }
        if (empty($strengths)) {
            unset($result['strengths']);
        }
        if (empty($growthAreas)) {
            unset($result['growth_areas']);
        }

        return $result;
    }

    private function getCertificatePreviewMbtiDataset(int $organizationId, array $sampleData): array
    {
        $this->ensureOrganizationMbtiTypesTableExists();
        $this->ensureOrganizationMbtiTypeFeaturesTableExists();

        $requestedCode = '';
        $codeKeys = ['mbti_type', 'mbtiType', 'mbti_code', 'type_code'];
        foreach ($codeKeys as $key) {
            if (!isset($_GET[$key]) || !is_string($_GET[$key])) {
                continue;
            }
            $candidate = strtoupper(trim(UtilityHelper::persianToEnglish($_GET[$key])));
            $candidate = preg_replace('/[^A-Z]/', '', $candidate);
            if ($this->isValidMbtiCode($candidate)) {
                $requestedCode = $candidate;
                break;
            }
        }

        if ($organizationId <= 0) {
            return isset($sampleData['mbti_profile']) && is_array($sampleData['mbti_profile'])
                ? $sampleData['mbti_profile']
                : [];
        }

        $params = ['organization_id' => $organizationId];
        $query = 'SELECT * FROM organization_mbti_types WHERE organization_id = :organization_id';
        if ($requestedCode !== '') {
            $query .= ' AND UPPER(type_code) = :type_code';
            $params['type_code'] = $requestedCode;
        }
        $query .= ' ORDER BY updated_at DESC, id DESC LIMIT 1';

        try {
            $typeRow = DatabaseHelper::fetchOne($query, $params);
        } catch (Exception $exception) {
            $typeRow = null;
        }

        if (!$typeRow) {
            return isset($sampleData['mbti_profile']) && is_array($sampleData['mbti_profile'])
                ? $sampleData['mbti_profile']
                : [];
        }

        $typeCode = strtoupper(trim((string) ($typeRow['type_code'] ?? '')));
        if (!$this->isValidMbtiCode($typeCode)) {
            $typeCode = strtoupper(trim((string) ($typeRow['type_code'] ?? '')));
        }

        $mbtiData = [
            'has_mbti' => $typeCode !== '',
            'type_code' => $typeCode,
            'axes' => [],
            'features' => [],
        ];

        $mbtiData = $this->enrichMbtiDatasetWithTypeRow($mbtiData, $typeRow, $organizationId);

        $normalized = $this->normalizeMbtiDatasetForPreview($mbtiData);
        if (!empty($normalized)) {
            foreach (['type_title', 'type_summary', 'type_short_description', 'type_description', 'type_category', 'cognitive_functions', 'features', 'persona_name', 'summary'] as $key) {
                if (isset($mbtiData[$key]) && $mbtiData[$key] !== '') {
                    $normalized[$key] = $mbtiData[$key];
                }
            }
            if (!empty($mbtiData['features']) && is_array($mbtiData['features'])) {
                $normalized['features'] = $mbtiData['features'];
            }
            if (!isset($normalized['axes']) && isset($mbtiData['axes'])) {
                $normalized['axes'] = $mbtiData['axes'];
            }
            return $normalized;
        }

        return $mbtiData;
    }

    private function resolveMbtiPreferencePercent(array $mbtiData, string $axisKey, string $primaryLetter): float
    {
        if (!isset($mbtiData['axes'][$axisKey]) || !is_array($mbtiData['axes'][$axisKey])) {
            return 50.0;
        }

        $axis = $mbtiData['axes'][$axisKey];
        $percentKey = $primaryLetter . '_pct';

        if (isset($axis[$percentKey]) && is_numeric($axis[$percentKey])) {
            return max(0.0, min(100.0, (float) $axis[$percentKey]));
        }

        $primaryCount = isset($axis[$primaryLetter]) && is_numeric($axis[$primaryLetter]) ? (float) $axis[$primaryLetter] : 0.0;
        $counts = array_filter($axis, static function ($key) {
            return preg_match('/^[EISNTFJP]$/', (string) $key);
        }, ARRAY_FILTER_USE_KEY);
        $total = array_sum(array_map('floatval', $counts));
        if ($total <= 0) {
            return 50.0;
        }

        return max(0.0, min(100.0, round(($primaryCount * 100) / $total, 2)));
    }

    private function classifyMbtiFeatureCategory(string $category): string
    {
        $normalized = trim(mb_strtolower($category, 'UTF-8'));

        $strengthTokens = ['strength', 'strengths', 'strong', 'قوت', 'نقطه قوت', 'مزیت', 'برتری', 'توانمندی'];
        foreach ($strengthTokens as $token) {
            if ($token !== '' && mb_strpos($normalized, $token) !== false) {
                return 'strengths';
            }
        }

        $growthTokens = ['growth', 'develop', 'weakness', 'challenge', 'improve', 'رشد', 'توسعه', 'بهبود', 'چالش', 'فرصت', 'قابل بهبود', 'قابلیت توسعه'];
        foreach ($growthTokens as $token) {
            if ($token !== '' && mb_strpos($normalized, $token) !== false) {
                return 'growth';
            }
        }

        return 'other';
    }

    private function buildPublicProfileDatasetFromAnswers(int $organizationId, int $evaluationId, int $evaluateeId): array
    {
        if ($organizationId <= 0 || $evaluationId <= 0 || $evaluateeId <= 0) {
            return [];
        }

        try {
            $rows = DatabaseHelper::fetchAll(
                'SELECT a.answer_text, a.answer_payload, a.created_at, t.name AS tool_name, t.code, t.question_type, t.calculation_formula
                 FROM organization_evaluation_exam_answers a
                 INNER JOIN organization_evaluation_tools t ON t.id = a.tool_id
                 WHERE a.organization_id = :organization_id
                   AND a.evaluation_id = :evaluation_id
                   AND a.evaluatee_id = :evaluatee_id
                   AND (
                        LOWER(t.code) LIKE "%profile%"
                        OR LOWER(t.question_type) LIKE "%profile%"
                        OR LOWER(t.calculation_formula) LIKE "%profile%"
                   )
                 ORDER BY a.id ASC',
                [
                    'organization_id' => $organizationId,
                    'evaluation_id' => $evaluationId,
                    'evaluatee_id' => $evaluateeId,
                ]
            ) ?: [];
        } catch (Exception $exception) {
            $rows = [];
        }

        if (empty($rows)) {
            return [];
        }

        $profile = [
            'headline' => '',
            'persona_name' => '',
            'style_name' => '',
            'summary' => '',
            'sections' => [],
            'strengths' => [],
            'collaboration_tips' => [],
            'development_focus' => [],
            'stress_signals' => [],
            'source_tool' => '',
            'updated_at' => null,
            'updated_at_formatted' => '',
        ];

        foreach ($rows as $row) {
            if ($profile['source_tool'] === '' && !empty($row['tool_name'])) {
                $profile['source_tool'] = (string) $row['tool_name'];
            }

            $createdAtRaw = isset($row['created_at']) ? trim((string) $row['created_at']) : '';
            if ($createdAtRaw !== '') {
                if ($profile['updated_at'] === null) {
                    $profile['updated_at'] = $createdAtRaw;
                } else {
                    $currentTs = strtotime((string) $profile['updated_at']);
                    $candidateTs = strtotime($createdAtRaw);
                    if ($candidateTs !== false && ($currentTs === false || $candidateTs > $currentTs)) {
                        $profile['updated_at'] = $createdAtRaw;
                    }
                }
            }

            $payload = $this->decodePublicProfilePayload($row['answer_payload'] ?? null);
            if (!empty($payload)) {
                $this->mergePublicProfilePayload($profile, $payload);
            }

            $answerText = trim((string) ($row['answer_text'] ?? ''));
            if ($answerText !== '') {
                $profile['summary'] = $this->selectPublicProfileText($profile['summary'], $answerText);
            }
        }

        if ($profile['updated_at'] !== null) {
            $timestamp = strtotime((string) $profile['updated_at']);
            if ($timestamp !== false) {
                $profile['updated_at_formatted'] = UtilityHelper::englishToPersian(date('Y/m/d', $timestamp));
            }
        }

        $profile['sections'] = $this->normalizePublicProfileSections($profile['sections']);

        $hasContent = $profile['summary'] !== ''
            || !empty($profile['sections'])
            || !empty($profile['strengths'])
            || !empty($profile['collaboration_tips'])
            || !empty($profile['development_focus'])
            || !empty($profile['stress_signals']);

        if (!$hasContent) {
            return [];
        }

        if ($profile['headline'] === '') {
            unset($profile['headline']);
        }
        if ($profile['persona_name'] === '') {
            unset($profile['persona_name']);
        }
        if ($profile['style_name'] === '') {
            unset($profile['style_name']);
        }
        if ($profile['source_tool'] === '') {
            unset($profile['source_tool']);
        }
        if ($profile['updated_at_formatted'] === '') {
            unset($profile['updated_at_formatted']);
        }
        if ($profile['updated_at'] === null) {
            unset($profile['updated_at']);
        }

        return $profile;
    }

    private function decodePublicProfilePayload($payload): array
    {
        if (is_array($payload)) {
            return $payload;
        }

        if (is_string($payload)) {
            $trimmed = trim($payload);
            if ($trimmed === '') {
                return [];
            }
            $decoded = json_decode($trimmed, true);
            if (is_array($decoded)) {
                return $decoded;
            }
        }

        return [];
    }

    private function mergePublicProfilePayload(array &$profile, array $payload): void
    {
        foreach ($payload as $rawKey => $value) {
            if (is_int($rawKey)) {
                if (is_array($value)) {
                    $this->mergePublicProfilePayload($profile, $value);
                }
                continue;
            }

            $normalizedKey = $this->normalizePublicProfileKey($rawKey);

            if ($normalizedKey === '') {
                if (is_array($value)) {
                    $this->mergePublicProfilePayload($profile, $value);
                }
                continue;
            }

            switch ($normalizedKey) {
                case 'summary':
                case 'shortsummary':
                case 'shortdescription':
                case 'profilesummary':
                case 'overview':
                case 'description':
                    $profile['summary'] = $this->selectPublicProfileText($profile['summary'], $this->normalizePublicProfileText($value));
                    break;
                case 'headline':
                case 'profileheadline':
                case 'profiletitle':
                case 'title':
                case 'sectiontitle':
                    $headlineText = $this->normalizePublicProfileText($value);
                    if ($headlineText !== '') {
                        $profile['headline'] = $this->selectPublicProfileText($profile['headline'], $headlineText);
                    }
                    break;
                case 'persona':
                case 'personaname':
                case 'personatitle':
                case 'archetype':
                    $personaText = $this->normalizePublicProfileText($value);
                    if ($personaText !== '') {
                        if ($profile['persona_name'] === '' || mb_strlen($personaText, 'UTF-8') > mb_strlen($profile['persona_name'], 'UTF-8')) {
                            $profile['persona_name'] = $personaText;
                        }
                    }
                    break;
                case 'style':
                case 'stylename':
                case 'profilestyle':
                case 'dominantstyle':
                    $styleText = $this->normalizePublicProfileText($value);
                    if ($styleText !== '') {
                        if ($profile['style_name'] === '' || mb_strlen($styleText, 'UTF-8') > mb_strlen($profile['style_name'], 'UTF-8')) {
                            $profile['style_name'] = $styleText;
                        }
                    }
                    break;
                case 'generaltendencies':
                case 'generaltendency':
                case 'tendencies':
                case 'generaloverview':
                case 'general':
                    $this->assignPublicProfileSection($profile, 'general_tendencies', $value);
                    break;
                case 'workpreferences':
                case 'workstyle':
                case 'preferredworkstyle':
                case 'workapproach':
                case 'collaborationstyle':
                    $this->assignPublicProfileSection($profile, 'work_preferences', $value);
                    break;
                case 'effectivenessrequirements':
                case 'effectivenessneeds':
                case 'successfactors':
                case 'whatineedtoperform':
                    $this->assignPublicProfileSection($profile, 'effectiveness_requirements', $value);
                    break;
                case 'companionrequirements':
                case 'teamneeds':
                case 'supportneeds':
                case 'expectationsfromothers':
                    $this->assignPublicProfileSection($profile, 'companion_requirements', $value);
                    break;
                case 'behavioroverview':
                case 'behaviouroverview':
                case 'behaviorpattern':
                case 'behaviourpattern':
                case 'behaviourstyle':
                    $this->assignPublicProfileSection($profile, 'behavior_overview', $value);
                    break;
                case 'strengths':
                case 'keystrengths':
                case 'highlights':
                case 'valueadd':
                    $this->assignPublicProfileList($profile, 'strengths', $value);
                    break;
                case 'collaborationtips':
                case 'collaboration':
                case 'workingwithme':
                case 'bestcollaboration':
                    $this->assignPublicProfileList($profile, 'collaboration_tips', $value);
                    break;
                case 'developmentfocus':
                case 'developmentareas':
                case 'growthareas':
                case 'developmentrecommendations':
                case 'growthfocus':
                    $this->assignPublicProfileList($profile, 'development_focus', $value);
                    break;
                case 'stresssignals':
                case 'stressbehaviours':
                case 'stressbehaviors':
                case 'stressindicators':
                    $this->assignPublicProfileList($profile, 'stress_signals', $value);
                    break;
                case 'sections':
                case 'section':
                case 'profilesections':
                    if (is_array($value)) {
                        foreach ($value as $sectionRow) {
                            if (!is_array($sectionRow)) {
                                continue;
                            }
                            $sectionKey = '';
                            foreach (['key', 'id', 'slug', 'code', 'name'] as $metaKey) {
                                if (!empty($sectionRow[$metaKey])) {
                                    $sectionKey = $this->normalizePublicProfileKey((string) $sectionRow[$metaKey]);
                                    break;
                                }
                            }
                            if ($sectionKey === '') {
                                continue;
                            }
                            $mappedSectionKey = $this->mapPublicProfileSectionKey($sectionKey);
                            if ($mappedSectionKey !== null) {
                                $this->assignPublicProfileSection($profile, $mappedSectionKey, $sectionRow);
                            }
                        }
                    }
                    break;
                case 'lists':
                case 'items':
                    if (is_array($value)) {
                        $this->mergePublicProfilePayload($profile, $value);
                    }
                    break;
                case 'sourcetool':
                case 'toolname':
                case 'source':
                case 'assessmenttool':
                    if ($profile['source_tool'] === '') {
                        $sourceText = $this->normalizePublicProfileText($value);
                        if ($sourceText !== '') {
                            $profile['source_tool'] = $sourceText;
                        }
                    }
                    break;
                case 'lastupdated':
                case 'updatedat':
                case 'generatedat':
                case 'timestamp':
                    $timestampCandidate = $this->normalizePublicProfileText($value);
                    if ($timestampCandidate !== '') {
                        $profile['updated_at'] = $timestampCandidate;
                    }
                    break;
                default:
                    if (is_array($value)) {
                        $this->mergePublicProfilePayload($profile, $value);
                    }
                    break;
            }
        }
    }

    private function assignPublicProfileSection(array &$profile, string $sectionKey, $value): void
    {
        $defaultTitle = $this->getPublicProfileSectionTitle($sectionKey);

        if (!isset($profile['sections'][$sectionKey]) || !is_array($profile['sections'][$sectionKey])) {
            $profile['sections'][$sectionKey] = [
                'title' => $defaultTitle,
                'text' => '',
                'bullets' => [],
            ];
        }

        $section = &$profile['sections'][$sectionKey];

        if (is_array($value)) {
            if (isset($value['title']) && trim((string) $value['title']) !== '') {
                $section['title'] = trim((string) $value['title']);
            } elseif (isset($value['label']) && trim((string) $value['label']) !== '') {
                $section['title'] = trim((string) $value['label']);
            }

            foreach (['text', 'content', 'summary', 'description', 'value'] as $textKey) {
                if (!isset($value[$textKey])) {
                    continue;
                }
                $textCandidate = $this->normalizePublicProfileText($value[$textKey]);
                if ($textCandidate !== '') {
                    $section['text'] = $this->selectPublicProfileText($section['text'], $textCandidate);
                }
            }

            foreach (['bullets', 'items', 'list', 'highlights'] as $listKey) {
                if (!isset($value[$listKey])) {
                    continue;
                }
                $section['bullets'] = $this->mergeUniqueProfileList($section['bullets'], $this->normalizePublicProfileList($value[$listKey]));
            }

            foreach ($value as $nestedKey => $nestedValue) {
                if (in_array($nestedKey, ['title', 'label', 'text', 'content', 'summary', 'description', 'value', 'bullets', 'items', 'list', 'highlights', 'key', 'id', 'slug', 'code', 'name'], true)) {
                    continue;
                }
                if (is_array($nestedValue)) {
                    $this->assignPublicProfileSection($profile, $sectionKey, $nestedValue);
                } elseif (is_string($nestedValue) || is_numeric($nestedValue)) {
                    $section['text'] = $this->selectPublicProfileText($section['text'], $this->normalizePublicProfileText($nestedValue));
                }
            }
            return;
        }

        $section['text'] = $this->selectPublicProfileText($section['text'], $this->normalizePublicProfileText($value));
    }

    private function assignPublicProfileList(array &$profile, string $listKey, $value): void
    {
        if (!isset($profile[$listKey]) || !is_array($profile[$listKey])) {
            $profile[$listKey] = [];
        }

        $profile[$listKey] = $this->mergeUniqueProfileList($profile[$listKey], $this->normalizePublicProfileList($value));
    }

    private function normalizePublicProfileText($value): string
    {
        if (is_string($value) || is_numeric($value)) {
            return trim((string) $value);
        }

        if (is_array($value)) {
            $parts = [];
            foreach ($value as $entry) {
                $text = $this->normalizePublicProfileText($entry);
                if ($text !== '') {
                    $parts[] = $text;
                }
            }
            if (!empty($parts)) {
                return implode("\n", array_unique($parts));
            }
        }

        return '';
    }

    private function normalizePublicProfileList($value): array
    {
        $items = [];

        if (is_array($value)) {
            if ($this->isAssocArray($value)) {
                foreach ($value as $nested) {
                    $items = $this->mergeUniqueProfileList($items, $this->normalizePublicProfileList($nested));
                }
            } else {
                foreach ($value as $entry) {
                    $text = $this->normalizePublicProfileText($entry);
                    if ($text !== '') {
                        $items[] = $text;
                    }
                }
            }
        } elseif (is_string($value) || is_numeric($value)) {
            $string = trim((string) $value);
            if ($string !== '') {
                $parts = preg_split('/[\r\n]+|[•●▪◆◦]|[،؛;]/u', $string);
                if (is_array($parts)) {
                    foreach ($parts as $part) {
                        $clean = trim((string) $part);
                        if ($clean !== '') {
                            $items[] = $clean;
                        }
                    }
                } else {
                    $items[] = $string;
                }
            }
        }

        return array_values(array_unique(array_filter($items, static function ($item) {
            return $item !== '';
        })));
    }

    private function mergeUniqueProfileList(array $existing, array $items): array
    {
        foreach ($items as $item) {
            $clean = trim((string) $item);
            if ($clean === '') {
                continue;
            }
            if (!in_array($clean, $existing, true)) {
                $existing[] = $clean;
            }
        }

        return $existing;
    }

    private function selectPublicProfileText(string $current, string $candidate): string
    {
        $candidate = trim($candidate);
        if ($candidate === '') {
            return $current;
        }
        if ($current === '') {
            return $candidate;
        }
        $currentLength = function_exists('mb_strlen') ? mb_strlen($current, 'UTF-8') : strlen($current);
        $candidateLength = function_exists('mb_strlen') ? mb_strlen($candidate, 'UTF-8') : strlen($candidate);
        return $candidateLength >= $currentLength ? $candidate : $current;
    }

    private function normalizePublicProfileSections(array $sections): array
    {
        $result = [];
        foreach ($sections as $key => $section) {
            if (!is_array($section)) {
                continue;
            }
            $text = isset($section['text']) ? trim((string) $section['text']) : '';
            $bullets = isset($section['bullets']) && is_array($section['bullets'])
                ? array_values(array_unique(array_filter(array_map('trim', $section['bullets']))))
                : [];
            if ($text === '' && empty($bullets)) {
                continue;
            }
            $title = isset($section['title']) && trim((string) $section['title']) !== ''
                ? trim((string) $section['title'])
                : $this->getPublicProfileSectionTitle($key);
            $result[$key] = [
                'title' => $title,
                'text' => $text,
                'bullets' => $bullets,
            ];
        }

        return $result;
    }

    private function getPublicProfileSectionTitle(string $sectionKey): string
    {
        $map = [
            'general_tendencies' => 'گرایش‌های کلی',
            'work_preferences' => 'ترجیحات کاری',
            'effectiveness_requirements' => 'نیازهای موفقیت',
            'companion_requirements' => 'انتظارات از دیگران',
            'behavior_overview' => 'الگوی رفتاری',
        ];

        return $map[$sectionKey] ?? 'بخش پروفایل';
    }

    private function normalizePublicProfileKey(string $key): string
    {
        $normalized = strtolower(trim($key));
        $normalized = str_replace([' ', '-', '_', '.', '/'], '', $normalized);
        return $normalized;
    }

    private function mapPublicProfileSectionKey(string $normalizedKey): ?string
    {
        $map = [
            'generaltendencies' => 'general_tendencies',
            'generaltendency' => 'general_tendencies',
            'tendencies' => 'general_tendencies',
            'generaloverview' => 'general_tendencies',
            'workpreferences' => 'work_preferences',
            'workstyle' => 'work_preferences',
            'preferredworkstyle' => 'work_preferences',
            'effectivenessrequirements' => 'effectiveness_requirements',
            'effectivenessneeds' => 'effectiveness_requirements',
            'successfactors' => 'effectiveness_requirements',
            'companionrequirements' => 'companion_requirements',
            'teamneeds' => 'companion_requirements',
            'supportneeds' => 'companion_requirements',
            'expectationsfromothers' => 'companion_requirements',
            'behavioroverview' => 'behavior_overview',
            'behaviouroverview' => 'behavior_overview',
            'behaviorpattern' => 'behavior_overview',
            'behaviourpattern' => 'behavior_overview',
        ];

        return $map[$normalizedKey] ?? null;
    }

    private function isAssocArray(array $array): bool
    {
        if (empty($array)) {
            return false;
        }
        return array_keys($array) !== range(0, count($array) - 1);
    }

    private function sanitizeCertificateBuilderElementProps(string $type, array $props, ?array $componentMap = null): array
    {
        if ($componentMap === null) {
            $componentMap = [];
            foreach ($this->getCertificateBuilderComponentLibrary() as $componentDefinition) {
                $componentMap[$componentDefinition['type']] = $componentDefinition;
            }
        }

        $definition = $componentMap[$type] ?? null;
        if ($definition === null) {
            return [];
        }

        $result = isset($definition['defaultProps']) && is_array($definition['defaultProps'])
            ? $definition['defaultProps']
            : [];

        $fields = isset($definition['configFields']) && is_array($definition['configFields'])
            ? $definition['configFields']
            : [];

        // Migration: Convert old 'variant' to new 'fontSize' for hero_heading
        if ($type === 'hero_heading') {
            if (isset($props['variant']) && !isset($props['fontSize'])) {
                $variantSizes = ['display' => 48, 'headline' => 36, 'title' => 28];
                $variant = is_string($props['variant']) ? strtolower(trim($props['variant'])) : '';
                $props['fontSize'] = $variantSizes[$variant] ?? 48;
            }
            // Remove old variant property
            unset($props['variant']);
        }

        if ($type === 'logo_display' && isset($props['layout']) && !isset($props['widthMode'])) {
            $props['widthMode'] = $props['layout'];
        }

        foreach ($fields as $field) {
            $key = $field['key'] ?? null;
            if ($key === null) {
                continue;
            }

            $dependencies = isset($field['dependsOn']) && is_array($field['dependsOn'])
                ? $field['dependsOn']
                : [];
            if (!empty($dependencies) && !$this->areCertificateBuilderFieldDependenciesSatisfied($dependencies, $props, $result)) {
                continue;
            }

            $fieldType = $field['type'] ?? 'text';
            $value = $props[$key] ?? ($result[$key] ?? null);

            $allowedValues = isset($field['options']) && is_array($field['options'])
                ? array_column($field['options'], 'value')
                : null;

            switch ($fieldType) {
                case 'note':
                    continue 2;
                case 'toggle':
                    $result[$key] = in_array($value, [1, '1', true, 'true', 'on'], true) ? 1 : 0;
                    break;
                case 'select':
                    $options = $allowedValues ?? [];
                    if (!empty($options) && is_string($value) && in_array($value, $options, true)) {
                        $result[$key] = $value;
                    } elseif (!empty($options)) {
                        $result[$key] = (string) $options[0];
                    }
                    break;
                case 'number':
                    $numeric = is_numeric($value) ? (float) $value : (isset($result[$key]) ? (float) $result[$key] : 0.0);
                    if (isset($field['min']) && is_numeric($field['min']) && $numeric < (float) $field['min']) {
                        $numeric = (float) $field['min'];
                    }
                    if (isset($field['max']) && is_numeric($field['max']) && $numeric > (float) $field['max']) {
                        $numeric = (float) $field['max'];
                    }
                    if (isset($field['cast']) && $field['cast'] === 'int') {
                        $numeric = (int) round($numeric);
                    } elseif (!isset($field['cast'])) {
                        $numeric = round($numeric, 4);
                    }
                    $result[$key] = $numeric;
                    break;
                case 'font_size':
                    // Font size selector (6-200px)
                    $fontSize = is_numeric($value) ? (int) $value : (isset($result[$key]) ? (int) $result[$key] : 16);
                    $fontSize = max(6, min(200, $fontSize));
                    $result[$key] = $fontSize;
                    break;
                case 'color':
                    $fallback = isset($result[$key]) && is_string($result[$key]) ? $result[$key] : '#000000';
                    $result[$key] = $this->sanitizeCertificateBuilderColorValue($value, $fallback);
                    break;
                case 'list':
                    if (!isset($field['maxItems']) || !is_numeric($field['maxItems'])) {
                        $maxItems = 12;
                    } else {
                        $maxItems = max(1, (int) $field['maxItems']);
                    }
                    $allowedOptions = is_array($allowedValues) ? $allowedValues : [];
                    $rawItems = [];
                    if (is_array($value)) {
                        $rawItems = $value;
                    } elseif (is_string($value)) {
                        $decoded = json_decode($value, true);
                        if (is_array($decoded)) {
                            $rawItems = $decoded;
                        }
                    }
                    $cleanItems = [];
                    foreach ($rawItems as $itemValue) {
                        if (!is_string($itemValue)) {
                            continue;
                        }
                        $itemValue = trim($itemValue);
                        if ($itemValue === '') {
                            continue;
                        }
                        if (!empty($allowedOptions) && !in_array($itemValue, $allowedOptions, true)) {
                            continue;
                        }
                        $cleanItems[] = $itemValue;
                        if (count($cleanItems) >= $maxItems) {
                            break;
                        }
                    }
                    $result[$key] = $cleanItems;
                    break;
                case 'multi_select':
                    $maxItems = isset($field['maxItems']) && is_numeric($field['maxItems'])
                        ? max(1, (int) $field['maxItems'])
                        : 20;
                    $rawSelected = [];
                    if (is_array($value)) {
                        $rawSelected = $value;
                    } elseif (is_string($value)) {
                        $decoded = json_decode($value, true);
                        if (is_array($decoded)) {
                            $rawSelected = $decoded;
                        } else {
                            $rawSelected = array_map('trim', explode(',', $value));
                        }
                    }

                    $cleanSelected = [];
                    $allowedSet = null;
                    if (is_array($allowedValues) && !empty($allowedValues)) {
                        $allowedSet = [];
                        foreach ($allowedValues as $allowedItem) {
                            $allowedSet[(string) $allowedItem] = true;
                        }
                    }

                    if (is_array($rawSelected)) {
                        foreach ($rawSelected as $rawItem) {
                            if (is_array($rawItem)) {
                                if (isset($rawItem['value'])) {
                                    $rawItem = $rawItem['value'];
                                } elseif (isset($rawItem['id'])) {
                                    $rawItem = $rawItem['id'];
                                }
                            }
                            if (!is_string($rawItem) && !is_numeric($rawItem)) {
                                continue;
                            }
                            $itemValue = trim((string) $rawItem);
                            if ($itemValue === '') {
                                continue;
                            }
                            if ($allowedSet !== null && !isset($allowedSet[$itemValue])) {
                                continue;
                            }
                            if (in_array($itemValue, $cleanSelected, true)) {
                                continue;
                            }
                            $cleanSelected[] = $itemValue;
                            if (count($cleanSelected) >= $maxItems) {
                                break;
                            }
                        }
                    }

                    $result[$key] = $cleanSelected;
                    break;
                case 'mbti_feature_picker':
                    $selection = null;
                    $rawSelection = $value;

                    if (is_string($rawSelection)) {
                        $decoded = json_decode($rawSelection, true);
                        if (is_array($decoded)) {
                            $rawSelection = $decoded;
                        } else {
                            $rawSelection = array_map('trim', explode(',', $rawSelection));
                        }
                    }

                    if (is_array($rawSelection)) {
                        $maxItems = isset($field['maxItems']) && is_numeric($field['maxItems'])
                            ? max(1, (int) $field['maxItems'])
                            : 16;
                        $cleanSelection = [];
                        foreach ($rawSelection as $rawItem) {
                            if (!is_string($rawItem) && !is_numeric($rawItem)) {
                                continue;
                            }
                            $itemValue = trim((string) $rawItem);
                            if ($itemValue === '') {
                                continue;
                            }
                            if (function_exists('mb_substr')) {
                                $itemValue = mb_substr($itemValue, 0, 120, 'UTF-8');
                            } else {
                                $itemValue = substr($itemValue, 0, 120);
                            }
                            if (in_array($itemValue, $cleanSelection, true)) {
                                continue;
                            }
                            $cleanSelection[] = $itemValue;
                            if (count($cleanSelection) >= $maxItems) {
                                break;
                            }
                        }
                        $selection = $cleanSelection;
                    } elseif ($rawSelection === null || $rawSelection === '') {
                        $selection = null;
                    }

                    $result[$key] = $selection;
                    break;
                case 'mbti_feature_labels':
                    $rawLabels = $value;
                    if (is_string($rawLabels)) {
                        $decoded = json_decode($rawLabels, true);
                        if (is_array($decoded)) {
                            $rawLabels = $decoded;
                        } else {
                            $rawLabels = [];
                        }
                    }

                    $cleanLabels = [];

                    $assignLabel = static function (&$map, $category, $label) {
                        if (!is_string($category) && !is_numeric($category)) {
                            return;
                        }
                        $categoryClean = trim((string) $category);
                        if ($categoryClean === '') {
                            return;
                        }
                        if (!is_string($label) && !is_numeric($label)) {
                            return;
                        }
                        $labelClean = trim((string) $label);
                        if ($labelClean === '') {
                            return;
                        }
                        if (function_exists('mb_substr')) {
                            $categoryClean = mb_substr($categoryClean, 0, 160, 'UTF-8');
                            $labelClean = mb_substr($labelClean, 0, 160, 'UTF-8');
                        } else {
                            $categoryClean = substr($categoryClean, 0, 160);
                            $labelClean = substr($labelClean, 0, 160);
                        }
                        $map[$categoryClean] = $labelClean;
                    };

                    if (is_array($rawLabels)) {
                        if ($this->isAssocArray($rawLabels)) {
                            foreach ($rawLabels as $categoryKey => $labelValue) {
                                $assignLabel($cleanLabels, $categoryKey, $labelValue);
                            }
                        } else {
                            foreach ($rawLabels as $entry) {
                                if (!is_array($entry)) {
                                    continue;
                                }
                                if (isset($entry['category']) && isset($entry['label'])) {
                                    $assignLabel($cleanLabels, $entry['category'], $entry['label']);
                                    continue;
                                }
                                $values = array_values($entry);
                                if (count($values) >= 2) {
                                    $assignLabel($cleanLabels, $values[0], $values[1]);
                                }
                            }
                        }
                    }

                    $result[$key] = $cleanLabels;
                    break;
                case 'table_editor':
                    $tableValue = $value;
                    if (is_string($tableValue)) {
                        $decoded = json_decode($tableValue, true);
                        if (is_array($decoded)) {
                            $tableValue = $decoded;
                        }
                    }
                    $defaultTable = isset($result[$key]) && is_array($result[$key]) ? $result[$key] : ['columns' => [], 'rows' => []];
                    $maxColumns = 8;
                    $maxRows = 20;
                    $columns = [];
                    if (isset($tableValue['columns']) && is_array($tableValue['columns'])) {
                        foreach ($tableValue['columns'] as $columnValue) {
                            if (!is_string($columnValue)) {
                                continue;
                            }
                            $columnValue = trim($columnValue);
                            if ($columnValue === '') {
                                $columnValue = 'ستون بدون عنوان';
                            }
                            if (function_exists('mb_substr')) {
                                $columnValue = mb_substr($columnValue, 0, 120, 'UTF-8');
                            } else {
                                $columnValue = substr($columnValue, 0, 120);
                            }
                            $columns[] = $columnValue;
                            if (count($columns) >= $maxColumns) {
                                break;
                            }
                        }
                    }
                    if (empty($columns)) {
                        $fallbackColumns = isset($defaultTable['columns']) && is_array($defaultTable['columns']) ? $defaultTable['columns'] : [];
                        if (!empty($fallbackColumns)) {
                            $columns = array_slice($fallbackColumns, 0, $maxColumns);
                        }
                    }
                    if (empty($columns)) {
                        $columns = ['ستون اول'];
                    }

                    $rows = [];
                    if (isset($tableValue['rows']) && is_array($tableValue['rows'])) {
                        foreach ($tableValue['rows'] as $rowValues) {
                            if (!is_array($rowValues)) {
                                continue;
                            }
                            $rowClean = [];
                            foreach ($columns as $index => $columnTitle) {
                                $cellValue = $rowValues[$index] ?? '';
                                if (!is_string($cellValue)) {
                                    $cellValue = (string) $cellValue;
                                }
                                $cellValue = trim($cellValue);
                                if (function_exists('mb_substr')) {
                                    $cellValue = mb_substr($cellValue, 0, 240, 'UTF-8');
                                } else {
                                    $cellValue = substr($cellValue, 0, 240);
                                }
                                $rowClean[] = $cellValue;
                            }
                            $rows[] = $rowClean;
                            if (count($rows) >= $maxRows) {
                                break;
                            }
                        }
                    }
                    if (empty($rows)) {
                        $fallbackRows = isset($defaultTable['rows']) && is_array($defaultTable['rows']) ? $defaultTable['rows'] : [];
                        foreach ($fallbackRows as $fallbackRow) {
                            if (!is_array($fallbackRow)) {
                                continue;
                            }
                            $rowClean = [];
                            foreach ($columns as $index => $columnTitle) {
                                $cellValue = $fallbackRow[$index] ?? '';
                                if (!is_string($cellValue)) {
                                    $cellValue = (string) $cellValue;
                                }
                                $cellValue = trim($cellValue);
                                if (function_exists('mb_substr')) {
                                    $cellValue = mb_substr($cellValue, 0, 240, 'UTF-8');
                                } else {
                                    $cellValue = substr($cellValue, 0, 240);
                                }
                                $rowClean[] = $cellValue;
                            }
                            $rows[] = $rowClean;
                            if (count($rows) >= $maxRows) {
                                break;
                            }
                        }
                    }
                    if (empty($rows)) {
                        $rows[] = array_fill(0, count($columns), '');
                    }

                    $result[$key] = [
                        'columns' => $columns,
                        'rows' => $rows,
                    ];
                    break;
                default:
                    if (is_string($value)) {
                        if (is_array($allowedValues) && !empty($allowedValues) && !in_array($value, $allowedValues, true)) {
                            continue 2;
                        }
                        $value = trim($value);
                        if (isset($field['maxLength']) && is_numeric($field['maxLength'])) {
                            $maxLength = (int) $field['maxLength'];
                            if ($maxLength > 0) {
                                if (function_exists('mb_strlen')) {
                                    if (mb_strlen($value, 'UTF-8') > $maxLength) {
                                        $value = mb_substr($value, 0, $maxLength, 'UTF-8');
                                    }
                                } elseif (strlen($value) > $maxLength) {
                                    $value = substr($value, 0, $maxLength);
                                }
                            }

                            $applyFlag = $props['applyToAllPages'] ?? ($result['applyToAllPages'] ?? 0);
                            $result['applyToAllPages'] = in_array($applyFlag, [1, '1', true, 'true', 'on'], true) ? 1 : 0;
                        }
                        $result[$key] = $value;
                    }
                    break;
            }
        }

        $applyFlag = $props['applyToAllPages'] ?? ($result['applyToAllPages'] ?? 0);
        $result['applyToAllPages'] = in_array($applyFlag, [1, '1', true, 'true', 'on'], true) ? 1 : 0;

        return $result;
    }

    private function areCertificateBuilderFieldDependenciesSatisfied(array $dependencies, array $rawProps, array $currentProps): bool
    {
        foreach ($dependencies as $dependencyKey => $expectedValue) {
            $currentValue = null;
            if (array_key_exists($dependencyKey, $rawProps)) {
                $currentValue = $rawProps[$dependencyKey];
            } elseif (array_key_exists($dependencyKey, $currentProps)) {
                $currentValue = $currentProps[$dependencyKey];
            }

            if (is_bool($expectedValue)) {
                $normalizedCurrent = in_array($currentValue, [1, '1', true, 'true', 'on'], true);
                if ($normalizedCurrent !== $expectedValue) {
                    return false;
                }
            } elseif (is_numeric($expectedValue)) {
                if ((float) $currentValue !== (float) $expectedValue) {
                    return false;
                }
            } else {
                if ((string) $currentValue !== (string) $expectedValue) {
                    return false;
                }
            }
        }

        return true;
    }

    private function sanitizeCertificateBuilderColorValue($value, string $fallback): string
    {
        $fallback = $fallback !== '' ? $fallback : '#000000';

        if (!is_string($value)) {
            return $fallback;
        }

        $value = trim($value);
        if ($value === '') {
            return $fallback;
        }

        if (strlen($value) > 64) {
            $value = substr($value, 0, 64);
        }

        if (preg_match('/^#([0-9a-fA-F]{3}|[0-9a-fA-F]{4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/', $value)) {
            return $value;
        }

        if (preg_match('/^rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})(\s*,\s*(0|0?\.\d+|1(\.0+)?))?\s*\)$/', $value, $matches)) {
            $r = (int) $matches[1];
            $g = (int) $matches[2];
            $b = (int) $matches[3];

            if ($r > 255 || $g > 255 || $b > 255) {
                return $fallback;
            }

            if (!empty($matches[4])) {
                $alphaRaw = $matches[5] ?? '1';
                $alpha = (float) $alphaRaw;
                if ($alpha < 0.0 || $alpha > 1.0) {
                    return $fallback;
                }
            }

            return $value;
        }

        return $fallback;
    }

    private function sanitizeCertificateBuilderState(array $state): array
    {
        $templates = $this->getCertificateBuilderTemplateOptions();
        $templateKeys = !empty($templates) ? array_column($templates, 'key') : ['classic'];

        $componentDefinitions = $this->getCertificateBuilderComponentLibrary();
        $componentMap = [];
        foreach ($componentDefinitions as $componentDefinition) {
            $componentMap[$componentDefinition['type']] = $componentDefinition;
        }

        $allowedPageSizes = ['a4', 'a5'];
        $allowedOrientations = ['portrait', 'landscape'];

        $result = [
            'version' => 1,
            'activePageId' => null,
            'pages' => [],
        ];

        if (isset($state['version']) && is_numeric($state['version'])) {
            $result['version'] = (int) max(1, min(999, (int) $state['version']));
        }

        $pagesInput = isset($state['pages']) && is_array($state['pages']) ? $state['pages'] : [];
        $usedPageIds = [];

        foreach ($pagesInput as $page) {
            if (!is_array($page)) {
                continue;
            }

            $pageIdRaw = isset($page['id']) && is_string($page['id']) ? trim($page['id']) : '';
            $pageId = $pageIdRaw !== '' ? $pageIdRaw : 'page-' . UtilityHelper::generateRandomString(8);
            while (isset($usedPageIds[$pageId])) {
                $pageId = 'page-' . UtilityHelper::generateRandomString(8);
            }
            $usedPageIds[$pageId] = true;

            $name = isset($page['name']) && is_string($page['name']) ? trim($page['name']) : 'صفحه بدون عنوان';
            if (function_exists('mb_strlen')) {
                if (mb_strlen($name, 'UTF-8') > 80) {
                    $name = mb_substr($name, 0, 80, 'UTF-8');
                }
            } elseif (strlen($name) > 80) {
                $name = substr($name, 0, 80);
            }

            $template = isset($page['template']) && is_string($page['template']) ? trim($page['template']) : 'classic';
            if (!in_array($template, $templateKeys, true)) {
                $template = $templateKeys[0] ?? 'classic';
            }

            $sizeRaw = isset($page['size']) && is_string($page['size']) ? strtolower(trim($page['size'])) : 'a4';
            $size = in_array($sizeRaw, $allowedPageSizes, true) ? $sizeRaw : 'a4';

            $orientationRaw = isset($page['orientation']) && is_string($page['orientation']) ? strtolower(trim($page['orientation'])) : 'portrait';
            $orientation = in_array($orientationRaw, $allowedOrientations, true) ? $orientationRaw : 'portrait';

            $elements = [];
            $elementsInput = isset($page['elements']) && is_array($page['elements']) ? $page['elements'] : [];
            $usedElementIds = [];

            foreach ($elementsInput as $element) {
                if (!is_array($element)) {
                    continue;
                }

                $type = isset($element['type']) && is_string($element['type']) ? trim($element['type']) : '';
                if ($type === '' || !isset($componentMap[$type])) {
                    continue;
                }

                $elementIdRaw = isset($element['id']) && is_string($element['id']) ? trim($element['id']) : '';
                $elementId = $elementIdRaw !== '' ? $elementIdRaw : 'el-' . UtilityHelper::generateRandomString(10);
                while (isset($usedElementIds[$elementId])) {
                    $elementId = 'el-' . UtilityHelper::generateRandomString(10);
                }
                $usedElementIds[$elementId] = true;

                $props = isset($element['props']) && is_array($element['props']) ? $element['props'] : [];

                $elements[] = [
                    'id' => $elementId,
                    'type' => $type,
                    'props' => $this->sanitizeCertificateBuilderElementProps($type, $props, $componentMap),
                ];
            }

            $result['pages'][] = [
                'id' => $pageId,
                'name' => $name,
                'template' => $template,
                'size' => $size,
                'orientation' => $orientation,
                'elements' => $elements,
            ];
        }

        if (empty($result['pages'])) {
            $fallbackId = 'page-' . UtilityHelper::generateRandomString(6);
            $result['pages'][] = [
                'id' => $fallbackId,
                'name' => 'صفحه ۱',
                'template' => $templateKeys[0] ?? 'classic',
                'size' => 'a4',
                'orientation' => 'portrait',
                'elements' => [],
            ];
        }

        $activeIdCandidate = isset($state['activePageId']) && is_string($state['activePageId'])
            ? trim($state['activePageId'])
            : '';

        $pageIds = array_column($result['pages'], 'id');
        if ($activeIdCandidate === '' || !in_array($activeIdCandidate, $pageIds, true)) {
            $activeIdCandidate = $pageIds[0];
        }

        $result['activePageId'] = $activeIdCandidate;

        return $result;
    }

    private function collectCertificateBuilderMetadata(array $state): array
    {
        $templateSet = [];
        $componentSet = [];
        $toolSet = [];

        if (!isset($state['pages']) || !is_array($state['pages'])) {
            return [
                'templates' => [],
                'components' => [],
                'assessment_tool_ids' => [],
            ];
        }

        foreach ($state['pages'] as $page) {
            if (!is_array($page)) {
                continue;
            }

            $templateKey = isset($page['template']) && is_string($page['template'])
                ? trim($page['template'])
                : '';
            if ($templateKey !== '') {
                $templateSet[$templateKey] = true;
            }

            if (!isset($page['elements']) || !is_array($page['elements'])) {
                continue;
            }

            foreach ($page['elements'] as $element) {
                if (!is_array($element)) {
                    continue;
                }

                $elementType = isset($element['type']) && is_string($element['type'])
                    ? trim($element['type'])
                    : '';
                if ($elementType !== '') {
                    $componentSet[$elementType] = true;
                }

                $props = isset($element['props']) && is_array($element['props']) ? $element['props'] : [];
                foreach ($this->extractCertificateBuilderToolIds($elementType, $props) as $toolId) {
                    $toolSet[$toolId] = true;
                }
            }
        }

        return [
            'templates' => array_values(array_keys($templateSet)),
            'components' => array_values(array_keys($componentSet)),
            'assessment_tool_ids' => array_values(array_keys($toolSet)),
        ];
    }

    private function extractCertificateBuilderToolIds(string $elementType, array $props): array
    {
        $result = [];
        $stack = [$props];

        $targetKeys = [
            'selectedtoolids',
            'toolids',
            'tool_id',
            'toolid',
            'assessment_tool_id',
            'assessment_tool_ids',
            'assessmenttoolid',
            'assessmenttoolids',
        ];
        $targetLookup = array_fill_keys($targetKeys, true);

        while (!empty($stack)) {
            $current = array_pop($stack);
            if (!is_array($current)) {
                continue;
            }

            foreach ($current as $key => $value) {
                $normalizedKey = is_string($key) ? strtolower(trim($key)) : '';

                if ($normalizedKey !== '' && isset($targetLookup[$normalizedKey])) {
                    foreach ($this->normalizeCertificateBuilderToolValues($value) as $toolId) {
                        $result[$toolId] = true;
                    }
                }

                if ($normalizedKey === 'displaymode'
                    && $elementType === 'assessment_tool_cards'
                    && is_string($value)
                    && strtolower(trim($value)) === 'all'
                ) {
                    $result['__all__'] = true;
                }

                if ($normalizedKey === 'mode'
                    && $elementType === 'dynamic_table'
                    && is_string($value)
                    && strtolower(trim($value)) === 'evaluation_tools'
                ) {
                    $result['__all__'] = true;
                }

                if (is_array($value)) {
                    $stack[] = $value;
                }
            }
        }

        return array_values(array_keys($result));
    }

    private function normalizeCertificateBuilderToolValues($value): array
    {
        $collected = [];

        if (is_array($value)) {
            foreach ($value as $item) {
                if (is_array($item)) {
                    if (isset($item['value'])) {
                        $collected = array_merge($collected, $this->normalizeCertificateBuilderToolValues($item['value']));
                    } elseif (isset($item['id'])) {
                        $collected = array_merge($collected, $this->normalizeCertificateBuilderToolValues($item['id']));
                    } else {
                        $collected = array_merge($collected, $this->normalizeCertificateBuilderToolValues($item));
                    }
                } else {
                    $collected = array_merge($collected, $this->normalizeCertificateBuilderToolValues($item));
                }
            }
            return $this->deduplicateCertificateBuilderToolIds($collected);
        }

        if (is_string($value) || is_numeric($value)) {
            $token = trim((string) $value);
            if ($token === '') {
                return [];
            }

            if ($token !== '' && ($token[0] === '[' || $token[0] === '{')) {
                $decoded = json_decode($token, true);
                if (is_array($decoded)) {
                    return $this->normalizeCertificateBuilderToolValues($decoded);
                }
            }

            if (strpos($token, ',') !== false) {
                $parts = array_filter(array_map('trim', explode(',', $token)), static function ($part) {
                    return $part !== '';
                });
                if (!empty($parts)) {
                    return $this->deduplicateCertificateBuilderToolIds($parts);
                }
            }

            return [$token];
        }

        return [];
    }

    private function deduplicateCertificateBuilderToolIds(array $values): array
    {
        $set = [];
        foreach ($values as $value) {
            if (!is_string($value) && !is_numeric($value)) {
                continue;
            }
            $token = trim((string) $value);
            if ($token === '') {
                continue;
            }
            $set[$token] = true;
        }
        return array_values(array_keys($set));
    }

    private function fetchOrganization(int $organizationId): ?array
    {
        try {
            return DatabaseHelper::fetchOne('SELECT * FROM organizations WHERE id = :id LIMIT 1', ['id' => $organizationId]);
        } catch (Exception $exception) {
            return null;
        }
    }
}
